{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6e8b1bdd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:20.705663Z",
     "iopub.status.busy": "2024-04-25T03:15:20.704909Z",
     "iopub.status.idle": "2024-04-25T03:15:21.408034Z",
     "shell.execute_reply": "2024-04-25T03:15:21.407110Z"
    },
    "papermill": {
     "duration": 0.723033,
     "end_time": "2024-04-25T03:15:21.410363",
     "exception": false,
     "start_time": "2024-04-25T03:15:20.687330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/riehle-1/Riehle_1_Project_Structures.csv\n",
      "/kaggle/input/riehle-1/Riehle_1_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Long_Pro.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5c8205a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:21.444508Z",
     "iopub.status.busy": "2024-04-25T03:15:21.444124Z",
     "iopub.status.idle": "2024-04-25T03:15:21.475486Z",
     "shell.execute_reply": "2024-04-25T03:15:21.474685Z"
    },
    "papermill": {
     "duration": 0.051003,
     "end_time": "2024-04-25T03:15:21.477505",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.426502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>495998.0819</td>\n",
       "      <td>4794269.644</td>\n",
       "      <td>4872.834961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.263171269</td>\n",
       "      <td>495998.744</td>\n",
       "      <td>4794268.568</td>\n",
       "      <td>4872.605469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.526342538</td>\n",
       "      <td>495999.406</td>\n",
       "      <td>4794267.492</td>\n",
       "      <td>4872.506836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.789513807</td>\n",
       "      <td>496000.068</td>\n",
       "      <td>4794266.416</td>\n",
       "      <td>4872.375488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.052685076</td>\n",
       "      <td>496000.73</td>\n",
       "      <td>4794265.34</td>\n",
       "      <td>4872.178711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>579</th>\n",
       "      <td>738.2102804</td>\n",
       "      <td>496079.3353</td>\n",
       "      <td>4793625.201</td>\n",
       "      <td>4793.208496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>580</th>\n",
       "      <td>739.468345</td>\n",
       "      <td>496079.651</td>\n",
       "      <td>4793623.984</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>581</th>\n",
       "      <td>740.5064947</td>\n",
       "      <td>496079.8314</td>\n",
       "      <td>4793622.961</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582</th>\n",
       "      <td>741.5446445</td>\n",
       "      <td>496080.0118</td>\n",
       "      <td>4793621.939</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>583</th>\n",
       "      <td>742.5827942</td>\n",
       "      <td>496080.1922</td>\n",
       "      <td>4793620.916</td>\n",
       "      <td>4793.110352</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>583 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft\n",
       "1              0  495998.0819  4794269.644  4872.834961\n",
       "2    1.263171269   495998.744  4794268.568  4872.605469\n",
       "3    2.526342538   495999.406  4794267.492  4872.506836\n",
       "4    3.789513807   496000.068  4794266.416  4872.375488\n",
       "5    5.052685076    496000.73   4794265.34  4872.178711\n",
       "..           ...          ...          ...          ...\n",
       "579  738.2102804  496079.3353  4793625.201  4793.208496\n",
       "580   739.468345   496079.651  4793623.984  4793.175781\n",
       "581  740.5064947  496079.8314  4793622.961  4793.175781\n",
       "582  741.5446445  496080.0118  4793621.939  4793.175781\n",
       "583  742.5827942  496080.1922  4793620.916  4793.110352\n",
       "\n",
       "[583 rows x 4 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df = pd.read_csv('/kaggle/input/riehle-1/Riehle_1_Long_Pro.csv')\n",
    "stream_profile_df = stream_profile_df.rename(stream_profile_df.iloc[0]).iloc[1:]\n",
    "stream_profile_df.columns = ['Dist M', 'X', 'Y', 'Elev ft']\n",
    "stream_profile_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7b2908a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:21.512158Z",
     "iopub.status.busy": "2024-04-25T03:15:21.511612Z",
     "iopub.status.idle": "2024-04-25T03:15:21.536885Z",
     "shell.execute_reply": "2024-04-25T03:15:21.535991Z"
    },
    "papermill": {
     "duration": 0.044044,
     "end_time": "2024-04-25T03:15:21.538734",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.494690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>ident</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Y</th>\n",
       "      <th>X</th>\n",
       "      <th>comment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-07</td>\n",
       "      <td>43.300586</td>\n",
       "      <td>-105.049715</td>\n",
       "      <td>4794195.671</td>\n",
       "      <td>495968.4718</td>\n",
       "      <td>ZB 12-4-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-04</td>\n",
       "      <td>43.299027</td>\n",
       "      <td>-105.050437</td>\n",
       "      <td>4794022.573</td>\n",
       "      <td>495909.8059</td>\n",
       "      <td>RRD 10-10-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-01</td>\n",
       "      <td>43.298433</td>\n",
       "      <td>-105.049843</td>\n",
       "      <td>4793956.578</td>\n",
       "      <td>495957.9471</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-09</td>\n",
       "      <td>43.301886</td>\n",
       "      <td>-105.049627</td>\n",
       "      <td>4794340.038</td>\n",
       "      <td>495975.6952</td>\n",
       "      <td>Mdw small chnl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-08</td>\n",
       "      <td>43.300821</td>\n",
       "      <td>-105.049454</td>\n",
       "      <td>4794221.757</td>\n",
       "      <td>495989.6569</td>\n",
       "      <td>10-15-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-06</td>\n",
       "      <td>43.299888</td>\n",
       "      <td>-105.050330</td>\n",
       "      <td>4794118.185</td>\n",
       "      <td>495918.5425</td>\n",
       "      <td>WF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-05</td>\n",
       "      <td>43.299390</td>\n",
       "      <td>-105.050454</td>\n",
       "      <td>4794062.887</td>\n",
       "      <td>495908.4514</td>\n",
       "      <td>15-8-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-02</td>\n",
       "      <td>43.298728</td>\n",
       "      <td>-105.050197</td>\n",
       "      <td>4793989.382</td>\n",
       "      <td>495929.2187</td>\n",
       "      <td>8-14-2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-03</td>\n",
       "      <td>43.298965</td>\n",
       "      <td>-105.050397</td>\n",
       "      <td>4794015.678</td>\n",
       "      <td>495913.0101</td>\n",
       "      <td>12.5-17-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-101</td>\n",
       "      <td>43.295872</td>\n",
       "      <td>-105.048572</td>\n",
       "      <td>4793672.122</td>\n",
       "      <td>496060.8806</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-102</td>\n",
       "      <td>43.296017</td>\n",
       "      <td>-105.048671</td>\n",
       "      <td>4793688.225</td>\n",
       "      <td>496052.8807</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-103</td>\n",
       "      <td>43.296140</td>\n",
       "      <td>-105.048585</td>\n",
       "      <td>4793701.847</td>\n",
       "      <td>496059.8165</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-104</td>\n",
       "      <td>43.296230</td>\n",
       "      <td>-105.048663</td>\n",
       "      <td>4793711.847</td>\n",
       "      <td>496053.5120</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-109</td>\n",
       "      <td>43.296734</td>\n",
       "      <td>-105.048855</td>\n",
       "      <td>4793767.847</td>\n",
       "      <td>496037.9898</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-108</td>\n",
       "      <td>43.296600</td>\n",
       "      <td>-105.048807</td>\n",
       "      <td>4793753.018</td>\n",
       "      <td>496041.8808</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-107</td>\n",
       "      <td>43.296550</td>\n",
       "      <td>-105.048807</td>\n",
       "      <td>4793747.398</td>\n",
       "      <td>496041.8808</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-106</td>\n",
       "      <td>43.296455</td>\n",
       "      <td>-105.048612</td>\n",
       "      <td>4793736.827</td>\n",
       "      <td>496057.7109</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-100</td>\n",
       "      <td>43.295859</td>\n",
       "      <td>-105.048531</td>\n",
       "      <td>4793670.706</td>\n",
       "      <td>496064.2344</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-105</td>\n",
       "      <td>43.296445</td>\n",
       "      <td>-105.048622</td>\n",
       "      <td>4793735.773</td>\n",
       "      <td>496056.8265</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>Riehle 1-110</td>\n",
       "      <td>43.297916</td>\n",
       "      <td>-105.049595</td>\n",
       "      <td>4793899.195</td>\n",
       "      <td>495978.0270</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-111</td>\n",
       "      <td>43.298726</td>\n",
       "      <td>-105.050188</td>\n",
       "      <td>4793989.098</td>\n",
       "      <td>495929.9958</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-112</td>\n",
       "      <td>43.299875</td>\n",
       "      <td>-105.050298</td>\n",
       "      <td>4794116.776</td>\n",
       "      <td>495921.0939</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        type         ident   Latitude   Longitude            Y            X  \\\n",
       "0   WAYPOINT   RIEHLE 1-07  43.300586 -105.049715  4794195.671  495968.4718   \n",
       "1   WAYPOINT   RIEHLE 1-04  43.299027 -105.050437  4794022.573  495909.8059   \n",
       "2   WAYPOINT   RIEHLE 1-01  43.298433 -105.049843  4793956.578  495957.9471   \n",
       "3   WAYPOINT   RIEHLE 1-09  43.301886 -105.049627  4794340.038  495975.6952   \n",
       "4   WAYPOINT   RIEHLE 1-08  43.300821 -105.049454  4794221.757  495989.6569   \n",
       "5   WAYPOINT   RIEHLE 1-06  43.299888 -105.050330  4794118.185  495918.5425   \n",
       "6   WAYPOINT   RIEHLE 1-05  43.299390 -105.050454  4794062.887  495908.4514   \n",
       "7   WAYPOINT   RIEHLE 1-02  43.298728 -105.050197  4793989.382  495929.2187   \n",
       "8   WAYPOINT   RIEHLE 1-03  43.298965 -105.050397  4794015.678  495913.0101   \n",
       "9   WAYPOINT  RIEHLE 1-101  43.295872 -105.048572  4793672.122  496060.8806   \n",
       "10  WAYPOINT  RIEHLE 1-102  43.296017 -105.048671  4793688.225  496052.8807   \n",
       "11  WAYPOINT  RIEHLE 1-103  43.296140 -105.048585  4793701.847  496059.8165   \n",
       "12  WAYPOINT  RIEHLE 1-104  43.296230 -105.048663  4793711.847  496053.5120   \n",
       "13  WAYPOINT  RIEHLE 1-109  43.296734 -105.048855  4793767.847  496037.9898   \n",
       "14  WAYPOINT  RIEHLE 1-108  43.296600 -105.048807  4793753.018  496041.8808   \n",
       "15  WAYPOINT  RIEHLE 1-107  43.296550 -105.048807  4793747.398  496041.8808   \n",
       "16  WAYPOINT  RIEHLE 1-106  43.296455 -105.048612  4793736.827  496057.7109   \n",
       "17  WAYPOINT  RIEHLE 1-100  43.295859 -105.048531  4793670.706  496064.2344   \n",
       "18  WAYPOINT  RIEHLE 1-105  43.296445 -105.048622  4793735.773  496056.8265   \n",
       "19  WAYPOINT  Riehle 1-110  43.297916 -105.049595  4793899.195  495978.0270   \n",
       "20  WAYPOINT  RIEHLE 1-111  43.298726 -105.050188  4793989.098  495929.9958   \n",
       "21  WAYPOINT  RIEHLE 1-112  43.299875 -105.050298  4794116.776  495921.0939   \n",
       "\n",
       "           comment  \n",
       "0        ZB 12-4-2  \n",
       "1      RRD 10-10-1  \n",
       "2              NaN  \n",
       "3   Mdw small chnl  \n",
       "4          10-15-1  \n",
       "5               WF  \n",
       "6           15-8-1  \n",
       "7         8-14-2.5  \n",
       "8        12.5-17-2  \n",
       "9              NaN  \n",
       "10             NaN  \n",
       "11             NaN  \n",
       "12             NaN  \n",
       "13             NaN  \n",
       "14             NaN  \n",
       "15             NaN  \n",
       "16             NaN  \n",
       "17             NaN  \n",
       "18             NaN  \n",
       "19             NaN  \n",
       "20             NaN  \n",
       "21             NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "structures_df = pd.read_csv('/kaggle/input/riehle-1/Riehle_1_Project_Structures.csv')\n",
    "structures_df = structures_df.rename(columns={'y_proj': 'Y', 'x_proj': 'X'})\n",
    "structures_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd785ad7",
   "metadata": {
    "papermill": {
     "duration": 0.016621,
     "end_time": "2024-04-25T03:15:21.571937",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.555316",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The structure data is not very useful in it's current form as the positions of the strutcure do not fall on the stream path. We will need to develop an algorythm to calculate the closest points along the stream path which would correspond to the strutcure locations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "42ce47db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:21.606428Z",
     "iopub.status.busy": "2024-04-25T03:15:21.606155Z",
     "iopub.status.idle": "2024-04-25T03:15:21.611732Z",
     "shell.execute_reply": "2024-04-25T03:15:21.610869Z"
    },
    "papermill": {
     "duration": 0.025297,
     "end_time": "2024-04-25T03:15:21.613681",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.588384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_closest_points (stream_path, structure_points):\n",
    "    closest_points = []\n",
    "    for x, y in structure_points:\n",
    "        min_distance = float('inf')\n",
    "        for x1, y1 in stream_path:\n",
    "            distance = ((x1 - x)**2 + (y1 - y)**2)**0.5\n",
    "            if distance < min_distance:\n",
    "                min_distance = distance\n",
    "                close_point_pair = [x1, y1]\n",
    "        closest_points.append(close_point_pair)\n",
    "    return closest_points"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41d0524b",
   "metadata": {
    "papermill": {
     "duration": 0.016258,
     "end_time": "2024-04-25T03:15:21.646398",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.630140",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This function takes the stream path and the structure points then performs the pythagorean theorem on to calculate the euclidian distance between the current structure and all points along the stream path. It finds the shortest distance and adds that point along the stream path to the closest points array. This array ends with a collection of the closest points to each structure."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aafbcb99",
   "metadata": {
    "papermill": {
     "duration": 0.01611,
     "end_time": "2024-04-25T03:15:21.678792",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.662682",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Next I need to create a function that will create an array from each dataframe so we can feed the appropriate data structure into the `get_closest_points` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "377cfe73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:21.712411Z",
     "iopub.status.busy": "2024-04-25T03:15:21.712147Z",
     "iopub.status.idle": "2024-04-25T03:15:21.719660Z",
     "shell.execute_reply": "2024-04-25T03:15:21.718813Z"
    },
    "papermill": {
     "duration": 0.026415,
     "end_time": "2024-04-25T03:15:21.721514",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.695099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " def zip_df_cols(dataframe):\n",
    "    array = []\n",
    "    for x,y in zip(dataframe['X'], dataframe['Y']):\n",
    "        array.append([float(x), float(y)])\n",
    "    return array\n",
    "\n",
    "structures_array = zip_df_cols(structures_df)\n",
    "stream_profile_array = zip_df_cols(stream_profile_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac99d982",
   "metadata": {
    "papermill": {
     "duration": 0.016322,
     "end_time": "2024-04-25T03:15:21.754210",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.737888",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we can find the closest points along the stream profile that correspond to the structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "493462a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:21.787523Z",
     "iopub.status.busy": "2024-04-25T03:15:21.787280Z",
     "iopub.status.idle": "2024-04-25T03:15:21.800156Z",
     "shell.execute_reply": "2024-04-25T03:15:21.799116Z"
    },
    "papermill": {
     "duration": 0.031734,
     "end_time": "2024-04-25T03:15:21.802120",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.770386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[495968.4379, 4794196.563], [495909.7792, 4794022.362], [495954.9406, 4793957.022], [495998.0819, 4794269.644], [495990.7051, 4794221.647], [495920.4458, 4794117.176], [495906.7227, 4794063.485], [495928.4509, 4793989.593], [495913.6466, 4794015.625], [496065.5786, 4793674.139], [496059.2641, 4793690.376], [496059.4445, 4793702.284], [496056.1369, 4793712.928], [496037.4699, 4793768.28], [496040.0949, 4793752.89], [496042.6659, 4793747.388], [496057.2795, 4793736.202], [496067.0219, 4793671.072], [496057.2795, 4793736.202], [495977.3133, 4793899.187], [495929.3658, 4793988.304], [495920.4458, 4794117.176]]\n"
     ]
    }
   ],
   "source": [
    "closest_profile_points = get_closest_points(stream_profile_array, structures_array)\n",
    "print(closest_profile_points)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b23c11bc",
   "metadata": {
    "papermill": {
     "duration": 0.016332,
     "end_time": "2024-04-25T03:15:21.834713",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.818381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have an array of the closest points along the stream profile that correspond to our structures. We can note that the first structure falls out of the range of our stream profile so we can neglect this point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ae12a047",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:21.868579Z",
     "iopub.status.busy": "2024-04-25T03:15:21.868330Z",
     "iopub.status.idle": "2024-04-25T03:15:21.873658Z",
     "shell.execute_reply": "2024-04-25T03:15:21.872912Z"
    },
    "papermill": {
     "duration": 0.024368,
     "end_time": "2024-04-25T03:15:21.875477",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.851109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "closest_profile_points = closest_profile_points[1:]\n",
    "len(closest_profile_points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba6ec0f3",
   "metadata": {
    "papermill": {
     "duration": 0.016368,
     "end_time": "2024-04-25T03:15:21.908238",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.891870",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's package this whole process as a function to allow us to repeat it for every section of stream."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3791905c",
   "metadata": {
    "papermill": {
     "duration": 0.016293,
     "end_time": "2024-04-25T03:15:21.941031",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.924738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Building a Data Processing Object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e118c823",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:21.975541Z",
     "iopub.status.busy": "2024-04-25T03:15:21.975297Z",
     "iopub.status.idle": "2024-04-25T03:15:22.018544Z",
     "shell.execute_reply": "2024-04-25T03:15:22.017906Z"
    },
    "papermill": {
     "duration": 0.063011,
     "end_time": "2024-04-25T03:15:22.020408",
     "exception": false,
     "start_time": "2024-04-25T03:15:21.957397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from typing import List, Tuple\n",
    "\n",
    "class New_Dataframe:\n",
    "    \n",
    "    class FinalDataFrame:\n",
    "        def __init__(self, final_df, stream_profiles):\n",
    "            self.final_df = final_df\n",
    "            self.stream_profiles = stream_profiles\n",
    "    \n",
    "    def split_profile_and_structures(self, data_list_array: List[str]) -> Tuple[List[str], List[str]]:\n",
    "        \"\"\"\n",
    "        Splits a list of strings into two lists: profile_list and structure_list.\n",
    "\n",
    "        Args:\n",
    "            data_list_array (List[str]): A list of strings to be split.\n",
    "\n",
    "        Returns:\n",
    "            Tuple[List[str], List[str]]: A tuple containing the profile_list and structure_list.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_list = []\n",
    "        structure_list = []\n",
    "        \n",
    "        for item in data_list_array:\n",
    "            if 'Long' in item:\n",
    "                profile_list.append(item)\n",
    "            else:\n",
    "                structure_list.append(item)\n",
    "        return profile_list, structure_list\n",
    "    \n",
    "    def pair_profile_and_structure(self,datalist: List[str]) -> List[List[List[str]]]:\n",
    "        \n",
    "        \"\"\"\n",
    "        Pairs profile and structure items from a list of strings.\n",
    "\n",
    "        Args:\n",
    "            datalist (List[str]): A list of strings containing profile and structure items.\n",
    "\n",
    "        Returns:\n",
    "            List[List[List[str]]]: A list of pairs of profile and structure items.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_list, structure_list = self.split_profile_and_structures(datalist)\n",
    "        profile_structure_pair_arr = []\n",
    "        \n",
    "        for stream_profile in profile_list:\n",
    "            profile_structure_pair = [stream_profile]\n",
    "            search_pattern = r'([\\w]+)_(\\d+)([A-Z]?)(?=_)'\n",
    "            match = re.search(search_pattern, stream_profile)\n",
    "            \n",
    "            if match:\n",
    "                stream_name = match.group(1)\n",
    "                stream_section = match.group(2)\n",
    "                stream_section_letter = match.group(3)\n",
    "            \n",
    "            for structure in structure_list:\n",
    "                structure_match = re.search(search_pattern, structure)\n",
    "                if structure_match and structure_match.group(1) == stream_name and structure_match.group(2) == stream_section and structure_match.group(3) == stream_section_letter:\n",
    "                    profile_structure_pair.append(structure)\n",
    "                    profile_structure_pair_arr.append(profile_structure_pair)\n",
    "                    break\n",
    "            \n",
    "        return profile_structure_pair_arr\n",
    "  \n",
    "    def get_closest_points(self, stream_path_df: pd.DataFrame, structure_df: pd.DataFrame) -> List[List[float]]:\n",
    "        \"\"\"\n",
    "        Finds the closest points between the stream_path_df and structure_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            structure_df (pd.DataFrame): The DataFrame containing the structure data.\n",
    "\n",
    "        Returns:\n",
    "            List[List[float]]: A list of closest points, where each point is a list of [x, y] coordinates.\n",
    "        \"\"\"\n",
    "        closest_points = []\n",
    "        for i in range(len(structure_df['x_proj'])):\n",
    "            structure_x = structure_df['x_proj'].iloc[i]\n",
    "            structure_y = structure_df['y_proj'].iloc[i]\n",
    "\n",
    "            min_dist = float('inf')\n",
    "\n",
    "            for j in range(len(stream_path_df['X'])):\n",
    "                stream_path_x = stream_path_df['X'].iloc[j]\n",
    "                stream_path_y = stream_path_df['Y'].iloc[j]\n",
    "                dist = ((structure_x - stream_path_x)**2 + (structure_y - stream_path_y)**2)**0.5\n",
    "                \n",
    "                if dist < min_dist:\n",
    "                    min_dist = dist\n",
    "                    closest_point = [stream_path_x, stream_path_y]\n",
    "                    \n",
    "            closest_points.append(closest_point)\n",
    "        return closest_points\n",
    "    \n",
    "    def create_headcut_bools(self, stream_path_df: pd.DataFrame, closest_points: List[List[float]]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Adds a 'has headcut' column to the stream_path_df based on the closest points.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            closest_points (List[List[float]]): A list of closest points, where each point is a list of [x, y] coordinates.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the 'has headcut' column added.\n",
    "        \"\"\"\n",
    "        for i in range(len(stream_path_df)):\n",
    "            x_val, y_val = stream_path_df['X'].iloc[i], stream_path_df['Y'].iloc[i]\n",
    "            has_headcut_bool = False\n",
    "            for j in range(len(closest_points)):\n",
    "                if closest_points[j][0] == x_val and closest_points[j][1] == y_val:\n",
    "                    has_headcut_bool = True\n",
    "                    break\n",
    "            stream_path_df.at[i, 'has headcut'] = 1 if has_headcut_bool else 0\n",
    "        return stream_path_df\n",
    "\n",
    "    \n",
    "    def get_avg_slopes(self, stream_path_df: pd.DataFrame, slope_arr: List[int] = [1, 5, 10, 15]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the average slope for the given slope_arr and adds the slope columns to the stream_path_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            slope_arr (List[int]): A list of slope gap values to calculate the slopes for.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the average slope columns added.\n",
    "        \"\"\"\n",
    "        for slope_gap in slope_arr:\n",
    "            stream_path_df = self.calc_slope(stream_path_df, slope_gap)\n",
    "        return stream_path_df\n",
    "    def calc_slope(self, stream_path_df: pd.DataFrame, slope_gap: int) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the slope at each point in the stream_path_df using the given slope_gap.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            slope_gap (int): The number of points to consider for the slope calculation.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the slope columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            index_1 = max(0, i-slope_gap)\n",
    "            index_2 = min(stream_length - 1, i+slope_gap)\n",
    "            dist_delta = stream_path_df['Dist M'].iloc[index_2] - stream_path_df['Dist M'].iloc[index_1]\n",
    "            elev_delta = stream_path_df['Elev Ft'].iloc[index_2] - stream_path_df['Elev Ft'].iloc[index_1]\n",
    "            \n",
    "            if dist_delta == 0:\n",
    "                slope = 0\n",
    "                print(f\"dist_delta = 0  at {i}\")\n",
    "            else:\n",
    "                slope = elev_delta/dist_delta\n",
    "            column_title = f\"Slope Gap: {slope_gap}\"\n",
    "            stream_path_df.at[i, column_title] = slope\n",
    "        \n",
    "        return stream_path_df\n",
    "    \n",
    "    def get_sinuosity(self, stream_path_df: pd.DataFrame, sinuosity_arr: List[int] = [50, 100, 150]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the sinuosity for the given sinuosity_arr and adds the sinuosity columns to the stream_path_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            sinuosity_arr (List[int]): A list of sinuosity gap values to calculate the sinouositys for.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        \n",
    "        for sinuosity_gap in sinuosity_arr:\n",
    "            stream_path_df = self.calc_sinuosity(stream_path_df, sinuosity_gap)\n",
    "        return stream_path_df\n",
    "    \n",
    "    def calc_sinuosity(self, stream_path_df: pd.DataFrame, sinuosity_gap: int) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the sinuosity at each point in the stream_path_df using the given sinuosity_gap.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            sinuosity_gap (int): The number of points to consider for the sinuosity calculation.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            index_1 = max(0, i-sinuosity_gap)\n",
    "            index_2 = min(stream_length - 1, i+sinuosity_gap)\n",
    "            stream_dist = stream_path_df['Dist M'].iloc[index_2] - stream_path_df['Dist M'].iloc[index_1]\n",
    "            \n",
    "            x_min, y_min =  stream_path_df['X'].iloc[index_1], stream_path_df['Y'].iloc[index_1]\n",
    "            x_max, y_max = stream_path_df['X'].iloc[index_2], stream_path_df['Y'].iloc[index_2]\n",
    "            linear_dist = ((x_max - x_min)**2 + (y_max - y_min)**2)**0.5\n",
    "            \n",
    "            \n",
    "            if linear_dist == 0:\n",
    "                sinuosity = 0\n",
    "            else:\n",
    "                sinuosity = stream_dist/linear_dist\n",
    "            \n",
    "            column_title = f\"Sinuosity Gap: {sinuosity_gap}\"\n",
    "            stream_path_df.at[i, column_title] = sinuosity\n",
    "        \n",
    "        return stream_path_df\n",
    "    \n",
    "    def get_deviation_from_avg(self, stream_path_df: pd.DataFrame) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Finds the deviation in elevation change from average.\n",
    "        \n",
    "        Args: \n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\\\n",
    "            \n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        elev_change_arr = []\n",
    "        for i in range(stream_length-1):\n",
    "            elev_change = stream_path_df['Elev Ft'].iloc[i+1] - stream_path_df['Elev Ft'].iloc[i]\n",
    "            elev_change_arr.append(elev_change)\n",
    "        elev_change_arr.append(elev_change)    \n",
    "        avg_elev_change = sum(elev_change_arr)/float(len(elev_change_arr))\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            dev_from_avg = avg_elev_change - elev_change_arr[i]\n",
    "            column_title = f\"Dev From Avg\"\n",
    "            stream_path_df.at[i, column_title] = dev_from_avg\n",
    "        \n",
    "        return stream_path_df\n",
    "            \n",
    "    \n",
    "    def create_final_dataframe(self, datalist: List[str], convert_distance_units=False) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Creates the final DataFrame by processing the input datalist.\n",
    "\n",
    "        Args:\n",
    "            datalist (List[str]): A list of file paths or other data.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The final consolidated DataFrame.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_structure_list = self.pair_profile_and_structure(datalist)\n",
    "        stream_profiles = {}\n",
    "        final_df = pd.DataFrame()\n",
    "        first_pass = True\n",
    "\n",
    "        for pair in profile_structure_list:\n",
    "            stream_path = pair[0]\n",
    "            structure = pair[1]\n",
    "\n",
    "            try:\n",
    "                stream_path_df = pd.read_csv(stream_path)\n",
    "                print(f\"Successfully read {stream_path}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error reading {stream_path}: {e}\")\n",
    "                continue\n",
    "\n",
    "            try:\n",
    "                structure_df = pd.read_csv(structure)\n",
    "                print(f\"Successfully read {structure}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error reading {structure}: {e}\")\n",
    "                continue\n",
    "            \n",
    "            closest_structure_points = self.get_closest_points(stream_path_df, structure_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            stream_path_df = self.create_headcut_bools(stream_path_df, closest_structure_points)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for headcut_bools {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            if convert_distance_units:\n",
    "                stream_path_df['Dist Ft'] = stream_path_df['Dist M'] / 0.3048\n",
    "                print(\"'Dist Ft' column added with distances in feet\")\n",
    "                \n",
    "            stream_path_df = self.get_avg_slopes(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for avg_slope {stream_path_df}\")\n",
    "                continue\n",
    "                \n",
    "            stream_path_df = self.get_sinuosity(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for get_sinuosity {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            stream_path_df = self.get_deviation_from_avg(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for get_deviation_from_avg {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            search_pattern = r'([\\w]+)_(\\d+)([A-Z]?)(?=_)'\n",
    "            match = re.search(search_pattern, stream_path)\n",
    "            if match:\n",
    "                stream_name = match.group(1)\n",
    "                stream_section = match.group(2)\n",
    "                stream_section_letter = match.group(3)\n",
    "                stream_profile_name = f\"{stream_name}_{stream_section}{stream_section_letter}\"\n",
    "                stream_profiles[stream_profile_name] = stream_path_df\n",
    "            else:\n",
    "                print(f\"Unable to extract stream name and section from {stream_path}\")\n",
    "            # Check if the dataframes have numerical columns\n",
    "            if first_pass:\n",
    "                # Use the column titles from the first stream_path_df\n",
    "                final_df = pd.DataFrame(columns=stream_path_df.columns)\n",
    "                first_pass = False\n",
    "                \n",
    "            if not first_pass:\n",
    "                stream_path_df.drop(index=0)\n",
    "            \n",
    "            if all(stream_path_df.dtypes == float) and all(structure_df.dtypes == float):\n",
    "                stream_path_df = stream_path_df.astype(float)\n",
    "                structure_df = structure_df.astype(float)\n",
    "            else:\n",
    "                # If the dataframes have non-numerical columns, drop them\n",
    "                stream_path_df = stream_path_df.select_dtypes(include='number').astype(float)\n",
    "                structure_df = structure_df.select_dtypes(include='number').astype(float)         \n",
    "\n",
    "            final_df = pd.concat([final_df, stream_path_df], ignore_index=True)\n",
    "\n",
    "        return self.FinalDataFrame(final_df, stream_profiles)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c0e53ea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:22.054487Z",
     "iopub.status.busy": "2024-04-25T03:15:22.054228Z",
     "iopub.status.idle": "2024-04-25T03:15:26.387504Z",
     "shell.execute_reply": "2024-04-25T03:15:26.386727Z"
    },
    "papermill": {
     "duration": 4.352748,
     "end_time": "2024-04-25T03:15:26.389789",
     "exception": false,
     "start_time": "2024-04-25T03:15:22.037041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Project_Structures.csv\n",
      "'Dist Ft' column added with distances in feet\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_25/3253329144.py:331: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n",
      "  final_df = pd.concat([final_df, stream_path_df], ignore_index=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Project_Structures.csv\n",
      "'Dist Ft' column added with distances in feet\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Project_Structures.csv\n",
      "'Dist Ft' column added with distances in feet\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Project_Structures.csv\n",
      "'Dist Ft' column added with distances in feet\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Project_Structures.csv\n",
      "'Dist Ft' column added with distances in feet\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Project_Structures.csv\n",
      "'Dist Ft' column added with distances in feet\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "total_df = New_Dataframe()\n",
    "stream_structure_dataset = []\n",
    "\n",
    "for dirname, _, filenames in os.walk('/kaggle/input/headcut-collection'):\n",
    "    for filename in filenames:\n",
    "        file = os.path.join(dirname, filename)\n",
    "        stream_structure_dataset.append(file)\n",
    "\n",
    "stream_df_new = total_df.create_final_dataframe(stream_structure_dataset, True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "02d73ddd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:26.426274Z",
     "iopub.status.busy": "2024-04-25T03:15:26.425934Z",
     "iopub.status.idle": "2024-04-25T03:15:26.439355Z",
     "shell.execute_reply": "2024-04-25T03:15:26.438097Z"
    },
    "papermill": {
     "duration": 0.033818,
     "end_time": "2024-04-25T03:15:26.441276",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.407458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Dist M            X            Y      Elev Ft  has headcut  \\\n",
      "0       0.000000  495684.6380  4794395.746  4886.384766          1.0   \n",
      "1       1.043499  495684.6380  4794394.702  4886.253418          0.0   \n",
      "2       2.086998  495684.6380  4794393.659  4886.187988          0.0   \n",
      "3       3.130497  495684.6380  4794392.615  4885.958008          0.0   \n",
      "4       4.586810  495684.8439  4794391.174  4885.433105          0.0   \n",
      "...          ...          ...          ...          ...          ...   \n",
      "2615  422.960557  496011.6344  4793816.487  4807.415039          0.0   \n",
      "2616  424.102494  496011.4540  4793815.359  4807.382324          0.0   \n",
      "2617  425.244431  496011.2736  4793814.231  4807.349121          0.0   \n",
      "2618  426.386369  496011.0932  4793813.104  4807.283691          0.0   \n",
      "2619  427.528305  496010.9128  4793811.976  4806.955566          0.0   \n",
      "\n",
      "          Dist Ft  Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
      "0        0.000000     -0.125873     -0.222603      -0.305488      -0.244375   \n",
      "1        3.423553     -0.094288     -0.312158      -0.286685      -0.241834   \n",
      "2        6.847107     -0.141548     -0.298615      -0.266490      -0.228256   \n",
      "3       10.270660     -0.301976     -0.318961      -0.255804      -0.222257   \n",
      "4       15.048590     -0.315336     -0.325182      -0.240867      -0.216865   \n",
      "...           ...           ...           ...            ...            ...   \n",
      "2615  1387.665871     -0.099036     -0.116222      -0.100167      -0.102911   \n",
      "2616  1391.412383     -0.028862     -0.088500      -0.103653      -0.103710   \n",
      "2617  1395.158896     -0.043187     -0.101351      -0.098387      -0.102230   \n",
      "2618  1398.905408     -0.172319     -0.104313      -0.094699      -0.105570   \n",
      "2619  1402.651921     -0.287341     -0.114268      -0.107175      -0.102172   \n",
      "\n",
      "      Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  Dev From Avg  \n",
      "0              1.044071            1.046196            1.052876      0.013055  \n",
      "1              1.043309            1.046982            1.052531     -0.052863  \n",
      "2              1.042574            1.048752            1.052511      0.111687  \n",
      "3              1.042646            1.050445            1.052203      0.406610  \n",
      "4              1.042685            1.050541            1.051904      0.275261  \n",
      "...                 ...                 ...                 ...           ...  \n",
      "2615           1.068726            1.065266            1.052214     -0.169395  \n",
      "2616           1.063939            1.064631            1.052105     -0.168907  \n",
      "2617           1.059986            1.063940            1.051990     -0.136680  \n",
      "2618           1.055751            1.064551            1.051863      0.126015  \n",
      "2619           1.051249            1.065183            1.052209      0.126015  \n",
      "\n",
      "[2620 rows x 14 columns]\n",
      "dict_keys(['Riehle_3', 'Riehle_4', 'Riehle_2B', 'Riehle_2A', 'Riehle_1B', 'Riehle_1A'])\n",
      "(791, 14)\n"
     ]
    }
   ],
   "source": [
    "print(stream_df_new.final_df)\n",
    "print(stream_df_new.stream_profiles.keys())\n",
    "print(stream_df_new.stream_profiles['Riehle_3'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a2d362a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:26.476877Z",
     "iopub.status.busy": "2024-04-25T03:15:26.476616Z",
     "iopub.status.idle": "2024-04-25T03:15:26.497947Z",
     "shell.execute_reply": "2024-04-25T03:15:26.497019Z"
    },
    "papermill": {
     "duration": 0.041222,
     "end_time": "2024-04-25T03:15:26.499810",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.458588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev Ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Dist Ft</th>\n",
       "      <th>Slope Gap: 1</th>\n",
       "      <th>Slope Gap: 5</th>\n",
       "      <th>Slope Gap: 10</th>\n",
       "      <th>Slope Gap: 15</th>\n",
       "      <th>Sinuosity Gap: 50</th>\n",
       "      <th>Sinuosity Gap: 100</th>\n",
       "      <th>Sinuosity Gap: 150</th>\n",
       "      <th>Dev From Avg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794395.746</td>\n",
       "      <td>4886.384766</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.125873</td>\n",
       "      <td>-0.222603</td>\n",
       "      <td>-0.305488</td>\n",
       "      <td>-0.244375</td>\n",
       "      <td>1.044071</td>\n",
       "      <td>1.046196</td>\n",
       "      <td>1.052876</td>\n",
       "      <td>0.013055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.043499</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794394.702</td>\n",
       "      <td>4886.253418</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.423553</td>\n",
       "      <td>-0.094288</td>\n",
       "      <td>-0.312158</td>\n",
       "      <td>-0.286685</td>\n",
       "      <td>-0.241834</td>\n",
       "      <td>1.043309</td>\n",
       "      <td>1.046982</td>\n",
       "      <td>1.052531</td>\n",
       "      <td>-0.052863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.086998</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794393.659</td>\n",
       "      <td>4886.187988</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.847107</td>\n",
       "      <td>-0.141548</td>\n",
       "      <td>-0.298615</td>\n",
       "      <td>-0.266490</td>\n",
       "      <td>-0.228256</td>\n",
       "      <td>1.042574</td>\n",
       "      <td>1.048752</td>\n",
       "      <td>1.052511</td>\n",
       "      <td>0.111687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.130497</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794392.615</td>\n",
       "      <td>4885.958008</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.270660</td>\n",
       "      <td>-0.301976</td>\n",
       "      <td>-0.318961</td>\n",
       "      <td>-0.255804</td>\n",
       "      <td>-0.222257</td>\n",
       "      <td>1.042646</td>\n",
       "      <td>1.050445</td>\n",
       "      <td>1.052203</td>\n",
       "      <td>0.406610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.586810</td>\n",
       "      <td>495684.8439</td>\n",
       "      <td>4794391.174</td>\n",
       "      <td>4885.433105</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.048590</td>\n",
       "      <td>-0.315336</td>\n",
       "      <td>-0.325182</td>\n",
       "      <td>-0.240867</td>\n",
       "      <td>-0.216865</td>\n",
       "      <td>1.042685</td>\n",
       "      <td>1.050541</td>\n",
       "      <td>1.051904</td>\n",
       "      <td>0.275261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2615</th>\n",
       "      <td>422.960557</td>\n",
       "      <td>496011.6344</td>\n",
       "      <td>4793816.487</td>\n",
       "      <td>4807.415039</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1387.665871</td>\n",
       "      <td>-0.099036</td>\n",
       "      <td>-0.116222</td>\n",
       "      <td>-0.100167</td>\n",
       "      <td>-0.102911</td>\n",
       "      <td>1.068726</td>\n",
       "      <td>1.065266</td>\n",
       "      <td>1.052214</td>\n",
       "      <td>-0.169395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2616</th>\n",
       "      <td>424.102494</td>\n",
       "      <td>496011.4540</td>\n",
       "      <td>4793815.359</td>\n",
       "      <td>4807.382324</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1391.412383</td>\n",
       "      <td>-0.028862</td>\n",
       "      <td>-0.088500</td>\n",
       "      <td>-0.103653</td>\n",
       "      <td>-0.103710</td>\n",
       "      <td>1.063939</td>\n",
       "      <td>1.064631</td>\n",
       "      <td>1.052105</td>\n",
       "      <td>-0.168907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2617</th>\n",
       "      <td>425.244431</td>\n",
       "      <td>496011.2736</td>\n",
       "      <td>4793814.231</td>\n",
       "      <td>4807.349121</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1395.158896</td>\n",
       "      <td>-0.043187</td>\n",
       "      <td>-0.101351</td>\n",
       "      <td>-0.098387</td>\n",
       "      <td>-0.102230</td>\n",
       "      <td>1.059986</td>\n",
       "      <td>1.063940</td>\n",
       "      <td>1.051990</td>\n",
       "      <td>-0.136680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2618</th>\n",
       "      <td>426.386369</td>\n",
       "      <td>496011.0932</td>\n",
       "      <td>4793813.104</td>\n",
       "      <td>4807.283691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1398.905408</td>\n",
       "      <td>-0.172319</td>\n",
       "      <td>-0.104313</td>\n",
       "      <td>-0.094699</td>\n",
       "      <td>-0.105570</td>\n",
       "      <td>1.055751</td>\n",
       "      <td>1.064551</td>\n",
       "      <td>1.051863</td>\n",
       "      <td>0.126015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2619</th>\n",
       "      <td>427.528305</td>\n",
       "      <td>496010.9128</td>\n",
       "      <td>4793811.976</td>\n",
       "      <td>4806.955566</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1402.651921</td>\n",
       "      <td>-0.287341</td>\n",
       "      <td>-0.114268</td>\n",
       "      <td>-0.107175</td>\n",
       "      <td>-0.102172</td>\n",
       "      <td>1.051249</td>\n",
       "      <td>1.065183</td>\n",
       "      <td>1.052209</td>\n",
       "      <td>0.126015</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2620 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev Ft  has headcut  \\\n",
       "0       0.000000  495684.6380  4794395.746  4886.384766          1.0   \n",
       "1       1.043499  495684.6380  4794394.702  4886.253418          0.0   \n",
       "2       2.086998  495684.6380  4794393.659  4886.187988          0.0   \n",
       "3       3.130497  495684.6380  4794392.615  4885.958008          0.0   \n",
       "4       4.586810  495684.8439  4794391.174  4885.433105          0.0   \n",
       "...          ...          ...          ...          ...          ...   \n",
       "2615  422.960557  496011.6344  4793816.487  4807.415039          0.0   \n",
       "2616  424.102494  496011.4540  4793815.359  4807.382324          0.0   \n",
       "2617  425.244431  496011.2736  4793814.231  4807.349121          0.0   \n",
       "2618  426.386369  496011.0932  4793813.104  4807.283691          0.0   \n",
       "2619  427.528305  496010.9128  4793811.976  4806.955566          0.0   \n",
       "\n",
       "          Dist Ft  Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
       "0        0.000000     -0.125873     -0.222603      -0.305488      -0.244375   \n",
       "1        3.423553     -0.094288     -0.312158      -0.286685      -0.241834   \n",
       "2        6.847107     -0.141548     -0.298615      -0.266490      -0.228256   \n",
       "3       10.270660     -0.301976     -0.318961      -0.255804      -0.222257   \n",
       "4       15.048590     -0.315336     -0.325182      -0.240867      -0.216865   \n",
       "...           ...           ...           ...            ...            ...   \n",
       "2615  1387.665871     -0.099036     -0.116222      -0.100167      -0.102911   \n",
       "2616  1391.412383     -0.028862     -0.088500      -0.103653      -0.103710   \n",
       "2617  1395.158896     -0.043187     -0.101351      -0.098387      -0.102230   \n",
       "2618  1398.905408     -0.172319     -0.104313      -0.094699      -0.105570   \n",
       "2619  1402.651921     -0.287341     -0.114268      -0.107175      -0.102172   \n",
       "\n",
       "      Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  Dev From Avg  \n",
       "0              1.044071            1.046196            1.052876      0.013055  \n",
       "1              1.043309            1.046982            1.052531     -0.052863  \n",
       "2              1.042574            1.048752            1.052511      0.111687  \n",
       "3              1.042646            1.050445            1.052203      0.406610  \n",
       "4              1.042685            1.050541            1.051904      0.275261  \n",
       "...                 ...                 ...                 ...           ...  \n",
       "2615           1.068726            1.065266            1.052214     -0.169395  \n",
       "2616           1.063939            1.064631            1.052105     -0.168907  \n",
       "2617           1.059986            1.063940            1.051990     -0.136680  \n",
       "2618           1.055751            1.064551            1.051863      0.126015  \n",
       "2619           1.051249            1.065183            1.052209      0.126015  \n",
       "\n",
       "[2620 rows x 14 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_df_new.final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f3b2fb1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:26.536842Z",
     "iopub.status.busy": "2024-04-25T03:15:26.536558Z",
     "iopub.status.idle": "2024-04-25T03:15:26.540664Z",
     "shell.execute_reply": "2024-04-25T03:15:26.539839Z"
    },
    "papermill": {
     "duration": 0.025078,
     "end_time": "2024-04-25T03:15:26.542898",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.517820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['Riehle_3', 'Riehle_4', 'Riehle_2B', 'Riehle_2A', 'Riehle_1B', 'Riehle_1A'])\n"
     ]
    }
   ],
   "source": [
    "print(stream_df_new.stream_profiles.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "019f9ac4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:26.580187Z",
     "iopub.status.busy": "2024-04-25T03:15:26.579902Z",
     "iopub.status.idle": "2024-04-25T03:15:26.603322Z",
     "shell.execute_reply": "2024-04-25T03:15:26.602432Z"
    },
    "papermill": {
     "duration": 0.04422,
     "end_time": "2024-04-25T03:15:26.605132",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.560912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev Ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Dist Ft</th>\n",
       "      <th>Slope Gap: 1</th>\n",
       "      <th>Slope Gap: 5</th>\n",
       "      <th>Slope Gap: 10</th>\n",
       "      <th>Slope Gap: 15</th>\n",
       "      <th>Sinuosity Gap: 50</th>\n",
       "      <th>Sinuosity Gap: 100</th>\n",
       "      <th>Sinuosity Gap: 150</th>\n",
       "      <th>Dev From Avg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>495735.7033</td>\n",
       "      <td>4793434.890</td>\n",
       "      <td>4796.653809</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.801986</td>\n",
       "      <td>0.638625</td>\n",
       "      <td>0.446510</td>\n",
       "      <td>0.346674</td>\n",
       "      <td>1.065583</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.861613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.390590</td>\n",
       "      <td>495736.2607</td>\n",
       "      <td>4793436.164</td>\n",
       "      <td>4797.769043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.562303</td>\n",
       "      <td>1.391889</td>\n",
       "      <td>0.578499</td>\n",
       "      <td>0.421067</td>\n",
       "      <td>0.331991</td>\n",
       "      <td>1.069239</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-2.502238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.781180</td>\n",
       "      <td>495736.8181</td>\n",
       "      <td>4793437.438</td>\n",
       "      <td>4800.524902</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.124606</td>\n",
       "      <td>0.989714</td>\n",
       "      <td>0.515542</td>\n",
       "      <td>0.400043</td>\n",
       "      <td>0.317867</td>\n",
       "      <td>1.072693</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>0.483113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.943212</td>\n",
       "      <td>495737.2731</td>\n",
       "      <td>4793438.507</td>\n",
       "      <td>4800.295410</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.937048</td>\n",
       "      <td>0.070593</td>\n",
       "      <td>0.477649</td>\n",
       "      <td>0.380341</td>\n",
       "      <td>0.307075</td>\n",
       "      <td>1.075942</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.139934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.105245</td>\n",
       "      <td>495737.7281</td>\n",
       "      <td>4793439.576</td>\n",
       "      <td>4800.688965</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.749490</td>\n",
       "      <td>0.155262</td>\n",
       "      <td>0.423802</td>\n",
       "      <td>0.363897</td>\n",
       "      <td>0.293832</td>\n",
       "      <td>1.074800</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>0.286336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>108.180500</td>\n",
       "      <td>495767.0755</td>\n",
       "      <td>4793525.867</td>\n",
       "      <td>4817.093262</td>\n",
       "      <td>0.0</td>\n",
       "      <td>354.922902</td>\n",
       "      <td>0.259487</td>\n",
       "      <td>0.297165</td>\n",
       "      <td>0.275827</td>\n",
       "      <td>0.250268</td>\n",
       "      <td>1.113577</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.074504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>109.318000</td>\n",
       "      <td>495767.3940</td>\n",
       "      <td>4793526.959</td>\n",
       "      <td>4817.421387</td>\n",
       "      <td>0.0</td>\n",
       "      <td>358.654855</td>\n",
       "      <td>0.475833</td>\n",
       "      <td>0.288679</td>\n",
       "      <td>0.275236</td>\n",
       "      <td>0.256850</td>\n",
       "      <td>1.104084</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.500773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>110.455499</td>\n",
       "      <td>495767.7125</td>\n",
       "      <td>4793528.051</td>\n",
       "      <td>4818.175781</td>\n",
       "      <td>1.0</td>\n",
       "      <td>362.386808</td>\n",
       "      <td>0.366720</td>\n",
       "      <td>0.313331</td>\n",
       "      <td>0.276753</td>\n",
       "      <td>0.262560</td>\n",
       "      <td>1.093923</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.074993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>112.271227</td>\n",
       "      <td>495768.8273</td>\n",
       "      <td>4793529.484</td>\n",
       "      <td>4818.504395</td>\n",
       "      <td>0.0</td>\n",
       "      <td>368.343922</td>\n",
       "      <td>0.189856</td>\n",
       "      <td>0.312791</td>\n",
       "      <td>0.283324</td>\n",
       "      <td>0.270772</td>\n",
       "      <td>1.083088</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.107218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>114.086956</td>\n",
       "      <td>495769.9420</td>\n",
       "      <td>4793530.917</td>\n",
       "      <td>4818.865234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>374.301036</td>\n",
       "      <td>0.198730</td>\n",
       "      <td>0.288784</td>\n",
       "      <td>0.293562</td>\n",
       "      <td>0.278215</td>\n",
       "      <td>1.077550</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.107218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>89 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Dist M            X            Y      Elev Ft  has headcut  \\\n",
       "0     0.000000  495735.7033  4793434.890  4796.653809          1.0   \n",
       "1     1.390590  495736.2607  4793436.164  4797.769043          0.0   \n",
       "2     2.781180  495736.8181  4793437.438  4800.524902          0.0   \n",
       "3     3.943212  495737.2731  4793438.507  4800.295410          0.0   \n",
       "4     5.105245  495737.7281  4793439.576  4800.688965          0.0   \n",
       "..         ...          ...          ...          ...          ...   \n",
       "84  108.180500  495767.0755  4793525.867  4817.093262          0.0   \n",
       "85  109.318000  495767.3940  4793526.959  4817.421387          0.0   \n",
       "86  110.455499  495767.7125  4793528.051  4818.175781          1.0   \n",
       "87  112.271227  495768.8273  4793529.484  4818.504395          0.0   \n",
       "88  114.086956  495769.9420  4793530.917  4818.865234          0.0   \n",
       "\n",
       "       Dist Ft  Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
       "0     0.000000      0.801986      0.638625       0.446510       0.346674   \n",
       "1     4.562303      1.391889      0.578499       0.421067       0.331991   \n",
       "2     9.124606      0.989714      0.515542       0.400043       0.317867   \n",
       "3    12.937048      0.070593      0.477649       0.380341       0.307075   \n",
       "4    16.749490      0.155262      0.423802       0.363897       0.293832   \n",
       "..         ...           ...           ...            ...            ...   \n",
       "84  354.922902      0.259487      0.297165       0.275827       0.250268   \n",
       "85  358.654855      0.475833      0.288679       0.275236       0.256850   \n",
       "86  362.386808      0.366720      0.313331       0.276753       0.262560   \n",
       "87  368.343922      0.189856      0.312791       0.283324       0.270772   \n",
       "88  374.301036      0.198730      0.288784       0.293562       0.278215   \n",
       "\n",
       "    Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  Dev From Avg  \n",
       "0            1.065583            1.119066            1.119066     -0.861613  \n",
       "1            1.069239            1.119066            1.119066     -2.502238  \n",
       "2            1.072693            1.119066            1.119066      0.483113  \n",
       "3            1.075942            1.119066            1.119066     -0.139934  \n",
       "4            1.074800            1.119066            1.119066      0.286336  \n",
       "..                ...                 ...                 ...           ...  \n",
       "84           1.113577            1.119066            1.119066     -0.074504  \n",
       "85           1.104084            1.119066            1.119066     -0.500773  \n",
       "86           1.093923            1.119066            1.119066     -0.074993  \n",
       "87           1.083088            1.119066            1.119066     -0.107218  \n",
       "88           1.077550            1.119066            1.119066     -0.107218  \n",
       "\n",
       "[89 rows x 14 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_df_new.stream_profiles['Riehle_4']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ecc5c02",
   "metadata": {
    "papermill": {
     "duration": 0.018198,
     "end_time": "2024-04-25T03:15:26.680672",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.662474",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Building a Data Visualization Object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11de2ea9",
   "metadata": {
    "papermill": {
     "duration": 0.018129,
     "end_time": "2024-04-25T03:15:26.717173",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.699044",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have a class to create our various stream profile dataframes, let's design another object that can take these dataframes and output some useful plots so we can better visualize the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3a0b4b65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:26.755953Z",
     "iopub.status.busy": "2024-04-25T03:15:26.755068Z",
     "iopub.status.idle": "2024-04-25T03:15:26.766163Z",
     "shell.execute_reply": "2024-04-25T03:15:26.765305Z"
    },
    "papermill": {
     "duration": 0.032422,
     "end_time": "2024-04-25T03:15:26.768075",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.735653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "class Visualize_Profile:\n",
    "    \n",
    "    def plot_stream_profile(self, stream_path_df, title, show_structures=False):\n",
    "        \n",
    "        title = f\"{title} Stream Profile\"\n",
    "        x_data = stream_path_df['X']\n",
    "        y_data = stream_path_df['Y']\n",
    "        \n",
    "        fig, ax = plt.subplots(figsize=(8,6))\n",
    "        ax.plot(x_data, y_data, s=0, c='b', alpha=0.5)\n",
    "        \n",
    "        if show_structures:\n",
    "            headcut_points = stream_path_df.loc[stream_path_df['has headcut'] == 1]\n",
    "            x_data1 = headcut_points['X']\n",
    "            y_data1 = headcut_points['Y']\n",
    "            ax.scatter(x_data1, y_data1, s=30, c='r', alpha=0.5)\n",
    "            \n",
    "        ax.set_xlabel(\"X\")\n",
    "        ax.set_ylabel(\"Y\")\n",
    "        ax.set_title(f\"{title}\")\n",
    "        \n",
    "        plt.show()\n",
    "    \n",
    "    def plot_elev_profile(self, stream_path_df, title, show_structures=False):\n",
    "        \n",
    "        title = f\"{title} Elevation Profile\"\n",
    "        x_data = stream_path_df['Dist Ft']\n",
    "        y_data = stream_path_df['Elev Ft']\n",
    "        \n",
    "        fig, ax=plt.subplots(figsize=(8,6))\n",
    "        ax.plot(x_data, y_data, c ='b', alpha=0.5)\n",
    "        \n",
    "        if show_structures:\n",
    "            headcut_points = stream_path_df.loc[stream_path_df['has headcut'] == 1]\n",
    "            x_data1 = headcut_points['Dist Ft']\n",
    "            y_data1 = headcut_points['Elev Ft']\n",
    "            ax.scatter(x_data1, y_data1, s=30, c='r', alpha=0.5)\n",
    "        ax.set_xlabel(\"Dist Ft\")\n",
    "        ax.set_ylabel(\"Elev Ft\")\n",
    "        ax.set_title(f\"{title}\")\n",
    "        \n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7f959678",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:26.805657Z",
     "iopub.status.busy": "2024-04-25T03:15:26.805387Z",
     "iopub.status.idle": "2024-04-25T03:15:27.069497Z",
     "shell.execute_reply": "2024-04-25T03:15:27.068536Z"
    },
    "papermill": {
     "duration": 0.285223,
     "end_time": "2024-04-25T03:15:27.071529",
     "exception": false,
     "start_time": "2024-04-25T03:15:26.786306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viz = Visualize_Profile()\n",
    "stream_df = stream_df_new.stream_profiles['Riehle_2B']\n",
    "\n",
    "viz.plot_elev_profile(stream_df, 'Riehle_2B', True)\n",
    "# headcut_data = stream_df.loc[stream_df['has headcut'] == 1]\n",
    "# headcut_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e9a99054",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:27.110982Z",
     "iopub.status.busy": "2024-04-25T03:15:27.110674Z",
     "iopub.status.idle": "2024-04-25T03:15:28.485999Z",
     "shell.execute_reply": "2024-04-25T03:15:28.485105Z"
    },
    "papermill": {
     "duration": 1.397202,
     "end_time": "2024-04-25T03:15:28.487890",
     "exception": false,
     "start_time": "2024-04-25T03:15:27.090688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsgAAAIjCAYAAAAeKO03AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABsi0lEQVR4nO3dd3xUVd7H8e+kh1QIIaGEUIKg9CJIRwndgooBRYrLIrio+LCrrrtr2+fZhVXXiqvoSlFRQJEq0gQEBSmBQGgRkA4BKSkQUkju88cxQ8YECJDkpnzer9e8ZubcOzO/exmSL4dzz3FYlmUJAAAAgCTJze4CAAAAgNKEgAwAAADkQUAGAAAA8iAgAwAAAHkQkAEAAIA8CMgAAABAHgRkAAAAIA8CMgAAAJAHARkAAADIg4AMwBbdunVTt27druu1DodDjz/++FX3mzp1qhwOhw4cOHBdn1MWvfTSS3I4HHaXcUUHDhyQw+HQ1KlT7S6lWJ04cUIDBgxQSEiIHA6H3nzzTa1atUoOh0OrVq1y7jd8+HDVqVPHtjoB5EdABlAkcsNo7s3Dw0M1a9bU8OHDdfToUbvLK3KHDx/Wyy+/rLZt26py5cqqWrWqunXrpuXLl1/xdc8884wcDocGDhx4TZ9Xp04dl/Ob99a7d+8bOZRi89lnn+nNN9+0uwwXw4cPdzl3gYGBat68uf79738rIyOjSD/rf/7nf7RkyRI999xz+uSTT0rtnxOA/DzsLgBA+fL3v/9ddevWVXp6un788UdNnTpV33//vbZv3y4fHx/nfkuXLrWxyhs3b948/etf/1L//v01bNgwXbx4UR9//LF69OihyZMn65FHHsn3Gsuy9Pnnn6tOnTpasGCBUlNTFRAQUOjPbNGihf74xz/ma69Ro8YNHUtx+eyzz7R9+3Y99dRTLu2RkZG6cOGCPD09banL29tb//3vfyVJSUlJmj17tv70pz9p48aNmjFjRpF9zooVK3TPPffoT3/6k7Ptpptu0oULF+Tl5VVknwOg6BGQARSpPn36qE2bNpKk3//+96patar+9a9/af78+YqJiXHuV9YDwu23365Dhw6patWqzrbRo0erRYsWeuGFFwoMyKtWrdKRI0e0YsUK9erVS1999ZWGDRtW6M+sWbOmHn744SKp304Oh8PlH0slzcPDw+U8/uEPf1C7du00c+ZMvf766wX+g8OyLKWnp8vX17fQn3Py5EkFBwe7tLm5udl67AAKhyEWAIpV586dJUn79u1zaS9oDHJGRoZefPFFRUVFydvbWxEREXrmmWcu+1/fc+fOVZMmTeTt7a3GjRtr8eLFharpm2++UefOneXn56eAgAD169dPO3bsuKbjaty4sUs4lkzPZN++fXXkyBGlpqbme8306dN1yy236Pbbb1d0dLSmT59+TZ95Iz799FO1bt1avr6+qlKligYNGqTDhw87tz/++OPy9/dXWlpavtc++OCDCg8PV3Z2tiTTe96vXz/VqFFD3t7eql+/vv73f//XuV0yf75ff/21Dh486BzOkDvO9nJjkFesWOH8cwkODtY999yjXbt2ueyTO8Z67969Gj58uIKDgxUUFKRHHnmkwNoLw83NzfldzB2vXqdOHd15551asmSJ2rRpI19fX02aNEmS9PPPP+uBBx5QlSpVVKlSJd122236+uuvne+XO9zIsiy9++67zuOXVOAY5ILk5OTozTffVOPGjeXj46OwsDCNGjVKZ8+eva5jBHBtCMgAilVu4KhcufIV98vJydHdd9+t1157TXfddZfeeecd9e/fX2+88UaB43W///57/eEPf9CgQYP0yiuvKD09Xffff79Onz59xc/55JNP1K9fP/n7++tf//qXnn/+ee3cuVOdOnUqkov5EhMTValSJVWqVMmlPSMjQ7Nnz9aDDz4oyYTOFStWKDExsdDvnZWVpVOnTuW7Xbhw4Yqv+8c//qGhQ4eqQYMGev311/XUU0/p22+/VZcuXZSUlCRJGjhwoM6fP+8S9CQpLS1NCxYs0IABA+Tu7i7JBEB/f3+NGzdOb731llq3bq0XXnhBf/7zn52v++tf/6oWLVqoatWq+uSTT/TJJ59ccTzy8uXL1atXL508eVIvvfSSxo0bp7Vr16pjx44F/rnExMQoNTVV48ePV0xMjKZOnaqXX365cCeyALn/gAsJCXG2JSQk6MEHH1SPHj301ltvqUWLFjpx4oQ6dOigJUuW6A9/+IP+8Y9/KD09XXfffbfmzJkjSerSpYs++eQTSVKPHj2cx38tRo0apaefflodO3bUW2+9pUceeUTTp09Xr169lJWVdd3HCaCQLAAoAlOmTLEkWcuXL7d++eUX6/Dhw9aXX35phYaGWt7e3tbhw4dd9u/atavVtWtX5/NPPvnEcnNzs9asWeOy3/vvv29Jsn744QdnmyTLy8vL2rt3r7Nt69atliTrnXfeyVfT/v37LcuyrNTUVCs4ONgaOXKky2ckJiZaQUFB+dqv1Z49eywfHx9ryJAh+bZ9+eWXliRrz549lmVZVkpKiuXj42O98cYbhXrvyMhIS1KBt/Hjxzv3e/HFF628P9oPHDhgubu7W//4xz9c3i8+Pt7y8PBwtufk5Fg1a9a07r//fpf9Zs2aZUmyVq9e7WxLS0vLV9+oUaOsSpUqWenp6c62fv36WZGRkfn23b9/vyXJmjJlirOtRYsWVrVq1azTp08727Zu3Wq5ublZQ4cOzXd8v/vd71ze895777VCQkLyfdZvDRs2zPLz87N++eUX65dffrH27t1r/fOf/7QcDofVrFkz536553vx4sUur3/qqacsSS7f09TUVKtu3bpWnTp1rOzsbGe7JGvMmDEur1+5cqUlyVq5cqVLTXnP05o1ayxJ1vTp011eu3jx4gLbARQ9epABFKno6GiFhoYqIiJCAwYMkJ+fn+bPn69atWpd8XVffPGFbr75ZjVq1Mild/SOO+6QJK1cuTLf59SvX9/5vFmzZgoMDNTPP/982c9YtmyZkpKS9OCDD7p8hru7u9q1a5fvM65FWlqaHnjgAfn6+mrChAn5tk+fPl1t2rRRVFSUJDmHdlzLMIt27dpp2bJl+W65vdIF+eqrr5STk6OYmBiXYw4PD1eDBg2cx+xwOPTAAw9o0aJFOnfunPP1M2fOVM2aNdWpUydnW95xuKmpqTp16pQ6d+6stLQ07d69u9DHk+v48eOKi4vT8OHDVaVKFWd7s2bN1KNHDy1atCjfa0aPHu3yvHPnzjp9+rRSUlKu+nnnz59XaGioQkNDFRUVpb/85S9q3769swc4V926ddWrVy+XtkWLFqlt27Yu58Pf31+PPvqoDhw4oJ07dxbqmK/kiy++UFBQkHr06OHyZ9a6dWv5+/vf0PcUQOFwkR6AIvXuu+/qpptuUnJysiZPnqzVq1fL29v7qq/bs2ePdu3apdDQ0AK3nzx50uV57dq18+1TuXLlK47R3LNnjyQ5Q/dvBQYGXrXOgmRnZ2vQoEHauXOnvvnmm3wXeSUlJWnRokV6/PHHtXfvXmd7x44dNXv2bP3000+66aabrvo5VatWVXR09DXVtmfPHlmWpQYNGhS4Pe9MEgMHDtSbb76p+fPn66GHHtK5c+e0aNEijRo1ymVu5R07duhvf/ubVqxYkS+QJicnX1N9knTw4EFJUsOGDfNtu/nmm7VkyRKdP39efn5+zvbf/vnnDuE5e/bsVf8cfXx8tGDBAklm3HjdunUL/Adc3bp1C6y1Xbt2BdaZu71JkyZX/Pyr2bNnj5KTk1WtWrUCt//27wKAokdABlCk2rZt65zFon///urUqZMeeughJSQkyN/f/7Kvy8nJUdOmTfX6668XuD0iIsLlee542N+yLOuKnyGZccjh4eH5tnt4XN+PxJEjR2rhwoWaPn16geH7iy++UEZGhv7973/r3//+d77t06dPv6Hxs1eSk5Mjh8Ohb775psBzlvfP5LbbblOdOnU0a9YsPfTQQ1qwYIEuXLjgMgY8KSlJXbt2VWBgoP7+97+rfv368vHx0ebNm/Xss886z3Fxu54//7yvLcw/NK5lxoqilJOTo2rVql32fxcu949IAEWHgAyg2Li7u2v8+PG6/fbbNXHiRJeLuH6rfv362rp1q7p3715sK8HlDsmoVq3aNffEXs7TTz+tKVOm6M0337zsUIfp06erSZMmevHFF/NtmzRpkj777LNiC8j169eXZVmqW7duoXqpY2Ji9NZbbyklJUUzZ85UnTp1dNtttzm3r1q1SqdPn9ZXX32lLl26ONv379+f770K++cYGRkpyVwU91u7d+9W1apVXXqP7RQZGXnZOnO336j69etr+fLl6tixo20hHajoGIMMoFh169ZNbdu21Ztvvqn09PTL7hcTE6OjR4/qww8/zLftwoULOn/+/A3X0qtXLwUGBuqf//xngTMB/PLLL9f0fq+++qpee+01/eUvf9HYsWML3Ofw4cNavXq1YmJiNGDAgHy3Rx55RHv37tX69euv65iu5r777pO7u7tefvnlfL2rlmXlm/Vj4MCBysjI0LRp07R48WKXuaulSz23ed8rMzNT//nPf/J9tp+fX6GGXFSvXl0tWrTQtGnTnLNqSNL27du1dOlS9e3b96rvUVL69u2rDRs2aN26dc628+fP64MPPlCdOnV0yy233PBnxMTEKDs7W//7v/+bb9vFixddzhGA4kEPMoBi9/TTT+uBBx7Q1KlT811clWvIkCGaNWuWRo8erZUrV6pjx47Kzs7W7t27NWvWLOd8tDciMDBQ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tW/fXn/961+VlZUlT09PSdKyZcvUsGHDfBcFliYtWkgXLkhLl0rr10v790tDhpjwDAAAgOJjW0AOCAhQkyZNXNr8/PwUEhKiJk2aKCsrS1FRURo1apRee+01hYSEaO7cuVq2bJkWLlwoSapdu7bL6/39/SVJ9evXV61atSRJDz30kF5++WWNGDFCzz77rLZv36633npLb7zxRgkc5fVzOKQOHaQqVaSFC6WTJ6VFi6SBA+2uDAAAoHyzfRaLy/H09NSiRYsUGhqqu+66S82aNdPHH3+sadOmqW/fvoV+n6CgIC1dulT79+9X69at9cc//lEvvPCCHn300WKsvug0amR6jt3cpF27zA0AAADFx2FZlmV3EWVBSkqKgoKClJycrMDAwBL//BUrzOwWfn7SY49Jv3aWAwAA4FdFlddKbQ8yXHXpIoWFSefPS3PnmrmSAQAAUPQIyGWEh4c0YIC537tX+vFHuysCAAAonwjIZUhoqNS7t3m8YoX060QfAAAAKEIE5DKmdWupenUpK8ssRw0AAICiRUAuYxwO6bbbzOMNG6TsbHvrAQAAKG8IyGVQ48ZmFouUFGnnTrurAQAAKF8IyGWQh4d0663m8caN9tYCAABQ3hCQy6iWLc39oUOmJxkAAABFg4BcRgUGShER5jGr6wEAABQdAnIZ1rixud+xw946AAAAyhMCchl2yy3m/vBhKTXV3loAAADKCwJyGZY7zMKyGGYBAABQVAjIZVy9eub+xAl76wAAACgvCMhlXOXK5v7sWXvrAAAAKC8IyGVccLC5T0qyswoAAIDyg4BcxuX2ICcnSzk59tYCAABQHhCQy7iAAMndXcrOZiYLAACAokBALuPc3KSgIPOYccgAAAA3zsPuAnDjKleWzpyRZs+W0tLM1G/9+18anwwAAIDCowe5HAgJMfepqWaoxYED0pw50vffSykptpYGAABQ5tCDXA506GDGIYeGSp6epif54EFzO35ceuABuysEAAAoO+hBLgeCg6VevaRWraSmTaWoqEvbduyQLlywrTQAAIAyh4BcDvXpI7VoITkc5vnWrbaWAwAAUKYQkMuhkBBzkV7fvub54sVmPHJGhq1lAQAAlAkE5HKsdWupVi3zePly6eOPpawse2sCAAAo7QjI5ZibmzRggNS8uRlucfSo9OWXjEkGAAC4EgJyORccLN17rzR8uJnpIiFBevttae9euysDAAAonQjIFURkpDR0qFStmulBnjVLOnnS7qoAAABKHwJyBRIZKY0aJdWpI2VmSp9/bu4BAABwCQG5gnF3l2JipKAg6exZadWqS9ssS9qyRVqyRNq9u2g/99w5VvUDAABlAyvpVUCVKkn9+kmffSb9+KPUpIlUtapZnnrXLrPPunVm4ZGWLc1MGLlzKl9OdrYJ33nFx0s7d0rp6Wb5a8sy79e3r1nxDwAAoDRyWJZl2V1EWZCSkqKgoCAlJycrMDDQ7nKKxKxZJsBKUkCAlJpqQm6tWmaZ6lyNGpleZ7cC/r8hPV2aN0/as8eE7pYtTfvhw9KUKVJOTv7X1KplxkN7eRX9MQEAgIqrqPIaPcgV2F13mWEWx4+bcOzvLw0cKEVESPv2SXFxpkd5927p008lHx/p9GnTE9ykiQnMW7aYNskE5VOnzCp+X31lwnGDBiZgR0aaYRYzZ0pHjkjLlpme5Kv1TAMAAJQ0epALqTz2IEtmRot168yY5EaNJD8/1+07d5qe5isJDJTq1s2/pHVwsDR6tAnWufbtkz75xDwOD5e6dTOfCwAAcKOKKq8RkAupvAbkwjh40AyZ8PAwy1ifP2+Cs7e3FBZmhlVUqiT99JPpGT51SqpSxQyjCA7O/35r10orV5pV/RwOaeRIqUaNEj8sAABQzhCQS1hFDsjXIidH2r9fqlnTtef4ty5cMBcF/vSTGa4xYEDJ1QgAAMqnosprTPOGIuXmJtWvf+VwLEm+vtIdd5jHO3Zcmj0DAADAbgRk2CY8XGra1Fz0N3OmtHGj3RUBAAAQkGGze++V2rY1j7/+2lwwyKAfAABgJwIybOXmJvXpI3XqZJ4vWWJ6k8+ft7cuAABQcRGQYTuHQ+reXerZ0yxUsnu39NFHUlqa3ZUBAICKiICMUsHhkDp0MFO+BQdLZ86YpbBPnLC7MgAAUNEQkFGqhIdLDz1k5lg+ckR67z2zit/ixWZqOAAAgOJGQEapU62a9OijZn5kSdq7V/rxR3MRHxfwAQCA4kZARqkUEmIWD3nsMalNG9O2fbu0ejUhGQAAFC8CMkq1sDDpzjul3r3N85Urpf/+Vzp61N66AABA+UVARpnQrp2ZDs7b24Tjjz6SvvvOLG0NAABQlAjIKBMcDhOSn3jCrL6Xk2N6kydPlg4ftrs6AABQnhCQUab4+0v33y/dd9+lmS4++kj65hvGJgMAgKLhYXcBwPVo1kyqU0datUraskVav96svte/v+TBtxoAANwAepBRZgUGSnffbXqU3d3NLBdffsm4ZAAAcGMIyCjzmjQxi4t4eJhlqpkvGQAA3AgCMsqF+vVNT7LDIcXGSsuWEZIBAMD1ISCj3Lj5ZqlfP/N47Vpp9mwpK8vemgAAQNlDQEa50qaNdO+9kpubGZM8aZJ07JjdVQEAgLKEgIxyp3lzaehQKSBAOnXKrLy3dKmUnCxlZtpdHQAAKO0clsVIzcJISUlRUFCQkpOTFRgYaHc5KIS0NHPB3o4dl9o8PKQhQ6TISPvqAgAAxaOo8ho9yCi3KlWSHnhAGjxYCgszbRcvSl99JV24YG9tAACg9GJJBZR7DRqYW2am9P770pkz0jvvSOHhUnCwmSauXj27qwQAAKUFPcioMLy8pJgYqUoVM/zi55+lzZuljz82s14cP87UcAAAgDHIhcYY5PIjJ0fat8+E5D17zGwXuW69Verb18ynDAAAypaiymsMsUCF4+ZmhlxIUrNmUmiotHOndPKktHGjlJ4uRUdLQUH21gkAAOxBD3Ih0YNc/q1fLy1efGmYRZ06Zk5lgjIAAGUDs1gARaxdO2nkyEtTwB04IE2cKH3+uXTunK2lAQCAEkRABvKoUUN65BHpySel6tXNUtUJCWY+ZQAAUDEQkIECVKkiPfqoNHy4GbO8a5frgiMAAKD8IiADl+FwmHHI7dqZ5198YYZbxMaamTAAAED5xCwWwFV07y5lZ0sbNpjhFgkJJiRXr25mwWDZagAAyhdmsSgkZrHA8ePSTz+ZRUUyMkybm5vUtavUoYPk6WlvfQAAVHTMgwyUsOrVza1FCzNv8pEjZlzyypXS7t3SsGGSj4/dVQIAgBvFGGTgGgUFSe3bSwMGSPffL/n5md7lGTOkixftrg4AANwoAjJwnRwOqWlT6eGHJW9vM2/y1KlmNT4u4gMAoOwiIAM3qHp1adAgyd3dDLv4+msz4wW9yQAAlE0EZKAI1K0r/eEPZsYLd3czb/Jnn0mZmXZXBgAArhUBGSgiISFS587S4MGSl5f088/Sxx9LSUl2VwYAAK4FARkoYvXqSUOHSr6+ZsjFxInS8uVSerrdlQEAgMIgIAPFoFYtacQIsxLfxYvS999Lb79tFhhh5nEAAEo3AjJQTKpWNXMjP/igeZyWJi1YIC1ZQkgGAKA0Y6EQoBg5HFLDhlJUlLRunRlq8eOPZrjF3XeblfgAAEDpUmp+PU+YMEEOh0NPPfWUsy0xMVFDhgxReHi4/Pz81KpVK82ePdvldXfffbdq164tHx8fVa9eXUOGDNGxY8dc9tm2bZs6d+4sHx8fRURE6JVXXimJQwKc3N2lTp2ke+81oTguTpo9m55kAABKo1IRkDdu3KhJkyapWbNmLu1Dhw5VQkKC5s+fr/j4eN13332KiYnRli1bnPvcfvvtmjVrlhISEjR79mzt27dPAwYMcG5PSUlRz549FRkZqdjYWL366qt66aWX9MEHH5TY8QG5mjeXBg40gXnHDmnFCjM2+euvmTcZAIDSwmFZ9vZhnTt3Tq1atdJ//vMf/d///Z9atGihN998U5Lk7++v9957T0OGDHHuHxISon/961/6/e9/X+D7zZ8/X/3791dGRoY8PT313nvv6a9//asSExPl5eUlSfrzn/+suXPnavfu3ZetKyMjQxkZGc7nKSkpioiIUHJysgIDA4vgyFGRLVsm/fCDa1toqFS7trk1bix5MAAKAIBrkpKSoqCgoBvOa7b3II8ZM0b9+vVTdHR0vm0dOnTQzJkzdebMGeXk5GjGjBlKT09Xt27dCnyvM2fOaPr06erQoYM8PT0lSevWrVOXLl2c4ViSevXqpYSEBJ09e/aydY0fP15BQUHOW0RExI0dKJBH585SpUrmcUSE5OMj/fKLmeVizhzpjTekuXNNz/LJk7aWCgBAhWNrH9WMGTO0efNmbdy4scDts2bN0sCBAxUSEiIPDw9VqlRJc+bMUVRUlMt+zz77rCZOnKi0tDTddtttWrhwoXNbYmKi6tat67J/WFiYc1vlypUL/OznnntO48aNcz7P7UEGioKPj5kr+cABqU0b6cIFs7DIL79I8fFScrIZpyxJ27dLjzwiVatmZ8UAAFQctvUgHz58WGPHjtX06dPl4+NT4D7PP/+8kpKStHz5cm3atEnjxo1TTEyM4uPjXfZ7+umntWXLFi1dulTu7u4aOnSobnTkiLe3twIDA11uQFEKD5duu80MpQgIMOOTo6OlJ5+UYmLM4xo1THj++GPp2DHp0CFp/XopO9u8R2qqdO6cvccBAEB5Y9sY5Llz5+ree++Vu7u7sy07O1sOh0Nubm5KSEhQVFSUtm/frsaNGzv3iY6OVlRUlN5///0C3/fIkSOKiIjQ2rVr1b59ew0dOlQpKSmaO3euc5+VK1fqjjvu0JkzZy7bg/xbRTWmBbgWFy5IU6dKJ06Y2S9yckx7165Su3bSO++YqeRGj5b4WgIAKroyPwa5e/fuio+PV1xcnPPWpk0bDR48WHFxcUpLSzMF/maiWHd3d+XkpoQC5G7LvcCuffv2Wr16tbKyspz7LFu2TA0bNix0OAbs4usrDR9u5lLO+7Vft05atcoE6LQ0aeFCpowDAKCo2DYGOSAgQE2aNHFp8/PzU0hIiJo0aaKsrCxFRUVp1KhReu211xQSEqK5c+dq2bJlzjHG69ev18aNG9WpUydVrlxZ+/bt0/PPP6/69eurffv2kqSHHnpIL7/8skaMGKFnn31W27dv11tvvaU33nijxI8ZuB6+vtKgQdKePVLlymb+5MREacOGS/v89JO0bZsZpgEAAG6M7bNYXI6np6cWLVqk0NBQ3XXXXWrWrJk+/vhjTZs2TX379pUkVapUSV999ZW6d++uhg0basSIEWrWrJm+++47eXt7S5KCgoK0dOlS7d+/X61bt9Yf//hHvfDCC3r00UftPDzgmjgc0k03mang+vUzoVmSqlSRbr/dPP7mGzMmGQAA3Bjb50EuKxiDjNIkI0NKSJBq1ZKCgqT//lc6flyqWtVc4MeMFwCAiqjMj0EGcP28vaVmzUwPsru7NGCACcqnTknvv28WIeGfvgAAXB8CMlAOhIRIv/+91KiRuZhv2TJpxgxp/37z/NtvpXnzLk0PBwAALo/FbIFyIiDAXMy3fr20ZIkZgpGQ4LpPvXpS06b21AcAQFlBDzJQzrRrJz32mNSihRl+kdf69baUBABAmUJABsqh0FCpf39p2DDpllvMGGV3d+nIEWnOHOnkSbsrBACg9GKIBVCO1a5tbpIZjxwbK23dauZNHjbMLHcNAABc0YMMVBB9+0qDB5up4S5ckD75RDp/3u6qAAAofQjIQAXh7i41aCA9/LCZJ/n8eWn5crurAgCg9CEgAxWMj490113m8ZYtpid5xw57awIAoDQhIAMVUESE1KqVebxvn/Tll9KBA7aWBABAqUFABiqovn3NstQ332xW3ZsxQ5o/Xzpzxu7KAACwF7NYABWUh4eZAi4qSkpKko4flzZvNsMuIiJMcG7WTPLzs7tSAABKlsOyLMvuIsqClJQUBQUFKTk5WYGBgXaXAxSp7Gzp4EFp3Tppz55L7e7uUs2a5uK+Tp0kh8O+GgEAuJqiymv0IAOQu7tZhrpePSk5Wdq928yXfOyYdOiQuUVGXppTGQCA8oyADMBFUJBZrrpdO+nUKWnxYmnvXikhgYAMAKgYCMgALqtqValF4yztXX5UCbEJ6rFwkRQWJnXsKLVvL3l52V0iAABFjoAM4PIyMxX13WS5baysUw53nQ52KORkvLmSb/t2aeRIQjIAoNxhmjcAl7dunXx++FZ1amdLVavqJ68mUsOGZqzFqlXmqj4AAMoZAjKAy/vhB8nDQw1rnpckJZyuatoDAsw8cT/8YGNxAAAUDwIygMs7cULy91eDELN6yKHkIGXn/DrXm7+/2Q4AQDlDQAZweWFh0rlzquxzQd7uF5VjOXQqrZLZdu6c2Q4AQDlDQAZweR07ShcvynEuVWH+ZpjFyfN+UmqqdPGi2Q4AQDlDQAZwee3bS926SYcOqdrZBCklRSd2n5UOHVJmpzv06f6OWr7c7iIBAChaTPMG4PK8vMxUbk2aKGzmz1Ksp75366KcdncprOPN2rvQQ/sOSrfdZoYkAwBQHhCQAVyZl5fUtavC6naVJpumteekwNXmsWWZVfZat7avRAAAihJDLAAUSrVqkrv7pecpKZceL1ggHT9e8jUBAFAcCMgACsXHRxo0SGrc+FJbpUqXHk+aJO3aVfJ1AQBQ1AjIAAqtQQOpb1/J8etUyLfeKnXvbtYNkaS5c6WkJLuqAwCgaBCQAVwTPz/pppvM0OTmzaXOnaWnnpIiIqSMDOnrr824ZAAAyioCMoBrFhMjjRsnValinru7S/fcY+737JF27rS3PgAAbgSzWAC4Zu7urhfsSVLVqlKnTtJ330kLF5rnuQvtpadLn35qFt+LjJSioy8NywAAoLShBxlAkencWapZU7pwQfr4Y7PgniR984105IgZn7x1qwnL6em2lgoAwGURkAEUGQ8PacgQ03N8/rw0a5b0+ecmFDsc0p13mgVFTpyQ5s+3u1oAAApGQAZQpHx8pPvvN0MwDh82i4hIUteuUps20uDBJizv3MncyQCA0okxyACKXLVq5qK9HTvM7Bb16kk1apht1atLTZpI8fHSqlXSgw/aWioAAPkQkAEUi2bNzK0gXbtK27eb3uXTp6WQkJKtDQCAK2GIBYASV7WqFBVlHm/dam8tAAD8FgEZgC1atDD38fEsLAIAKF0IyABs0aCBmfXi7Fnp1CkTkr/9VoqNtbsyAEBFxxhkALbw8pLq1JH27pV++sksU71mjdkWFSUFBdlaHgCgAqMHGYBtbrrJ3P/0k3Ts2KX2TZvsqQcAAImADMBGDRqY+8OHpZ9/vtQeGyvl5NhTEwAABGQAtqlcWQoNNWF49+5L7WlpZllqAADsQEAGYKvcYRa5fH3N/enTJV8LAAASARmAzfIG5OBgc+GedCkgJyVJU6dKmzeXbF0AgIqLWSwA2Kp2balnTykz06y8lxuEz5wx94sXSwcOSIcOmRX3IiNtKxUAUEHQgwzAVg6H1KGD1K2bVKXKpWWnT5+W9u+/NDY5J0f68kspNdW2UgEAFQQBGUCpkjcgb9hgHrdoYS7mS02VPv1USk+3rTwAQAVAQAZQqlSpYu6Tk6UjR8zj5s2lhx6S/P2lEyekGTOkixftqxEAUL4RkAGUKn5+ko+PWXo6dzhFtWpmSriHH5a8vc2Y5OnTpcREW0sFAJRTBGQApYrDIbVufem5h4cJzZIUHi4NGmTa9u+XJk2S5s0z8yYDAFBUCMgASp2uXS899vJy3Va3rjR6tNSkiell3rJFmjxZSkkp2RoBAOUXARlAqePlJT3yiBQUJPXokX971arSgAHSiBFmn1OnTEjet6/kawUAlD8Oy7Isu4soC1JSUhQUFKTk5GQFBgbaXQ6AXyUlSdOmSWfPmue1a0vt20s332xrWQAAGxRVXqMHGUCZFhwsjRol3Xab5OZmFhSZOVNav97MeAEAwLWiB7mQ6EEGSr+UFGnVKtdlqW+9VerdW3J3t60sAEAJoQcZAH4jMFC6805zIV+ujRulpUvtqwkAUPZ42F0AABQlNzdpyBCzkMiePdIXX5jhFjVqmAVHAAC4GnqQAZQ7bm5mJozGjaWOHU3b3LlmSrjz5830cAAAXA49yADKtehoKSND2rTJLCoimZ7k/v3NoiQAAPwWPcgAyjWHQ+rXz8xykWvrVnOTpOxse+oCAJRe9CADKPccDqlXL7OE9dat0vffSwsWmCnhtm41s1zceqvdVQIASgt6kAFUCA6HFBoq3XGHWUQkO9tMB5edLa1bZ3d1AIDShIAMoEJxc5Puu0+KjLzUduaMuQEAIBGQAVRAnp7S8OHSs89K9eqZtt27bS0JAFCKMAYZQIXkcEi+vlKjRtLPP0u7dklRUdLy5dLx41J4uNSkiZkqzoOflABQobDUdCGx1DRQPiUnS2+8cfnt4eHS739PSAaAsoClpgGgCAQFSc2aXXoeFSUNHWou5vP1lRITzUV8dCUAQMVBD3Ih0YMMVDzbtklffSW5u5seZHd3qWlTqWdP8xgAULrQgwwAxaxpU6lOHTMVXEaGlJYmrV9vVuSjawEAyi9G1QHAZTgc0qBB0sGDUuXK5uK9efNMz7Knp1l8xMvL7ioBAEWNgAwAV+DjIzVsaB5Xq2ZC81dfSbGxUkKC1KePmekiI8PcGIEFAGUfARkArkGzZiY0L15sFhf54gtp9Wrp1CkpJ0eKiTEr9QEAyi4u0iskLtIDkNfFi9KaNeaWk+O67aabpC5dpFq17KkNACqqospr9CADwHXw8JBuv90Mrzh2TKpZU1qwQDp0SPrpJ7P4yP3305sMAGURPciFRA8ygKu5eFHas0fassWEZIdD6t5datlS8vOzuzoAKP+KKq8RkAuJgAygsHJypEWLpE2bLrXdfLOZ9cLhMIuTAACKHkMsAKCUcnOT+vWTQkOlDRuk06elXbvMzeGQ+veXmje3u0oAwOWUmoVCJkyYIIfDoaeeesrZlpiYqCFDhig8PFx+fn5q1aqVZs+e7dx+4MABjRgxQnXr1pWvr6/q16+vF198UZmZmS7vvW3bNnXu3Fk+Pj6KiIjQK6+8UlKHBaCCcjikdu2kJ56QRo2SQkJMu2VJ8+dLR47YWx8A4PJKRQ/yxo0bNWnSJDVr1sylfejQoUpKStL8+fNVtWpVffbZZ4qJidGmTZvUsmVL7d69Wzk5OZo0aZKioqK0fft2jRw5UufPn9drr70myXS19+zZU9HR0Xr//fcVHx+v3/3udwoODtajjz5qx+ECqGCqV5cef9ysxLdwoelJnj1bGj1a8va2uzoAwG/Z3oN87tw5DR48WB9++KEqV67ssm3t2rV64okn1LZtW9WrV09/+9vfFBwcrNjYWElS7969NWXKFPXs2VP16tXT3XffrT/96U/66quvnO8xffp0ZWZmavLkyWrcuLEGDRqkJ598Uq+//nqJHieAis3hMBfq3XOPFBwsnT0rffaZdPiw3ZUBAH7L9oA8ZswY9evXT9HR0fm2dejQQTNnztSZM2eUk5OjGTNmKD09Xd26dbvs+yUnJ6tKlSrO5+vWrVOXLl3klWc92F69eikhIUFnz5697PtkZGQoJSXF5QYAN8rHR7r3Xsnd3Sxh/dFH0tatdlcFAMjL1oA8Y8YMbd68WePHjy9w+6xZs5SVlaWQkBB5e3tr1KhRmjNnjqKiogrcf+/evXrnnXc0atQoZ1tiYqLCwsJc9st9npiYeNnaxo8fr6CgIOctIiLiWg8PAAoUGSmNGSPdcot5vm6dvfUAAFzZFpAPHz6ssWPHavr06fLx8Slwn+eff15JSUlavny5Nm3apHHjxikmJkbx8fH59j169Kh69+6tBx54QCNHjrzh+p577jklJyc7b4f5f1AARahKFemuu8yMF4mJ0i+/2F0RACCXbRfpxcbG6uTJk2rVqpWzLTs7W6tXr9bEiROVkJCgiRMnavv27WrcuLEkqXnz5lqzZo3effddvf/++87XHTt2TLfffrs6dOigDz74wOVzwsPDdeLECZe23Ofh4eGXrc/b21veXD0DoBj5+kpRUWZRke3bzcp8AAD72daD3L17d8XHxysuLs55a9OmjQYPHqy4uDilpaWZAt1cS3R3d1dOTo7z+dGjR9WtWze1bt1aU6ZMybd/+/bttXr1amVlZTnbli1bpoYNG+a7KBAASlqTJuZ++3YzBRwAwH629SAHBASoSe5vhl/5+fkpJCRETZo0UVZWlqKiojRq1Ci99tprCgkJ0dy5c7Vs2TItXLhQ0qVwHBkZqddee02/5Pk/ytze4Yceekgvv/yyRowYoWeffVbbt2/XW2+9pTfeeKPkDhYALqNhQ8nDwywmkphopoQDANirVMyDXBBPT08tWrRIf/7zn3XXXXfp3LlzioqK0rRp09S3b19Jpid479692rt3r2rVquXy+twVtIOCgrR06VKNGTNGrVu3VtWqVfXCCy8wBzKAUsHbW7rpJmnnTtOLTEAGAPs5LIv/1CuMolrbGwB+a9cuaeZMKShIeuopM2dyXr/8Ih07JtWsKVWtakuJAFAmFFVeK7U9yABQUURFmZ7k5GRp82YpM1Nq00a6cEH6+mspIeHSvm3aSJ06SXv2SGFhUu3a9tUNAOUVARkAbObpKTVqZBYMWbDAtJ04IZ05Ix06ZHqUq1eXjh+XNm0yN8mE6nHjWK4aAIqa7SvpAQAuzWaRKy7OhGNPT2n0aOnRR6WHHpJCQy/tk5Fh9gMAFK1rDsj16tXT6dOn87UnJSWpXr16RVIUAFQ0eX98euT5v73Onc1QCklq0MCswPeXv0h9+pi2DRukixdLrk4AqAiuOSAfOHBA2dnZ+dozMjJ09OjRIikKACoad3ezsl6dOtITT0itWplhFx065N/Xy0tq0UKqVMlMD7dkSUlXCwDlW6HHIM+fP9/5eMmSJQoKCnI+z87O1rfffqs6deoUaXEAUJG0bm1uknT33Vfe19tbuvdeafp0aeNGs3R1+/bFXyMAVASFnuYtd4U6h8Oh377E09NTderU0b///W/deeedRV9lKcA0bwBKo++/l5YvN49r1TJzKt/aPFOnl8bKY/MGhaf9bMZodOxoErSXl70FA0AxKvFp3nKXd65bt642btyoqkzGCQC269jRXKy3Zo105Ih05GC2vntli7J/Piw39xp6tNkhhZ+Ml7ZsMSuRjBxJSAaAq7jmMcj79+8nHANAKeFwSN27S2PHSvfcI4Wd36fsnw9KQUHKCQnV/JRuyrmpkZkwedUqad06u0sGgFKv0AG5du3aLrNXTJw4USkpKcVSFADg2lSuLLVsKY0O+VKPNVyhP3TaJh+PizqWGqAtx8M158it2nW+ttJWrldcnHTunN0VA0DpVeghFkeOHHGZveIvf/mL+vbty3hcAChFHCdPKKxqtuR3Xi3Dj2vdkQgt2RelzGx3bU3pKu+lDmXIzIBx553SLbfYXTEAlD7XvVBIIa/tAwCUpLAwZ/dwrUDzv3yZ2e5mW2amMnyD5eUlpaVJs2ZJc+ZI6el2FQsApRMr6QFAedKxo1k5JDXVGZAlSRkZujV4jwYO89Ezz5gFSBwOs7z1++9LJ0/aVzIAlDaFHmIhSf/973/l7+8vSbp48aKmTp2a74K9J598suiqAwBcm/btzWwVq1Yp0P2Y/C9E6dx5h7wdGerzaKDcBjWXPMyFfQ0amB7ks2elTz+VRoyQ8kxxDwAVVqHnQa5Tp44cDseV38zh0M8//1wkhZU2zIMMoMzIzDSzVfzwg2asqaHdmfV1U4eqeuj5+vmmeLtwQZo8WfrlFykgwHRA33qrWdkPAMqaosprhQ7IFR0BGUBZlJAgzZ4t3X+/1LBhwfskJ0tTp5qeZEkKD5f69jUzwwFAWUJALmEEZADlWVaWtG2b9O235gI+yQzBuOce6deRdQBQ6hVVXuMiPQCAPD2l1q2lxx6TWrUyQyz27JHee086etTu6gCgZBGQAQBOAQHS3XdLo0ebGePOn5dmzJBSU+2uDABKDgEZAJBPaKiZ1aJaNROOZ80ys8cBQEVAQAYAFMjLSxo0SPLxkQ4fll55RVqxwu6qAKD4XXNAjo6O1tSpU5WSknL1nQEAZVqVKlJMjOTnZ2aPW71aOnDAbEtNlRYtkuLipIMHpb17pZwcO6sFgKJxzbNYjB07VrNmzVJycrL69eunhx9+WH379pWnp2dx1VgqMIsFgIosJ0f6+mspNtZMA9etm7RsmXT6tOt+YWFSnz5SnTp2VAmgorN1mrecnBwtX75cn332mebMmSN3d3cNGDBAgwcPVteuXa+7mNKMgAygojt/Xnr7bSkj41JbYKBZstqyTA9zerppr1tXuv12qWZNFh0BUHJKzTzI6enpWrBggf7xj38oPj5e2dnZN/J2pRYBGQDMUIoffpCSkqRataSuXS8tT52WJq1aZXqZ8/4qqFdPio6WatSwo2IAFUmpCMiJiYmaMWOGPv30U23evFlt27bVjz/+eN3FlGYEZAAonORkM1Y5Ls41KN92m9S7t21lAagAiiqveVzPB8+ePVufffaZVq1apXr16mnw4MGaOXOm6tevf92FAADKh6Ag6a67zFjkpCRpzRqzSt+PP0rVq0tNm0puzKEEoBS75h5kX19fVa5cWQMHDtTgwYPVpk2b4qqtVKEHGQCu39Kl0tq15nHlytLDD0shIfbWBKD8sa0Hef78+erevbvc+Oc/AKCQunWT9u+Xjh+Xzp6V3n/fTB3XqpXUsqVZwQ8ASovrGoN88eJFrVq1Svv27dNDDz2kgIAAHTt2TIGBgfL39y+OOm1HDzIA3Lhz56Rp06RffnFtv/12c8EfANwI23qQDx48qN69e+vQoUPKyMhQjx49FBAQoH/961/KyMjQ+++/f93FAADKN39/6bHHpFOnpMREaf166ehRaeVKsyhJkyZm2jgAsNM1j5MYO3as2rRpo7Nnz8rX19fZfu+99+rbb78t0uIAAOWPm5tUrZrUrJk0cqTUrp1pnz1b+vxzsyLfli3Snj1mfmUAKGnX3IO8Zs0arV27Vl5eXi7tderU0dGjR4usMABAxdCzp1lMZP166aefzC3XTTeZAB0ZKXlc828sALg+1/zjJicnp8DFQI4cOaIArrIAAFwjd3cTkps1kxYsMOOUQ0OlAwcuBWZ/f7PYSIsWdlcLoCK45ov0Bg4cqKCgIH3wwQcKCAjQtm3bFBoaqnvuuUe1a9fWlClTiqtWW3GRHgCUrMREad066eefpdRUMza5YUPp0CHTq9y5M/MpA3Bl20p6R44cUa9evWRZlvbs2aM2bdpoz549qlq1qlavXq1q1apddzGlGQEZAOyRnS3NmGHGJOfVsaPUo4c9NQEonWybxaJWrVraunWrZsyYoW3btuncuXMaMWKEBg8e7HLRHgAARcHd3UwB99uAvHatFBUl1a1rT10Ayq/rmge5IqIHGQDsNWuWtG+fNGKEuaAvNtYsMNK5sxQeLtWubXeFAOxWoj3I8+fPL/Qb3n333dddDAAAl/PAA2a4hYeH1KuXuYjv9Glp0SLT9uijZvo4ALhRhepBLuyy0g6Ho8AZLsoDepABoHRJTJTmzZMuXJCSkkw4fvRRpoMDKrKiymuFSr45OTmFupXXcAwAKH3Cw6VRo8xiI35+0smT0qZNdlcFoDxgghwAQJnm5yd1724er14tZWTYWw+Asq/QAblv375KTk52Pp8wYYKSkpKcz0+fPq1bbrmlSIsDAKAwWrSQqgZfVNrOA/rx8U+lsWOlf/5T+u47KTPT7vIAlDGFDshLlixRRp5/lv/zn//UmTNnnM8vXryohISEoq0OAIBCcLuYqa4nv5A2bND6jW7KTM2Q4uOliROlDz8kJAO4JoUOyL+9lo/Z4QAApca6dWr80xxVDvNSWnANbXFrbZbdq11bWrXKLMkHAIXEGGQAQNn3ww9y83RXxwYnJUnrjkQox3KYiZI9PKQffrC5QABlSaEDssPhkMPhyNcGAIDtTpyQ/P3VPCxRvh5ZSkr30U+nQ8w2f3+zHQAKqdCzRVqWpeHDh8vb21uSlJ6ertGjR8vPz0+SXMYnAwBQosLCpPh4ebrnqHWN4/r+UG0t2tNA6Rc9dOFAjuq2CVG43TUCKDMKHZCHDRvm8vzhhx/Ot8/QoUNvvCIAAK5Vx47Sli1SaqpurXFUPxyKUEqGt+ZurSslV5GjVlvdFy81bWp3oQDKgkIH5ClTphRnHQAAXL/27aXt26VVqxTkcUxd/Dy19Xg1BbunKqN5Yx2vFaHFi6UGDSQfH7uLBVDaFWqpabDUNACUepmZZraKH34wY47DwqSOHZXdtr3e+8hLp05JERFSdLS5d+MydaDcKaq8RkAuJAIyAJRdR49KU6dKWVnmefXq0sCBUnCwnVUBKGpFldf49zMAoNyrWVMaNEiqVcvM+nb8uDRvnkQXEYCCFHoMMgAAZVn9+uZ25oz03nvS/v3S1q2Sn5908KC5gC8szO4qAZQGBGQAQIVSpYrUpYv07bfSggVSTo7pSf7+e6lHDzMhBoCKjSEWAIAKp0MHqUkTKTvbhOPwXydJXrVKOn/+0n6WJZ08aUI0gIqDgAwAqHDc3aX77pN69pTuvFMaNcqMU87Kcl2V+rvvpP/8x9xbFkEZqCgIyACACsnNzfQkt2kjORxSt26mfcMGM0vcqVPSmjWX2ubNkyZMMO0AyjcCMgAAkqKizEIiFy9Kn34qffyxGYIhSRcuSHFxZqrl2FhbywRQAgjIAADI9CL37y8FBkqpqVJKilSpktSqlet++/fbUh6AEsQsFgAA/MrPTxo2TNq3T6pc2cybnJ0txcdfWmQkMVFaudL0OEdE2FsvgOLBSnqFxEp6AFBxnTplepjnzJGOHDFt3t7S//yP5ONjb20ALmElPQAASkjVqlJIiHTzzZfaMjLMuGQA5Q8BGQCAQmrXToqJkbp3N8/Xr2fqN6A8IiADAFBIHh7SLbdIt90m+fpKZ89K33xDSAbKGwIyAADXyNNTatvWPN64UZo0STpzxt6aABQdAjIAANehSxepVy/Tk3zihPTf/5qlqn/5xe7KANwoAjIAANfB3V1q314aM0aqUUNKSzMB+YMPpOPH7a4OwI0gIAMAcAP8/aVHHpHuvFOqWdPMlzxtmrRli92VAbheBGQAAG6Qp6fUpo00ZIhZXCQ9XZo3T/r+ey7gA8oiAjIAAEXEx0f63e+kzp3N8+XLpffek44ds7cuANeGgAwAQBFyc5PuuEPq08dcwPfLL9JHH5nlqwGUDQRkAACKmMNhFhV58kmpYUMpO1tasMCMTwZQ+hGQAQAoJr6+0v33S0FBUlKStGaN3RUBKAwCMgAAxcjLS+rd2zz+4Qfp1Cl76wFwdQRkAACKWaNGUoMGZqjFokWSZdldEYArISADAFDMHA6pb1/Jw0P6+WcpNtbuigBcCQEZAIASULmy1LWrefz111JcHD3JQGnlYXcBAABUFJ06SSkp0saN0ty50tKlUs+eZpnqoCCpcWO7KwQglaIe5AkTJsjhcOipp55ytiUmJmrIkCEKDw+Xn5+fWrVqpdmzZ7u87h//+Ic6dOigSpUqKTg4uMD3PnTokPr166dKlSqpWrVqevrpp3Xx4sViPBoAAPLLHWrRoYNZfS8t7VJQ/uILE5wB2K9UBOSNGzdq0qRJatasmUv70KFDlZCQoPnz5ys+Pl733XefYmJitCXPAveZmZl64IEH9NhjjxX43tnZ2erXr58yMzO1du1aTZs2TVOnTtULL7xQrMcEAEBBHA7Ta/znP0vt25s2j1//P3fRIjNGGYC9bA/I586d0+DBg/Xhhx+qcuXKLtvWrl2rJ554Qm3btlW9evX0t7/9TcHBwYrNc3XDyy+/rP/5n/9R06ZNC3z/pUuXaufOnfr000/VokUL9enTR//7v/+rd999V5mZmcV6bAAAXI67uwnKI0ZITz0ltWxpxiR/+aV05IjZJzvb1hKBCsv2gDxmzBj169dP0dHR+bZ16NBBM2fO1JkzZ5STk6MZM2YoPT1d3bp1K/T7r1u3Tk2bNlVYWJizrVevXkpJSdGOHTsu+7qMjAylpKS43AAAKEoOhxQRIfn7m6EX1aubYRdTpkgzZ0r//Kf0zTdczAeUNFsD8owZM7R582aNHz++wO2zZs1SVlaWQkJC5O3trVGjRmnOnDmKiooq9GckJia6hGNJzueJiYmXfd348eMVFBTkvEVERBT6MwEAuFaentLw4dLNN5ue4127zP369dInn0iHD9tdIVBx2BaQDx8+rLFjx2r69Ony8fEpcJ/nn39eSUlJWr58uTZt2qRx48YpJiZG8fHxxV7fc889p+TkZOftMD+ZAADFzNtbiomRevWSatSQOnY0QzF+/ln66CNp8WKGXQAlwbZp3mJjY3Xy5Em1atXK2Zadna3Vq1dr4sSJSkhI0MSJE7V9+3Y1/nXem+bNm2vNmjV699139f777xfqc8LDw7VhwwaXthMnTji3XY63t7e8vb2v9bAAALghDoe5eC/3Ar5WraQ1a8y8yT/+KCUkSC1aSG3bSr6+dlYKlF+29SB3795d8fHxiouLc97atGmjwYMHKy4uTmlpaaZAN9cS3d3dlZOTU+jPad++veLj43Xy5Eln27JlyxQYGKhbbrmlaA4GAIBiEhIi9e8vDRwoublJZ89KK1dKM2ZI6el2VweUT7b1IAcEBKhJkyYubX5+fgoJCVGTJk2UlZWlqKgojRo1Sq+99ppCQkI0d+5cLVu2TAsXLnS+5tChQzpz5owOHTqk7OxsxcXFSZKioqLk7++vnj176pZbbtGQIUP0yiuvKDExUX/72980ZswYeogBAGXGzTdL998vffutdOaMdPCgNGGCWXyke3fT8wygaJTalfQ8PT21aNEi/fnPf9Zdd92lc+fOKSoqStOmTVPfvn2d+73wwguaNm2a83nLli0lSStXrlS3bt3k7u6uhQsX6rHHHlP79u3l5+enYcOG6e9//3uJHxMAADeicWNz27JFWrBAysmRvv9e2rzZzIDRoYMUGXlpXmUA18dhWUweUxgpKSkKCgpScnKyAgMD7S4HAADFxkpff22Ccq6AADMbRkiIbWUBtimqvMa/MQEAKKNat5YaNZKSk02v8o4dUmqqWZHv4YcZdgFcL9sXCgEAANfPz89MCdevn/T735vhFfv2SXv32l0ZUHYRkAEAKCeqVDHTv0nSDz+YGS8yM+2tCSiLCMgAAJQj7dqZ6eAOHJDeesssW83VRsC1ISADAFCOBAWZxUVyHT8uHTtmXz1AWURABgCgnOnbV3rqKTMlnCRt325rOUCZQ0AGAKCccXOTgoOlpk3N8x07pOxscwNwdUzzBgBAORUVJfn4SCkp0muvmaWpmzc3S1cDuDx6kAEAKKc8PKS77zZTwV24YC7W27rVzJsM4PLoQQYAoBy75RbpppvMhXrz50unTpkV+Fq0MIHZz8/0MgO4hIAMAEA55+Eh1a4tdekiffWVtHq1uUmSu7vUubO5ubvbWydQWjDEAgCACuLmm6XAQPPY01Py8jIX7q1aJc2Zw3zJQC56kAEAqCA8PaXRo8145CpVTNv27SYcb98uhYVJHTuaWTCAioyADABABVKpkrnlatpUOn9eWrxY+vZbadMmqW5dsyJf9er21QnYiYAMAEAF166dGWrx/fdmhou4OHMLD5duu81MDedw2F0lUHIclsWIo8JISUlRUFCQkpOTFZg7gAsAgHIkK0s6eNBMBbd9+6Uxya1bS3fdZW9tQGEUVV5jlBEAAJBkxihHRUn33y/96U/SHXeYnuPYWOnECburA0oOARkAAOTj52emhbv5ZvN840Z76wFKEgEZAABcVtu25n7rViktzd5agJJCQAYAAJcVGWku1svKkpYssbsaoGQQkAEAwGU5HNKdd5r7rVul2bPNPMpAeUZABgAAV1SrltStm3kcHy/Nn29rOUCxIyADAICr6tpV+t3vzCp7u3aZoAyUVwRkAABQKLVrS506mcdz50r79tlaDlBsCMgAAKDQunWTGjc2K+8tWnRpMRGgPCEgAwCAQnNzk+65R/Lykk6fNivvAeUNARkAAFwTLy+paVPzePNme2sBigMBGQAAXLNWrcz9zp1Serq9tQBFjYAMAACuWY0aUmiodPGitHev3dUARYuADAAArpnDId10k3n800/21gIUNQIyAAC4LrkBec8eKSfH3lqAokRABgAA1yUiQvLxMUtPHzlidzVA0SEgAwCA6+LmJjVoYB6zsh7KEwIyAAC4brmzWWzeLCUn21sLUFQIyAAA4LrVrWtu2dnSjBnS2bN2VwTcOAIyAAC4IX36SH5+0vHj0rvvSlu22F0RcGMIyAAA4IZUqyaNHGl6ki9elBYulI4ds7sq4PoRkAEAwA0LDpaGDpUaNTLDLT76SPrgA+nrr6W0NGnDBlbcQ9nhYXcBAACgfHA4pHvukbKypH37TC/ysWPS7t1Saqp04IAUE2N3lcDV0YMMAACKjK+v9PDD0qOPSu3bm7bUVHO/c6cJyUBpR0AGAABFyuGQatSQoqPN+GTp0v2SJZJl2VcbUBgMsQAAAMXC3V0aNkw6fVoKCZHeecfMdLFjh9Skid3VAZdHDzIAACg2fn5S7drmPnfIxapVUk6OGZ/844/S+fO2lgjkQw8yAAAoEbfdJq1fL506Jb36qnThgmn/4QdpwAApMtLe+oBc9CADAIAS4e0tde1qHl+4YIZgBAaai/g++UTas8fe+oBc9CADAIAS07at1KCBmQouMFDy8JC+/FJKSJBmzpQeeUSqWdPuKlHR0YMMAABKjMMhVakihYWZKeE8Pc3cyA0amFX4ZsxgTDLsR0AGAAC2cnc3Y5BDQ81wi6+/NqvuHT9ubjk5dleIioYhFgAAwHbe3tK990r//a9ZUGTnzkvbatY0y1h7e9tXHyoWepABAECpUKOGdN99ZuiFZKaG8/SUjh6VPvvMzH4BlASHZbGeTWGkpKQoKChIycnJCgwMtLscAADKrYsXzRALf38TjqdNkzIzzfjlVq2kHj0kHx+7q0RpVFR5jR5kAABQqnh4mHAsmeEVv/+91LChWaI6NlZ67z0TnIHiQkAGAAClWrVq0oMPmingKleWkpOl6dOls2ftrgzlFQEZAACUCZGR0mOPmbHKaWnS559LGRl2V4XyiIAMAADKDC8vadAgKSBAOnnSXLx37pzdVaG8ISADAIAyJTDQDLnw8pIOHpQmTZIOHbK7KpQnBGQAAFDm1KghjRx5aXGRqVPNBXxAUSAgAwCAMik01ITkJk3Mantffy0dOWJ3VSgPCMgAAKDM8vKS7r9fatrUhOTZs6VffrG7KpR1BGQAAFCmORxS375SUJCZ+m3SJBOUjx+3uzKUVQRkAABQ5vn6mgVF6tc3K/HFx0sffSTt2WN3ZSiLCMgAAKBcCAiQHn7YjEuOijJB+fPPpR077K4MZQ0BGQAAlBsOh1me+sEHL41L/vJL06MMFBYBGQAAlDvu7tK990qtW0uWJc2fL50+bXdVKCs87C4AAACgOLi5SXfeKZ05I+3fL334oRQeLnl7S23aSA0a2F0hSisCMgAAKLccDtOTPGWKmeHiwAHTnpAgtW9vVuXbvdtMFRcYaGupKEUIyAAAoFwLDJQef1xKTDS9yYcPSxs2SOvWXdpn40ape3czZtmNAagVHgEZAACUe+7u5uK9mjXNxXsREdKcOSYQS9LatSY4HzwoNW8u9e9va7mwGf9GAgAAFU7TptKoUWZaOEnKzjbDLyzLzHiRmWlrebAZARkAAFRIYWFmvuTfXqyXnW16klFxEZABAECFFh0t3XyzWWCkVSvT9vPP9tYEexGQAQBAhRYWJg0caMYn169v2tatk6ZONb3JqHgIyAAAAL+qX1/y9zePDxyQ4uLsrAZ2ISADAAD8ysdHGjtW6tDBPF+9WkpPt7cmlDwCMgAAQB6entIdd5j5k5OTpUmTpJ07zQwXqBgIyAAAAL/h4SENGiQFB5sV+GbNkqZNk1JS7K4MJYGADAAAUIAaNaTRo6WuXSUvLzMm+e23pWXLpIsX7a4OxYmADAAAcBk+PtLtt5tFRSIiTDD+4Qfpww+lc+fsrg7FpdQE5AkTJsjhcOipp55ytiUmJmrIkCEKDw+Xn5+fWrVqpdmzZ7u87syZMxo8eLACAwMVHBysESNG6NxvvrHbtm1T586d5ePjo4iICL3yyislcUgAAKCcCAmRfvc76cEHJT8/6cQJaeZMepLLq1IRkDdu3KhJkyapWbNmLu1Dhw5VQkKC5s+fr/j4eN13332KiYnRli1bnPsMHjxYO3bs0LJly7Rw4UKtXr1ajz76qHN7SkqKevbsqcjISMXGxurVV1/VSy+9pA8++KDEjg8AAJR9DofUsKH0yCOmZ/nwYenbb+2uCsXB9oB87tw5DR48WB9++KEqV67ssm3t2rV64okn1LZtW9WrV09/+9vfFBwcrNjYWEnSrl27tHjxYv33v/9Vu3bt1KlTJ73zzjuaMWOGjh07JkmaPn26MjMzNXnyZDVu3FiDBg3Sk08+qddff73EjxUAAJR9VatK991nHv/4oxmbjPLF9oA8ZswY9evXT9HR0fm2dejQQTNnztSZM2eUk5OjGTNmKD09Xd26dZMkrVu3TsHBwWrTpo3zNdHR0XJzc9P69eud+3Tp0kVeXl7OfXr16qWEhASdPXv2snVlZGQoJSXF5QYAACBJN91klqW2LGnNGrurQVGzNSDPmDFDmzdv1vjx4wvcPmvWLGVlZSkkJETe3t4aNWqU5syZo6ioKElmjHK1atVcXuPh4aEqVaooMTHRuU9YWJjLPrnPc/cpyPjx4xUUFOS8RUREXPdxAgCA8ue228z9oUMsSV3e2BaQDx8+rLFjx2r69Ony8fEpcJ/nn39eSUlJWr58uTZt2qRx48YpJiZG8fHxxV7fc889p+TkZOft8OHDxf6ZAACg7AgNlSpVkrKypF9HdqKc8LDrg2NjY3Xy5Em1atXK2Zadna3Vq1dr4sSJSkhI0MSJE7V9+3Y1btxYktS8eXOtWbNG7777rt5//32Fh4fr5MmTLu978eJFnTlzRuHh4ZKk8PBwnThxwmWf3Oe5+xTE29tb3t7eRXKsAACg/HE4pDp1zCp7Bw6YaeBQPtjWg9y9e3fFx8crLi7OeWvTpo0GDx6suLg4paWlmQLdXEt0d3dXTk6OJKl9+/ZKSkpyXrQnSStWrFBOTo7atWvn3Gf16tXKyspy7rNs2TI1bNgw30WBAAAA16JOHXO/Y4d0/DjLUZcXtgXkgIAANWnSxOXm5+enkJAQNWnSRI0aNVJUVJRGjRqlDRs2aN++ffr3v/+tZcuWqX///pKkm2++Wb1799bIkSO1YcMG/fDDD3r88cc1aNAg1ahRQ5L00EMPycvLSyNGjNCOHTs0c+ZMvfXWWxo3bpxdhw4AAMqJ3ICcmChNmiRt2mRrOSgits9icTmenp5atGiRQkNDddddd6lZs2b6+OOPNW3aNPXt29e53/Tp09WoUSN1795dffv2VadOnVzmOA4KCtLSpUu1f/9+tW7dWn/84x/1wgsvuMyVDAAAcD1CQ6W8IzbXrpV+/Y9ulGEOy+I/AwojJSVFQUFBSk5OVmBgoN3lAACAUsKypAsXpHfeMfcDB0qNGpkxyihZRZXXbLtIDwAAoDxwOMxsFq1bS99/b5ag9vaWmjeXunSR/P3trhDXqtQOsQAAAChL2raV/PzM44wMacMGafJkKSnJ1rJwHRhiUUgMsQAAAFeTk2PmRT5yRFqw4FI4vvVWqV8/W0urEIoqr9GDDAAAUETc3Mzwivr1paFDL82NvHGjmSsZZQMBGQAAoBhUqSKNGGF6jyVp+XLmSS4rCMgAAADFqGtXycPDDLs4csTualAYBGQAAIBi5O8vNW1qHm/YYG8tKBwCMgAAQDFr29bc79ghxcbaWwuujoAMAABQzKpXl1q0MLNcLFggHTtmd0W4EgIyAABACbjnHrPCniRt22ZvLbgyAjIAAEAJcDikli3N4x07TG8ySicCMgAAQAmpX1/y8ZFSU01IRulEQAYAACghHh6X5kWeN49p30orAjIAAEAJuv126aabpIsXpc8/l06etLsi/BYBGQAAoAS5uUkDBpiZLc6flyZPln7+2e6qkBcBGQAAoIR5eUlDhki1a0vp6dKnn0pbtthdFXIRkAEAAGxQqZI0dKhZZS8nx4xJ/uILad8+ybLsrq5iIyADAADYxMNDuu8+qWtXMw3cjh3SJ59Is2ebMcqwBwEZAADARg6HuXBv1CgzT7Kbm7R9u7R4sd2VVVwEZAAAgFIgPNystjdokHm+aRMr7tmFgAwAAFCK3HST1L69efzVV6Y3GSWLgAwAAFDK9OghtWljHn/5pbR8uZSWZm9NFQkBGQAAoJRxc5P69pVq1DDPv/9e+uwzKSvL3roqCgIyAABAKeTmJg0caIZbuLubZannzWMKuJJAQAYAACilgoKkXr2khx++NLvFunXS0aME5eJEQAYAACjl6tY1QVmSli6VPvxQWrSIkFxcCMgAAABlwK23StWqXXq+caNZee/nnwnKRc3D7gIAAABwdbljkrdskbKzpR9/lHbuNLfatc2KfMHBdldZPjgsi39zFEZKSoqCgoKUnJyswMBAu8sBAAAVXGKitGGDGZecmSn5+0t33y01aGBW56uIiiqvEZALiYAMAABKo6Qk6fPPpRMnzPPAQDPzRUSEVLNmxQrLBOQSRkAGAAClVWamtGqVWZ46M/NSe9u25uI+d3fbSitRBOQSRkAGAACl3cWLZthFfLx0/LhpCw01Ibl+/fLfm0xALmEEZAAAUJbs2iUtXCidP2+eV6li5lOuUsXeuopTUeU1pnkDAAAoh26+WXriCaldO8nDQzpzxixXffKk3ZWVfgRkAACAcsrHR+rTR3rySXPx3qlT0gcfSIcO2V1Z6UZABgAAKOcCA6URI6R69cw45WnTzEp82dl2V1Y6EZABAAAqgKAgadAgM/1bdra5mO/rr1mFryAEZAAAgArCy0t65BGpf38zo8XmzdKCBYTk3yIgAwAAVCBublKLFmbVvdyQvGqV3VWVLgRkAACACqhlSxOSJem770xP8oUL9tZUWnjYXQAAAADs0bKllJYmLV8uxcZK27ZJUVFS795mzHJFRQ8yAABABdaxozRkiBQWJmVlmQVGPvhAOnjQ7srsQ0AGAACo4OrVk0aPlkaNkqpXN6vvTZsmbdpkd2X2ICADAABADocJx7/7ndSkiZSTY5aqroghmYAMAAAAJ09P6f77pU6dzPN16yreNHAEZAAAALhwOKTOnc28yadPS4cP211RySIgAwAAIB9vb6lxY/N4zhzpzBl76ylJBGQAAAAUqFs3qXJl6exZ6ZNPzMV7FQEBGQAAAAUKCpJGjLgUkj/8UFq5UtqzR8rOtru64kNABgAAwGX5+0sPP2zCclKSWXVv+nTTo5yVJSUnS+fO2V1l0XJYVkW7LvH6pKSkKCgoSMnJyQoMDLS7HAAAgBKVmipt2CClpEi7d0sZGZe2Vapk5lD29TUX9tmlqPIaAbmQCMgAAADGwYPSp5+aHuS8KlWSfv97qUoVe+oqqrzGEAsAAABck8hIMza5Zk2zRHWutDTpyy+lzEz7aisK9CAXEj3IAAAABdu7V0pMlNasMUMvqlaVWreW2raV3N1Lrg56kAEAAFAqREWZlfeGDDEX9Z06JS1ZIs2bVzZX4SMgAwAAoEjUqiU99pjUs6fk5iZt2yatWmV3VdfOw+4CAAAAUH74+UkdOpj7FSukpk3trujaEZABAABQ5Jo3l265RfL0tLuSa8cQCwAAABSLshiOJQIyAAAA4IKADAAAAORBQAYAAADyICADAAAAeRCQAQAAgDwIyAAAAEAeBGQAAAAgDwIyAAAAkAcBGQAAAMiDgAwAAADkQUAGAAAA8iAgAwAAAHkQkAEAAIA8CMgAAABAHgRkAAAAIA8CMgAAAJAHARkAAADIw8PuAsoKy7IkSSkpKTZXAgAAgILk5rTc3Ha9CMiFlJqaKkmKiIiwuRIAAABcSWpqqoKCgq779Q7rRiN2BZGTk6Njx44pICBADoej2D8vJSVFEREROnz4sAIDA4v988oazs/VcY6ujnN0dZyjK+P8XB3n6Oo4R1dX2HNkWZZSU1NVo0YNubld/0hiepALyc3NTbVq1Srxzw0MDOQvyxVwfq6Oc3R1nKOr4xxdGefn6jhHV8c5urrCnKMb6TnOxUV6AAAAQB4EZAAAACAPAnIp5e3trRdffFHe3t52l1IqcX6ujnN0dZyjq+McXRnn5+o4R1fHObq6kj5HXKQHAAAA5EEPMgAAAJAHARkAAADIg4AMAAAA5EFABgAAAPIgIJdC7777rurUqSMfHx+1a9dOGzZssLukEjF+/HjdeuutCggIULVq1dS/f38lJCS47NOtWzc5HA6X2+jRo132OXTokPr166dKlSqpWrVqevrpp3Xx4sWSPJRi89JLL+U7/kaNGjm3p6ena8yYMQoJCZG/v7/uv/9+nThxwuU9yvP5kaQ6derkO0cOh0NjxoyRVDG/Q6tXr9Zdd92lGjVqyOFwaO7cuS7bLcvSCy+8oOrVq8vX11fR0dHas2ePyz5nzpzR4MGDFRgYqODgYI0YMULnzp1z2Wfbtm3q3LmzfHx8FBERoVdeeaW4D61IXOn8ZGVl6dlnn1XTpk3l5+enGjVqaOjQoTp27JjLexT0vZswYYLLPmX1/EhX/w4NHz483/H37t3bZZ/y/B2Srn6OCvq55HA49Oqrrzr3Kc/fo8L8ji+q32GrVq1Sq1at5O3traioKE2dOvXaC7ZQqsyYMcPy8vKyJk+ebO3YscMaOXKkFRwcbJ04ccLu0opdr169rClTpljbt2+34uLirL59+1q1a9e2zp0759yna9eu1siRI63jx487b8nJyc7tFy9etJo0aWJFR0dbW7ZssRYtWmRVrVrVeu655+w4pCL34osvWo0bN3Y5/l9++cW5ffTo0VZERIT17bffWps2bbJuu+02q0OHDs7t5f38WJZlnTx50uX8LFu2zJJkrVy50rKsivkdWrRokfXXv/7V+uqrryxJ1pw5c1y2T5gwwQoKCrLmzp1rbd261br77rutunXrWhcuXHDu07t3b6t58+bWjz/+aK1Zs8aKioqyHnzwQef25ORkKywszBo8eLC1fft26/PPP7d8fX2tSZMmldRhXrcrnZ+kpCQrOjramjlzprV7925r3bp1Vtu2ba3WrVu7vEdkZKT197//3eV7lfdnV1k+P5Z19e/QsGHDrN69e7sc/5kzZ1z2Kc/fIcu6+jnKe26OHz9uTZ482XI4HNa+ffuc+5Tn71FhfscXxe+wn3/+2apUqZI1btw4a+fOndY777xjubu7W4sXL76megnIpUzbtm2tMWPGOJ9nZ2dbNWrUsMaPH29jVfY4efKkJcn67rvvnG1du3a1xo4de9nXLFq0yHJzc7MSExOdbe+9954VGBhoZWRkFGe5JeLFF1+0mjdvXuC2pKQky9PT0/riiy+cbbt27bIkWevWrbMsq/yfn4KMHTvWql+/vpWTk2NZFt+h3/7izsnJscLDw61XX33V2ZaUlGR5e3tbn3/+uWVZlrVz505LkrVx40bnPt98843lcDiso0ePWpZlWf/5z3+sypUru5yjZ5991mrYsGExH1HRKijY/NaGDRssSdbBgwedbZGRkdYbb7xx2deUl/NjWQWfo2HDhln33HPPZV9Tkb5DllW479E999xj3XHHHS5tFel79Nvf8UX1O+yZZ56xGjdu7PJZAwcOtHr16nVN9THEohTJzMxUbGysoqOjnW1ubm6Kjo7WunXrbKzMHsnJyZKkKlWquLRPnz5dVatWVZMmTfTcc88pLS3NuW3dunVq2rSpwsLCnG29evVSSkqKduzYUTKFF7M9e/aoRo0aqlevngYPHqxDhw5JkmJjY5WVleXy/WnUqJFq167t/P5UhPOTV2Zmpj799FP97ne/k8PhcLZX9O9QXvv371diYqLL9yYoKEjt2rVz+d4EBwerTZs2zn2io6Pl5uam9evXO/fp0qWLvLy8nPv06tVLCQkJOnv2bAkdTclITk6Ww+FQcHCwS/uECRMUEhKili1b6tVXX3X5b9+KcH5WrVqlatWqqWHDhnrsscd0+vRp5za+Q65OnDihr7/+WiNGjMi3raJ8j377O76ofoetW7fO5T1y97nWHOVx7YeE4nLq1CllZ2e7/MFLUlhYmHbv3m1TVfbIycnRU089pY4dO6pJkybO9oceekiRkZGqUaOGtm3bpmeffVYJCQn66quvJEmJiYkFnr/cbWVdu3btNHXqVDVs2FDHjx/Xyy+/rM6dO2v79u1KTEyUl5dXvl/aYWFhzmMv7+fnt+bOnaukpCQNHz7c2VbRv0O/lXtMBR1z3u9NtWrVXLZ7eHioSpUqLvvUrVs333vkbqtcuXKx1F/S0tPT9eyzz+rBBx9UYGCgs/3JJ59Uq1atVKVKFa1du1bPPfecjh8/rtdff11S+T8/vXv31n333ae6detq3759+stf/qI+ffpo3bp1cnd35zv0G9OmTVNAQIDuu+8+l/aK8j0q6Hd8Uf0Ou9w+KSkpunDhgnx9fQtVIwEZpdKYMWO0fft2ff/99y7tjz76qPNx06ZNVb16dXXv3l379u1T/fr1S7rMEtenTx/n42bNmqldu3aKjIzUrFmzCv2XviL56KOP1KdPH9WoUcPZVtG/Q7h+WVlZiomJkWVZeu+991y2jRs3zvm4WbNm8vLy0qhRozR+/PgKsXzwoEGDnI+bNm2qZs2aqX79+lq1apW6d+9uY2Wl0+TJkzV48GD5+Pi4tFeU79HlfseXJgyxKEWqVq0qd3f3fFdsnjhxQuHh4TZVVfIef/xxLVy4UCtXrlStWrWuuG+7du0kSXv37pUkhYeHF3j+creVN8HBwbrpppu0d+9ehYeHKzMzU0lJSS775P3+VKTzc/DgQS1fvly///3vr7hfRf8O5R7TlX7uhIeH6+TJky7bL168qDNnzlSY71ZuOD548KCWLVvm0ntckHbt2unixYs6cOCApPJ/fn6rXr16qlq1qsvfq4r+Hcq1Zs0aJSQkXPVnk1Q+v0eX+x1fVL/DLrdPYGDgNXUkEZBLES8vL7Vu3Vrffvutsy0nJ0fffvut2rdvb2NlJcOyLD3++OOaM2eOVqxYke+/kQoSFxcnSapevbokqX379oqPj3f5QZz7y+yWW24plrrtdO7cOe3bt0/Vq1dX69at5enp6fL9SUhI0KFDh5zfn4p0fqZMmaJq1aqpX79+V9yvon+H6tatq/DwcJfvTUpKitavX+/yvUlKSlJsbKxznxUrVignJ8f5D4z27dtr9erVysrKcu6zbNkyNWzYsMz8t+/l5IbjPXv2aPny5QoJCbnqa+Li4uTm5uYcVlCez09Bjhw5otOnT7v8varI36G8PvroI7Vu3VrNmze/6r7l6Xt0td/xRfU7rH379i7vkbvPNeeoa7/uEMVpxowZlre3tzV16lRr586d1qOPPmoFBwe7XLFZXj322GNWUFCQtWrVKpcpbtLS0izLsqy9e/daf//7361NmzZZ+/fvt+bNm2fVq1fP6tKli/M9cqeA6dmzpxUXF2ctXrzYCg0NLdNTdOX1xz/+0Vq1apW1f/9+64cffrCio6OtqlWrWidPnrQsy0yRU7t2bWvFihXWpk2brPbt21vt27d3vr68n59c2dnZVu3ata1nn33Wpb2ifodSU1OtLVu2WFu2bLEkWa+//rq1ZcsW5ywMEyZMsIKDg6158+ZZ27Zts+65554Cp3lr2bKltX79euv777+3GjRo4DJFV1JSkhUWFmYNGTLE2r59uzVjxgyrUqVKZWL6qSudn8zMTOvuu++2atWqZcXFxbn8bMq9an7t2rXWG2+8YcXFxVn79u2zPv30Uys0NNQaOnSo8zPK8vmxrCufo9TUVOtPf/qTtW7dOmv//v3W8uXLrVatWlkNGjSw0tPTne9Rnr9DlnX1v2eWZaZpq1SpkvXee+/le315/x5d7Xe8ZRXN77Dcad6efvppa9euXda7777LNG/lxTvvvGPVrl3b8vLystq2bWv9+OOPdpdUIiQVeJsyZYplWZZ16NAhq0uXLlaVKlUsb29vKyoqynr66add5rC1LMs6cOCA1adPH8vX19eqWrWq9cc//tHKysqy4YiK3sCBA63q1atbXl5eVs2aNa2BAwdae/fudW6/cOGC9Yc//MGqXLmyValSJevee++1jh8/7vIe5fn85FqyZIklyUpISHBpr6jfoZUrVxb4d2vYsGGWZZmp3p5//nkrLCzM8vb2trp3757v3J0+fdp68MEHLX9/fyswMNB65JFHrNTUVJd9tm7danXq1Mny9va2atasaU2YMKGkDvGGXOn87N+//7I/m3Ln1o6NjbXatWtnBQUFWT4+PtbNN99s/fOf/3QJh5ZVds+PZV35HKWlpVk9e/a0QkNDLU9PTysyMtIaOXJkvo6d8vwdsqyr/z2zLMuaNGmS5evrayUlJeV7fXn/Hl3td7xlFd3vsJUrV1otWrSwvLy8rHr16rl8RmE5fi0aAAAAgBiDDAAAALggIAMAAAB5EJABAACAPAjIAAAAQB4EZAAAACAPAjIAAACQBwEZAAAAyIOADAAAAORBQAaAcsbhcGju3Ll2lwEAZRYBGQDKgOHDh8vhcMjhcMjT01NhYWHq0aOHJk+erJycHJd9jx8/rj59+hTqfQsbpnM/O++tU6dOkqQDBw7I4XAoLi7uWg8LAEolAjIAlBG9e/fW8ePHdeDAAX3zzTe6/fbbNXbsWN155526ePGic7/w8HB5e3sX+edPmTJFx48fd97mz59f5J8BAKUBARkAyghvb2+Fh4erZs2aatWqlf7yl79o3rx5+uabbzR16lTnfnl7hTMzM/X444+revXq8vHxUWRkpMaPHy9JqlOnjiTp3nvvlcPhcD6/nODgYIWHhztvVapUkSTVrVtXktSyZUs5HA5169atKA8bAEocARkAyrA77rhDzZs311dffVXg9rffflvz58/XrFmzlJCQoOnTpzuD8MaNGyVd6hnOfX6tNmzYIElavny5jh8/ftlaAKCs8LC7AADAjWnUqJG2bdtW4LZDhw6pQYMG6tSpkxwOhyIjI53bQkNDJV3qGb6aBx98UO7u7s7nn376qfr37+98n5CQkEK9DwCUdgRkACjjLMuSw+EocNvw4cPVo0cPNWzYUL1799add96pnj17XtfnvPHGG4qOjnY+r169+nW9DwCUdgRkACjjdu3a5RwH/FutWrXS/v379c0332j58uWKiYlRdHS0vvzyy2v+nPDwcEVFRd1ouQBQ6jEGGQDKsBUrVig+Pl7333//ZfcJDAzUwIED9eGHH2rmzJmaPXu2zpw5I0ny9PRUdnb2DdXg5eUlSTf8PgBQWtCDDABlREZGhhITE5Wdna0TJ05o8eLFGj9+vO68804NHTq0wNe8/vrrql69ulq2bCk3Nzd98cUXCg8PV3BwsCQzk8W3336rjh07ytvbW5UrV77muqpVqyZfX18tXrxYtWrVko+Pj4KCgm7kUAHAVvQgA0AZsXjxYlWvXl116tRR7969tXLlSr399tuaN2+ey8VzeQUEBOiVV15RmzZtdOutt+rAgQNatGiR3NzMj/9///vfWrZsmSIiItSyZcvrqsvDw0Nvv/22Jk2apBo1auiee+657mMEgNLAYVmWZXcRAAAAQGlBDzIAAACQBwEZAAAAyIOADAAAAORBQAYAAADyICADAAAAeRCQAQAAgDwIyAAAAEAeBGQAAAAgDwIyAAAAkAcBGQAAAMiDgAwAAADk8f9hZ6dXPBZYaQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "profiles = stream_df_new.stream_profiles.keys()\n",
    "\n",
    "for profile in profiles:\n",
    "    viz = Visualize_Profile()\n",
    "    stream_df = stream_df_new.stream_profiles[profile]\n",
    "    viz.plot_elev_profile(stream_df, profile, True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "189fce26",
   "metadata": {
    "papermill": {
     "duration": 0.021561,
     "end_time": "2024-04-25T03:15:28.531703",
     "exception": false,
     "start_time": "2024-04-25T03:15:28.510142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's add a column to our stream profile called `has_headcut`. This will be our dependent variable for our machine learning model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87adc9be",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.02147,
     "end_time": "2024-04-25T03:15:28.574910",
     "exception": false,
     "start_time": "2024-04-25T03:15:28.553440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "505c9c8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:28.619587Z",
     "iopub.status.busy": "2024-04-25T03:15:28.619282Z",
     "iopub.status.idle": "2024-04-25T03:15:28.706746Z",
     "shell.execute_reply": "2024-04-25T03:15:28.705844Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.112133,
     "end_time": "2024-04-25T03:15:28.708688",
     "exception": false,
     "start_time": "2024-04-25T03:15:28.596555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "      <th>has headcut</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>52.12513114</td>\n",
       "      <td>495991.84</td>\n",
       "      <td>4794222.64</td>\n",
       "      <td>4865.419922</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>180.2097651</td>\n",
       "      <td>495921.3815</td>\n",
       "      <td>4794118.299</td>\n",
       "      <td>4845.866211</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>236.9627192</td>\n",
       "      <td>495907.0346</td>\n",
       "      <td>4794064.529</td>\n",
       "      <td>4838.484375</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>279.0916947</td>\n",
       "      <td>495909.4258</td>\n",
       "      <td>4794023.443</td>\n",
       "      <td>4834.973633</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>285.3730026</td>\n",
       "      <td>495911.7753</td>\n",
       "      <td>4794017.621</td>\n",
       "      <td>4834.15332</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>316.9558364</td>\n",
       "      <td>495927.536</td>\n",
       "      <td>4793990.882</td>\n",
       "      <td>4830.610352</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>318.5366146</td>\n",
       "      <td>495928.4509</td>\n",
       "      <td>4793989.593</td>\n",
       "      <td>4830.511719</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>361.7876491</td>\n",
       "      <td>495955.1901</td>\n",
       "      <td>4793958.113</td>\n",
       "      <td>4827.001465</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>426.9348608</td>\n",
       "      <td>495976.5232</td>\n",
       "      <td>4793900.352</td>\n",
       "      <td>4816.568359</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>579.0827996</td>\n",
       "      <td>496037.3256</td>\n",
       "      <td>4793769.326</td>\n",
       "      <td>4803.510742</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>594.6758997</td>\n",
       "      <td>496039.8694</td>\n",
       "      <td>4793754.063</td>\n",
       "      <td>4802.362305</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>599.6474252</td>\n",
       "      <td>496040.8617</td>\n",
       "      <td>4793749.192</td>\n",
       "      <td>4802.165527</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>618.4948471</td>\n",
       "      <td>496056.0166</td>\n",
       "      <td>4793738.186</td>\n",
       "      <td>4799.57373</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>644.3992303</td>\n",
       "      <td>496055.6558</td>\n",
       "      <td>4793714.011</td>\n",
       "      <td>4798.523438</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>510</th>\n",
       "      <td>655.644581</td>\n",
       "      <td>496059.0235</td>\n",
       "      <td>4793703.366</td>\n",
       "      <td>4798.392578</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>519</th>\n",
       "      <td>667.6914888</td>\n",
       "      <td>496058.7228</td>\n",
       "      <td>4793691.639</td>\n",
       "      <td>4797.572266</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>685.5618637</td>\n",
       "      <td>496065.0373</td>\n",
       "      <td>4793675.402</td>\n",
       "      <td>4796.227051</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>688.3098662</td>\n",
       "      <td>496066.1198</td>\n",
       "      <td>4793672.876</td>\n",
       "      <td>4795.866211</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft  has headcut\n",
       "45   52.12513114    495991.84   4794222.64  4865.419922          1.0\n",
       "146  180.2097651  495921.3815  4794118.299  4845.866211          1.0\n",
       "192  236.9627192  495907.0346  4794064.529  4838.484375          1.0\n",
       "231  279.0916947  495909.4258  4794023.443  4834.973633          1.0\n",
       "236  285.3730026  495911.7753  4794017.621   4834.15332          1.0\n",
       "257  316.9558364   495927.536  4793990.882  4830.610352          1.0\n",
       "258  318.5366146  495928.4509  4793989.593  4830.511719          1.0\n",
       "288  361.7876491  495955.1901  4793958.113  4827.001465          1.0\n",
       "337  426.9348608  495976.5232  4793900.352  4816.568359          1.0\n",
       "451  579.0827996  496037.3256  4793769.326  4803.510742          1.0\n",
       "464  594.6758997  496039.8694  4793754.063  4802.362305          1.0\n",
       "468  599.6474252  496040.8617  4793749.192  4802.165527          1.0\n",
       "480  618.4948471  496056.0166  4793738.186   4799.57373          1.0\n",
       "501  644.3992303  496055.6558  4793714.011  4798.523438          1.0\n",
       "510   655.644581  496059.0235  4793703.366  4798.392578          1.0\n",
       "519  667.6914888  496058.7228  4793691.639  4797.572266          1.0\n",
       "532  685.5618637  496065.0373  4793675.402  4796.227051          1.0\n",
       "534  688.3098662  496066.1198  4793672.876  4795.866211          1.0\n",
       "0            NaN          NaN          NaN          NaN          1.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(len(stream_profile_df['X'])):\n",
    "    x_val, y_val = float(stream_profile_df['X'].iloc[i]), float(stream_profile_df['Y'].iloc[i])\n",
    "    has_headcut_bool = False\n",
    "    for j in range(len(closest_profile_points)):\n",
    "        if closest_profile_points[j][0] == x_val and closest_profile_points[j][1] == y_val:\n",
    "            has_headcut_bool = True\n",
    "            break\n",
    "    stream_profile_df.at[i, 'has headcut'] = 1 if has_headcut_bool else 0\n",
    "\n",
    "    \n",
    "headcut_rows = stream_profile_df[stream_profile_df['has headcut'] == 1]\n",
    "headcut_rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "781de56d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:28.754620Z",
     "iopub.status.busy": "2024-04-25T03:15:28.754347Z",
     "iopub.status.idle": "2024-04-25T03:15:28.759659Z",
     "shell.execute_reply": "2024-04-25T03:15:28.758912Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.030015,
     "end_time": "2024-04-25T03:15:28.761549",
     "exception": false,
     "start_time": "2024-04-25T03:15:28.731534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(stream_profile_df['has headcut'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75367a89",
   "metadata": {
    "papermill": {
     "duration": 0.022032,
     "end_time": "2024-04-25T03:15:28.806187",
     "exception": false,
     "start_time": "2024-04-25T03:15:28.784155",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have a column with our dependent variable `has headcut` this is the variable we will try to predict with our machine learning models. The next steps are to do some data analysis, calculating slopes at each point, and average slopes at each point with varying distance widths (5, 10, 15, 20). This will give us more columns that our machine learning model can use to sort potential headcuts and non-headcut areas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "82184bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:28.851618Z",
     "iopub.status.busy": "2024-04-25T03:15:28.851368Z",
     "iopub.status.idle": "2024-04-25T03:15:28.858190Z",
     "shell.execute_reply": "2024-04-25T03:15:28.857364Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.031793,
     "end_time": "2024-04-25T03:15:28.860132",
     "exception": false,
     "start_time": "2024-04-25T03:15:28.828339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def avg_slope(title, gap):\n",
    "    for i in range(len(stream_profile_df['Elev ft'])):\n",
    "        min_i = max(0, i-gap)\n",
    "        max_i = min(len(stream_profile_df['Elev ft'])-1, i+gap)\n",
    "        \n",
    "        dist_min = float(stream_profile_df['Dist M'].iloc[min_i])\n",
    "        dist_max = float(stream_profile_df['Dist M'].iloc[max_i])\n",
    "        elev_min = float(stream_profile_df['Elev ft'].iloc[min_i])\n",
    "        elev_max = float(stream_profile_df['Elev ft'].iloc[max_i])\n",
    "        \n",
    "        \n",
    "        numerator = elev_max - elev_min\n",
    "        denominator = dist_max - dist_min\n",
    "        if abs(denominator) > 1e-6:\n",
    "            slope = numerator/denominator\n",
    "        else: \n",
    "            slope = 0.0\n",
    "        stream_profile_df.at[i, title] = slope\n",
    "#         print(f\"Row {i}: numerator={numerator}, denominator={denominator}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d5bbab6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:28.905834Z",
     "iopub.status.busy": "2024-04-25T03:15:28.905571Z",
     "iopub.status.idle": "2024-04-25T03:15:29.265766Z",
     "shell.execute_reply": "2024-04-25T03:15:29.264928Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.385405,
     "end_time": "2024-04-25T03:15:29.267768",
     "exception": false,
     "start_time": "2024-04-25T03:15:28.882363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Slope at Point</th>\n",
       "      <th>Avg Slope 10m</th>\n",
       "      <th>Avg Slope 20m</th>\n",
       "      <th>Avg Slope 30m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>52.12513114</td>\n",
       "      <td>495991.84</td>\n",
       "      <td>4794222.64</td>\n",
       "      <td>4865.419922</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.402471</td>\n",
       "      <td>-0.222721</td>\n",
       "      <td>-0.214954</td>\n",
       "      <td>-0.209200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>180.2097651</td>\n",
       "      <td>495921.3815</td>\n",
       "      <td>4794118.299</td>\n",
       "      <td>4845.866211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.549902</td>\n",
       "      <td>-0.204838</td>\n",
       "      <td>-0.179259</td>\n",
       "      <td>-0.154808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>236.9627192</td>\n",
       "      <td>495907.0346</td>\n",
       "      <td>4794064.529</td>\n",
       "      <td>4838.484375</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.120460</td>\n",
       "      <td>-0.070009</td>\n",
       "      <td>-0.085264</td>\n",
       "      <td>-0.083507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>279.0916947</td>\n",
       "      <td>495909.4258</td>\n",
       "      <td>4794023.443</td>\n",
       "      <td>4834.973633</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.026797</td>\n",
       "      <td>-0.258761</td>\n",
       "      <td>-0.196194</td>\n",
       "      <td>-0.152797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>285.3730026</td>\n",
       "      <td>495911.7753</td>\n",
       "      <td>4794017.621</td>\n",
       "      <td>4834.15332</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.453272</td>\n",
       "      <td>-0.216612</td>\n",
       "      <td>-0.187378</td>\n",
       "      <td>-0.132694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>316.9558364</td>\n",
       "      <td>495927.536</td>\n",
       "      <td>4793990.882</td>\n",
       "      <td>4830.610352</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.747197</td>\n",
       "      <td>-0.109701</td>\n",
       "      <td>-0.087511</td>\n",
       "      <td>-0.081186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>318.5366146</td>\n",
       "      <td>495928.4509</td>\n",
       "      <td>4793989.593</td>\n",
       "      <td>4830.511719</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.770239</td>\n",
       "      <td>-0.145904</td>\n",
       "      <td>-0.078841</td>\n",
       "      <td>-0.080090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>361.7876491</td>\n",
       "      <td>495955.1901</td>\n",
       "      <td>4793958.113</td>\n",
       "      <td>4827.001465</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.875272</td>\n",
       "      <td>-0.387115</td>\n",
       "      <td>-0.206682</td>\n",
       "      <td>-0.163252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>426.9348608</td>\n",
       "      <td>495976.5232</td>\n",
       "      <td>4793900.352</td>\n",
       "      <td>4816.568359</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.163264</td>\n",
       "      <td>-0.094457</td>\n",
       "      <td>-0.107954</td>\n",
       "      <td>-0.110142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>579.0827996</td>\n",
       "      <td>496037.3256</td>\n",
       "      <td>4793769.326</td>\n",
       "      <td>4803.510742</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.046687</td>\n",
       "      <td>-0.075034</td>\n",
       "      <td>-0.088531</td>\n",
       "      <td>-0.070030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>594.6758997</td>\n",
       "      <td>496039.8694</td>\n",
       "      <td>4793754.063</td>\n",
       "      <td>4802.362305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.036627</td>\n",
       "      <td>-0.080249</td>\n",
       "      <td>-0.100532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>599.6474252</td>\n",
       "      <td>496040.8617</td>\n",
       "      <td>4793749.192</td>\n",
       "      <td>4802.165527</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.075820</td>\n",
       "      <td>-0.065932</td>\n",
       "      <td>-0.108041</td>\n",
       "      <td>-0.088465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>618.4948471</td>\n",
       "      <td>496056.0166</td>\n",
       "      <td>4793738.186</td>\n",
       "      <td>4799.57373</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.024747</td>\n",
       "      <td>-0.042012</td>\n",
       "      <td>-0.076879</td>\n",
       "      <td>-0.085144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>644.3992303</td>\n",
       "      <td>496055.6558</td>\n",
       "      <td>4793714.011</td>\n",
       "      <td>4798.523438</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.082852</td>\n",
       "      <td>-0.010772</td>\n",
       "      <td>-0.062950</td>\n",
       "      <td>-0.060294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>510</th>\n",
       "      <td>655.644581</td>\n",
       "      <td>496059.0235</td>\n",
       "      <td>4793703.366</td>\n",
       "      <td>4798.392578</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.122278</td>\n",
       "      <td>-0.056951</td>\n",
       "      <td>-0.042827</td>\n",
       "      <td>-0.048614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>519</th>\n",
       "      <td>667.6914888</td>\n",
       "      <td>496058.7228</td>\n",
       "      <td>4793691.639</td>\n",
       "      <td>4797.572266</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.059703</td>\n",
       "      <td>-0.052868</td>\n",
       "      <td>-0.072940</td>\n",
       "      <td>-0.066691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>685.5618637</td>\n",
       "      <td>496065.0373</td>\n",
       "      <td>4793675.402</td>\n",
       "      <td>4796.227051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.131310</td>\n",
       "      <td>-0.096208</td>\n",
       "      <td>-0.094837</td>\n",
       "      <td>-0.085444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>688.3098662</td>\n",
       "      <td>496066.1198</td>\n",
       "      <td>4793672.876</td>\n",
       "      <td>4795.866211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.052253</td>\n",
       "      <td>-0.093697</td>\n",
       "      <td>-0.091806</td>\n",
       "      <td>-0.085557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.181679</td>\n",
       "      <td>-0.116970</td>\n",
       "      <td>-0.039087</td>\n",
       "      <td>-0.088570</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft  has headcut  \\\n",
       "45   52.12513114    495991.84   4794222.64  4865.419922          1.0   \n",
       "146  180.2097651  495921.3815  4794118.299  4845.866211          1.0   \n",
       "192  236.9627192  495907.0346  4794064.529  4838.484375          1.0   \n",
       "231  279.0916947  495909.4258  4794023.443  4834.973633          1.0   \n",
       "236  285.3730026  495911.7753  4794017.621   4834.15332          1.0   \n",
       "257  316.9558364   495927.536  4793990.882  4830.610352          1.0   \n",
       "258  318.5366146  495928.4509  4793989.593  4830.511719          1.0   \n",
       "288  361.7876491  495955.1901  4793958.113  4827.001465          1.0   \n",
       "337  426.9348608  495976.5232  4793900.352  4816.568359          1.0   \n",
       "451  579.0827996  496037.3256  4793769.326  4803.510742          1.0   \n",
       "464  594.6758997  496039.8694  4793754.063  4802.362305          1.0   \n",
       "468  599.6474252  496040.8617  4793749.192  4802.165527          1.0   \n",
       "480  618.4948471  496056.0166  4793738.186   4799.57373          1.0   \n",
       "501  644.3992303  496055.6558  4793714.011  4798.523438          1.0   \n",
       "510   655.644581  496059.0235  4793703.366  4798.392578          1.0   \n",
       "519  667.6914888  496058.7228  4793691.639  4797.572266          1.0   \n",
       "532  685.5618637  496065.0373  4793675.402  4796.227051          1.0   \n",
       "534  688.3098662  496066.1198  4793672.876  4795.866211          1.0   \n",
       "0            NaN          NaN          NaN          NaN          1.0   \n",
       "\n",
       "     Slope at Point  Avg Slope 10m  Avg Slope 20m  Avg Slope 30m  \n",
       "45        -0.402471      -0.222721      -0.214954      -0.209200  \n",
       "146       -0.549902      -0.204838      -0.179259      -0.154808  \n",
       "192       -0.120460      -0.070009      -0.085264      -0.083507  \n",
       "231       -0.026797      -0.258761      -0.196194      -0.152797  \n",
       "236       -0.453272      -0.216612      -0.187378      -0.132694  \n",
       "257       -0.747197      -0.109701      -0.087511      -0.081186  \n",
       "258       -0.770239      -0.145904      -0.078841      -0.080090  \n",
       "288       -1.875272      -0.387115      -0.206682      -0.163252  \n",
       "337       -0.163264      -0.094457      -0.107954      -0.110142  \n",
       "451       -0.046687      -0.075034      -0.088531      -0.070030  \n",
       "464        0.000000      -0.036627      -0.080249      -0.100532  \n",
       "468       -0.075820      -0.065932      -0.108041      -0.088465  \n",
       "480        0.024747      -0.042012      -0.076879      -0.085144  \n",
       "501       -0.082852      -0.010772      -0.062950      -0.060294  \n",
       "510       -0.122278      -0.056951      -0.042827      -0.048614  \n",
       "519       -0.059703      -0.052868      -0.072940      -0.066691  \n",
       "532       -0.131310      -0.096208      -0.094837      -0.085444  \n",
       "534       -0.052253      -0.093697      -0.091806      -0.085557  \n",
       "0         -0.181679      -0.116970      -0.039087      -0.088570  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_slope('Slope at Point', 1) # Slope at point\n",
    "avg_slope('Avg Slope 10m', 5) # Slope at point\n",
    "avg_slope('Avg Slope 20m', 10) # Slope at point\n",
    "avg_slope('Avg Slope 30m', 15) # Slope at point\n",
    "\n",
    "    \n",
    "headcut_rows = stream_profile_df[stream_profile_df['has headcut'] == 1]\n",
    "headcut_rows\n",
    "\n",
    "headcut_rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6747581d",
   "metadata": {
    "papermill": {
     "duration": 0.02293,
     "end_time": "2024-04-25T03:15:29.314028",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.291098",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Before we can convert this dataframe into a tensor, we need to make sure that all columns contain floats to allow the tensor to perform operations on them. We can use the `.dtypes` function to check what our datatypes are for various columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9ffe0ff0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:29.361795Z",
     "iopub.status.busy": "2024-04-25T03:15:29.361227Z",
     "iopub.status.idle": "2024-04-25T03:15:29.375923Z",
     "shell.execute_reply": "2024-04-25T03:15:29.375207Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.040941,
     "end_time": "2024-04-25T03:15:29.377928",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.336987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "stream_profile_df = stream_profile_df.fillna(stream_profile_df.mode().iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "74cd97fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:29.428655Z",
     "iopub.status.busy": "2024-04-25T03:15:29.428377Z",
     "iopub.status.idle": "2024-04-25T03:15:29.435091Z",
     "shell.execute_reply": "2024-04-25T03:15:29.434318Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.033287,
     "end_time": "2024-04-25T03:15:29.436985",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.403698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dist M             object\n",
       "X                  object\n",
       "Y                  object\n",
       "Elev ft            object\n",
       "has headcut       float64\n",
       "Slope at Point    float64\n",
       "Avg Slope 10m     float64\n",
       "Avg Slope 20m     float64\n",
       "Avg Slope 30m     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ad30d3e",
   "metadata": {
    "papermill": {
     "duration": 0.023633,
     "end_time": "2024-04-25T03:15:29.483691",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.460058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see the columns `Dist M, X, Y, Elev ft` are all objects. We can use `.astype(float)` to convert these to floats instead\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "73eda74a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:29.535851Z",
     "iopub.status.busy": "2024-04-25T03:15:29.535472Z",
     "iopub.status.idle": "2024-04-25T03:15:29.548037Z",
     "shell.execute_reply": "2024-04-25T03:15:29.547105Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.041217,
     "end_time": "2024-04-25T03:15:29.550145",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.508928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dist M            float64\n",
       "X                 float64\n",
       "Y                 float64\n",
       "Elev ft           float64\n",
       "has headcut       float64\n",
       "Slope at Point    float64\n",
       "Avg Slope 10m     float64\n",
       "Avg Slope 20m     float64\n",
       "Avg Slope 30m     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df['Dist M'] = stream_profile_df['Dist M'].astype(float)\n",
    "stream_profile_df['X'] = stream_profile_df['X'].astype(float)\n",
    "stream_profile_df['Y'] = stream_profile_df['Y'].astype(float)\n",
    "stream_profile_df['Elev ft'] = stream_profile_df['Elev ft'].astype(float)\n",
    "stream_profile_df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c92fd209",
   "metadata": {
    "papermill": {
     "duration": 0.02566,
     "end_time": "2024-04-25T03:15:29.603289",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.577629",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Buidling a Linear Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1ae80d6",
   "metadata": {
    "papermill": {
     "duration": 0.024498,
     "end_time": "2024-04-25T03:15:29.652420",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.627922",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we have our cleaned up data and several average slope columns. Let's try making a linear model and see what kind of predictive accuracy we can achieve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "64270052",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:29.710070Z",
     "iopub.status.busy": "2024-04-25T03:15:29.709655Z",
     "iopub.status.idle": "2024-04-25T03:15:33.293775Z",
     "shell.execute_reply": "2024-04-25T03:15:33.292974Z"
    },
    "papermill": {
     "duration": 3.615606,
     "end_time": "2024-04-25T03:15:33.296045",
     "exception": false,
     "start_time": "2024-04-25T03:15:29.680439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import tensor\n",
    "t_dep = tensor(stream_profile_df['has headcut'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6db1c02c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.345644Z",
     "iopub.status.busy": "2024-04-25T03:15:33.345184Z",
     "iopub.status.idle": "2024-04-25T03:15:33.421610Z",
     "shell.execute_reply": "2024-04-25T03:15:33.420766Z"
    },
    "papermill": {
     "duration": 0.103423,
     "end_time": "2024-04-25T03:15:33.423611",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.320188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0000e+00,  4.9600e+05,  4.7943e+06,  ..., -9.9039e-02,\n",
       "         -6.1472e-02, -1.0333e-01],\n",
       "        [ 1.2632e+00,  4.9600e+05,  4.7943e+06,  ..., -1.0935e-01,\n",
       "         -6.8616e-02, -1.0964e-01],\n",
       "        [ 2.5263e+00,  4.9600e+05,  4.7943e+06,  ..., -8.9594e-02,\n",
       "         -7.6940e-02, -1.2014e-01],\n",
       "        ...,\n",
       "        [ 7.4154e+02,  4.9608e+05,  4.7936e+06,  ...,  0.0000e+00,\n",
       "          0.0000e+00,  0.0000e+00],\n",
       "        [ 7.4258e+02,  4.9608e+05,  4.7936e+06,  ...,  0.0000e+00,\n",
       "          0.0000e+00,  0.0000e+00],\n",
       "        [ 6.9706e+02,  4.9590e+05,  4.7937e+06,  ..., -1.1697e-01,\n",
       "         -3.9087e-02, -8.8570e-02]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indep_columns = ['Dist M', 'X', 'Y', 'Elev ft',\t'Slope at Point','Avg Slope 10m','Avg Slope 20m','Avg Slope 30m']\n",
    "t_indep = tensor(stream_profile_df[indep_columns].values, dtype=torch.float)\n",
    "t_indep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "868a6a24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.472483Z",
     "iopub.status.busy": "2024-04-25T03:15:33.472207Z",
     "iopub.status.idle": "2024-04-25T03:15:33.477705Z",
     "shell.execute_reply": "2024-04-25T03:15:33.476845Z"
    },
    "papermill": {
     "duration": 0.031908,
     "end_time": "2024-04-25T03:15:33.479543",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.447635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([584, 8])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "857e7654",
   "metadata": {
    "papermill": {
     "duration": 0.023369,
     "end_time": "2024-04-25T03:15:33.526635",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.503266",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Creating a Linear Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e4c8ff35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.575283Z",
     "iopub.status.busy": "2024-04-25T03:15:33.574985Z",
     "iopub.status.idle": "2024-04-25T03:15:33.588678Z",
     "shell.execute_reply": "2024-04-25T03:15:33.587869Z"
    },
    "papermill": {
     "duration": 0.040287,
     "end_time": "2024-04-25T03:15:33.590528",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.550241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0.4847, -0.4148,  0.0334, -0.2804, -0.2383,  0.2972, -0.2912, -0.0455])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.manual_seed(27)\n",
    "n_coeff = t_indep.shape[1]\n",
    "coeffs = torch.rand(n_coeff)-0.5\n",
    "coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "43af410b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.639574Z",
     "iopub.status.busy": "2024-04-25T03:15:33.639279Z",
     "iopub.status.idle": "2024-04-25T03:15:33.647466Z",
     "shell.execute_reply": "2024-04-25T03:15:33.646649Z"
    },
    "papermill": {
     "duration": 0.034918,
     "end_time": "2024-04-25T03:15:33.649316",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.614398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0000e+00, -2.0575e+05,  1.6030e+05,  ..., -2.9431e-02,\n",
       "          1.7900e-02,  4.6986e-03],\n",
       "        [ 6.1224e-01, -2.0575e+05,  1.6030e+05,  ..., -3.2494e-02,\n",
       "          1.9980e-02,  4.9852e-03],\n",
       "        [ 1.2245e+00, -2.0575e+05,  1.6030e+05,  ..., -2.6624e-02,\n",
       "          2.2403e-02,  5.4627e-03],\n",
       "        ...,\n",
       "        [ 3.5941e+02, -2.0578e+05,  1.6028e+05,  ...,  0.0000e+00,\n",
       "         -0.0000e+00, -0.0000e+00],\n",
       "        [ 3.5992e+02, -2.0578e+05,  1.6028e+05,  ...,  0.0000e+00,\n",
       "         -0.0000e+00, -0.0000e+00],\n",
       "        [ 3.3785e+02, -2.0571e+05,  1.6028e+05,  ..., -3.4759e-02,\n",
       "          1.1381e-02,  4.0272e-03]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep*coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9bdc5137",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.699007Z",
     "iopub.status.busy": "2024-04-25T03:15:33.698692Z",
     "iopub.status.idle": "2024-04-25T03:15:33.710422Z",
     "shell.execute_reply": "2024-04-25T03:15:33.709707Z"
    },
    "papermill": {
     "duration": 0.03898,
     "end_time": "2024-04-25T03:15:33.712360",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.673380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "t_indep[t_indep == 0] = 1e-6\n",
    "\n",
    "vals,indices = t_indep.max(dim=0)\n",
    "t_indep = t_indep / vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2d0d408e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.763019Z",
     "iopub.status.busy": "2024-04-25T03:15:33.762242Z",
     "iopub.status.idle": "2024-04-25T03:15:33.769807Z",
     "shell.execute_reply": "2024-04-25T03:15:33.768981Z"
    },
    "papermill": {
     "duration": 0.034399,
     "end_time": "2024-04-25T03:15:33.771615",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.737216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 6.5270e-10, -4.1475e-01,  3.3436e-02,  ..., -5.2885e-01,\n",
       "          1.7900e+04,  4.6986e+03],\n",
       "        [ 8.2447e-04, -4.1475e-01,  3.3436e-02,  ..., -5.8390e-01,\n",
       "          1.9980e+04,  4.9852e+03],\n",
       "        [ 1.6489e-03, -4.1475e-01,  3.3436e-02,  ..., -4.7842e-01,\n",
       "          2.2403e+04,  5.4627e+03],\n",
       "        ...,\n",
       "        [ 4.8400e-01, -4.1481e-01,  3.3432e-02,  ...,  5.3398e-06,\n",
       "         -2.9118e-01, -4.5470e-02],\n",
       "        [ 4.8468e-01, -4.1481e-01,  3.3432e-02,  ...,  5.3398e-06,\n",
       "         -2.9118e-01, -4.5470e-02],\n",
       "        [ 4.5497e-01, -4.1467e-01,  3.3432e-02,  ..., -6.2460e-01,\n",
       "          1.1381e+04,  4.0272e+03]])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep*coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7ff5b478",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.821953Z",
     "iopub.status.busy": "2024-04-25T03:15:33.821653Z",
     "iopub.status.idle": "2024-04-25T03:15:33.827049Z",
     "shell.execute_reply": "2024-04-25T03:15:33.826373Z"
    },
    "papermill": {
     "duration": 0.032844,
     "end_time": "2024-04-25T03:15:33.828892",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.796048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preds = (t_indep*coeffs).sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7f417aa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.879590Z",
     "iopub.status.busy": "2024-04-25T03:15:33.878835Z",
     "iopub.status.idle": "2024-04-25T03:15:33.885093Z",
     "shell.execute_reply": "2024-04-25T03:15:33.884244Z"
    },
    "papermill": {
     "duration": 0.034979,
     "end_time": "2024-04-25T03:15:33.888504",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.853525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([22597.0605, 24963.7715, 27865.0898, 28329.3262, 31669.1035, 35702.6016,\n",
       "        37892.0352, 40865.1914, 41798.7656, 43442.7734])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "36e1dd8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.939906Z",
     "iopub.status.busy": "2024-04-25T03:15:33.939138Z",
     "iopub.status.idle": "2024-04-25T03:15:33.944749Z",
     "shell.execute_reply": "2024-04-25T03:15:33.943997Z"
    },
    "papermill": {
     "duration": 0.033406,
     "end_time": "2024-04-25T03:15:33.946656",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.913250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([584]), torch.Size([584]))"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_dep.shape, preds.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "10aca1cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:33.998011Z",
     "iopub.status.busy": "2024-04-25T03:15:33.997455Z",
     "iopub.status.idle": "2024-04-25T03:15:34.005093Z",
     "shell.execute_reply": "2024-04-25T03:15:34.004258Z"
    },
    "papermill": {
     "duration": 0.035389,
     "end_time": "2024-04-25T03:15:34.006932",
     "exception": false,
     "start_time": "2024-04-25T03:15:33.971543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(35455.6116, dtype=torch.float64)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = torch.abs(preds-t_dep).mean()\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "72f0f142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:34.058418Z",
     "iopub.status.busy": "2024-04-25T03:15:34.057841Z",
     "iopub.status.idle": "2024-04-25T03:15:34.062687Z",
     "shell.execute_reply": "2024-04-25T03:15:34.061808Z"
    },
    "papermill": {
     "duration": 0.032807,
     "end_time": "2024-04-25T03:15:34.064542",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.031735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_preds(coeffs, indeps): return (indeps*coeffs).sum(axis=1)\n",
    "def calc_loss(coeffs, indeps, deps): return torch.abs(calc_preds(coeffs, indeps)-deps).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d7015e4",
   "metadata": {
    "papermill": {
     "duration": 0.025101,
     "end_time": "2024-04-25T03:15:34.115031",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.089930",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Doing a gradient descent step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d1a9de71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:34.167853Z",
     "iopub.status.busy": "2024-04-25T03:15:34.167168Z",
     "iopub.status.idle": "2024-04-25T03:15:34.173742Z",
     "shell.execute_reply": "2024-04-25T03:15:34.172954Z"
    },
    "papermill": {
     "duration": 0.034697,
     "end_time": "2024-04-25T03:15:34.175522",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.140825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0.4847, -0.4148,  0.0334, -0.2804, -0.2383,  0.2972, -0.2912, -0.0455],\n",
       "       requires_grad=True)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coeffs.requires_grad_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c0ae69ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:34.227553Z",
     "iopub.status.busy": "2024-04-25T03:15:34.227234Z",
     "iopub.status.idle": "2024-04-25T03:15:34.235709Z",
     "shell.execute_reply": "2024-04-25T03:15:34.234874Z"
    },
    "papermill": {
     "duration": 0.036865,
     "end_time": "2024-04-25T03:15:34.237578",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.200713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(35455.6116, dtype=torch.float64, grad_fn=<MeanBackward0>)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "315be8e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:34.291100Z",
     "iopub.status.busy": "2024-04-25T03:15:34.290299Z",
     "iopub.status.idle": "2024-04-25T03:15:34.294414Z",
     "shell.execute_reply": "2024-04-25T03:15:34.293597Z"
    },
    "papermill": {
     "duration": 0.032718,
     "end_time": "2024-04-25T03:15:34.296359",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.263641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "coeffs.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "fb799b3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:34.349315Z",
     "iopub.status.busy": "2024-04-25T03:15:34.348553Z",
     "iopub.status.idle": "2024-04-25T03:15:34.411424Z",
     "shell.execute_reply": "2024-04-25T03:15:34.410538Z"
    },
    "papermill": {
     "duration": 0.091531,
     "end_time": "2024-04-25T03:15:34.413524",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.321993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 4.6219e-01,  9.6213e-01,  9.6227e-01,  9.5337e-01, -3.0024e-01,\n",
       "        -1.8880e+00, -1.0529e+05, -1.0555e+05])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss.backward()\n",
    "coeffs.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "93953bf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:34.466741Z",
     "iopub.status.busy": "2024-04-25T03:15:34.466427Z",
     "iopub.status.idle": "2024-04-25T03:15:34.478934Z",
     "shell.execute_reply": "2024-04-25T03:15:34.477936Z"
    },
    "papermill": {
     "duration": 0.040993,
     "end_time": "2024-04-25T03:15:34.480812",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.439819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(4.4452e+09, dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss.backward()\n",
    "with torch.no_grad():\n",
    "    coeffs.sub_(coeffs.grad * 0.1)\n",
    "    coeffs.grad.zero_()\n",
    "    print(calc_loss(coeffs, t_indep, t_dep))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a84c5c67",
   "metadata": {
    "papermill": {
     "duration": 0.025659,
     "end_time": "2024-04-25T03:15:34.532473",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.506814",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Training a Linear Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c0972eee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:34.585372Z",
     "iopub.status.busy": "2024-04-25T03:15:34.585053Z",
     "iopub.status.idle": "2024-04-25T03:15:37.409627Z",
     "shell.execute_reply": "2024-04-25T03:15:37.408282Z"
    },
    "papermill": {
     "duration": 2.853952,
     "end_time": "2024-04-25T03:15:37.412190",
     "exception": false,
     "start_time": "2024-04-25T03:15:34.558238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "from fastai.data.transforms import RandomSplitter\n",
    "trn_split, val_split = RandomSplitter(seed=27)(stream_profile_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7749f2e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.466990Z",
     "iopub.status.busy": "2024-04-25T03:15:37.466519Z",
     "iopub.status.idle": "2024-04-25T03:15:37.477168Z",
     "shell.execute_reply": "2024-04-25T03:15:37.476007Z"
    },
    "papermill": {
     "duration": 0.040143,
     "end_time": "2024-04-25T03:15:37.479371",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.439228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(468, 116)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trn_indep, val_indep = t_indep[trn_split], t_indep[val_split]\n",
    "trn_dep, val_dep = t_dep[trn_split], t_dep[val_split]\n",
    "len(trn_indep), len(val_indep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "04fefa06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.533106Z",
     "iopub.status.busy": "2024-04-25T03:15:37.532759Z",
     "iopub.status.idle": "2024-04-25T03:15:37.537090Z",
     "shell.execute_reply": "2024-04-25T03:15:37.536224Z"
    },
    "papermill": {
     "duration": 0.033465,
     "end_time": "2024-04-25T03:15:37.539037",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.505572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def update_coeffs(coeffs, lr):\n",
    "    coeffs.sub_(coeffs * lr)\n",
    "    coeffs.grad.zero_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "923b4fa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.592595Z",
     "iopub.status.busy": "2024-04-25T03:15:37.592296Z",
     "iopub.status.idle": "2024-04-25T03:15:37.597190Z",
     "shell.execute_reply": "2024-04-25T03:15:37.596357Z"
    },
    "papermill": {
     "duration": 0.033976,
     "end_time": "2024-04-25T03:15:37.599073",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.565097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def one_epoch(coeffs, lr):\n",
    "    loss = calc_loss(coeffs, trn_indep, trn_dep)\n",
    "    loss.backward()\n",
    "    with torch.no_grad(): update_coeffs(coeffs, lr)\n",
    "    print(f\"{loss:3f}\", end=\"; \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3e6c4a00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.653306Z",
     "iopub.status.busy": "2024-04-25T03:15:37.652984Z",
     "iopub.status.idle": "2024-04-25T03:15:37.657554Z",
     "shell.execute_reply": "2024-04-25T03:15:37.656635Z"
    },
    "papermill": {
     "duration": 0.034452,
     "end_time": "2024-04-25T03:15:37.659543",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.625091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def init_coeffs(): return (torch.rand(n_coeff)-0.5).requires_grad_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "589d701a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.715148Z",
     "iopub.status.busy": "2024-04-25T03:15:37.714802Z",
     "iopub.status.idle": "2024-04-25T03:15:37.719637Z",
     "shell.execute_reply": "2024-04-25T03:15:37.718650Z"
    },
    "papermill": {
     "duration": 0.035315,
     "end_time": "2024-04-25T03:15:37.721702",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.686387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(epochs=30, lr = 0.01):\n",
    "    torch.manual_seed(27)\n",
    "    coeffs = init_coeffs()\n",
    "    for i in range(epochs): one_epoch(coeffs, lr=lr)\n",
    "    return coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c9d18b4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.776529Z",
     "iopub.status.busy": "2024-04-25T03:15:37.776202Z",
     "iopub.status.idle": "2024-04-25T03:15:37.788201Z",
     "shell.execute_reply": "2024-04-25T03:15:37.787208Z"
    },
    "papermill": {
     "duration": 0.041731,
     "end_time": "2024-04-25T03:15:37.790111",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.748380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35864.836165; 28691.862243; 22953.483318; 18362.780271; 14690.217573; 11752.167531; 9401.727925; 7521.375960; 6017.094183; 4813.668772; 3850.928606; 3080.736527; 2464.582817; 1971.659922; 1577.321480; 1261.850797; 1009.474271; 807.572983; "
     ]
    }
   ],
   "source": [
    "coeffs = train_model(18, lr=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "971c615c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.844604Z",
     "iopub.status.busy": "2024-04-25T03:15:37.844330Z",
     "iopub.status.idle": "2024-04-25T03:15:37.848669Z",
     "shell.execute_reply": "2024-04-25T03:15:37.847861Z"
    },
    "papermill": {
     "duration": 0.033693,
     "end_time": "2024-04-25T03:15:37.850446",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.816753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preds = calc_preds(coeffs, val_indep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "156145b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.905347Z",
     "iopub.status.busy": "2024-04-25T03:15:37.905052Z",
     "iopub.status.idle": "2024-04-25T03:15:37.911859Z",
     "shell.execute_reply": "2024-04-25T03:15:37.911010Z"
    },
    "papermill": {
     "duration": 0.036575,
     "end_time": "2024-04-25T03:15:37.913749",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.877174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([False,  True, False, False, False, False, False, False, False, False,\n",
       "        False, False, False,  True, False, False])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = val_dep.bool()==(preds>0.5)\n",
    "results[:16]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c51c71f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:37.969201Z",
     "iopub.status.busy": "2024-04-25T03:15:37.968877Z",
     "iopub.status.idle": "2024-04-25T03:15:37.975547Z",
     "shell.execute_reply": "2024-04-25T03:15:37.974673Z"
    },
    "papermill": {
     "duration": 0.036376,
     "end_time": "2024-04-25T03:15:37.977484",
     "exception": false,
     "start_time": "2024-04-25T03:15:37.941108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.0517)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a5371f3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:38.033343Z",
     "iopub.status.busy": "2024-04-25T03:15:38.033006Z",
     "iopub.status.idle": "2024-04-25T03:15:38.040424Z",
     "shell.execute_reply": "2024-04-25T03:15:38.039611Z"
    },
    "papermill": {
     "duration": 0.037962,
     "end_time": "2024-04-25T03:15:38.042365",
     "exception": false,
     "start_time": "2024-04-25T03:15:38.004403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def acc(coeffs): return (val_dep.bool()==calc_preds(coeffs, val_indep)).float().mean()\n",
    "acc(coeffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "42c19af2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:38.098060Z",
     "iopub.status.busy": "2024-04-25T03:15:38.097742Z",
     "iopub.status.idle": "2024-04-25T03:15:38.104669Z",
     "shell.execute_reply": "2024-04-25T03:15:38.103796Z"
    },
    "papermill": {
     "duration": 0.036992,
     "end_time": "2024-04-25T03:15:38.106607",
     "exception": false,
     "start_time": "2024-04-25T03:15:38.069615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 228.4556,  437.2232, 1029.4365,  939.1874,  579.8965,  588.3231,\n",
       "         579.2625, 1032.9220,  661.7859, 1306.5138,  757.3552,  428.8132,\n",
       "         746.0136,  479.1485,  756.1600,  646.9604,  374.7926,  459.0062,\n",
       "         797.0262,  123.1197,  256.8824, 1093.0975, 1286.4025,  776.6594,\n",
       "         303.5705,  411.5506,  329.6645,  449.9842], grad_fn=<SliceBackward0>)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:28]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "aa340a16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:38.162601Z",
     "iopub.status.busy": "2024-04-25T03:15:38.162263Z",
     "iopub.status.idle": "2024-04-25T03:15:38.166748Z",
     "shell.execute_reply": "2024-04-25T03:15:38.165892Z"
    },
    "papermill": {
     "duration": 0.03494,
     "end_time": "2024-04-25T03:15:38.168705",
     "exception": false,
     "start_time": "2024-04-25T03:15:38.133765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_preds(coeffs, indeps): return torch.sigmoid((indeps*coeffs).sum(axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "3cdb3836",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:38.225241Z",
     "iopub.status.busy": "2024-04-25T03:15:38.224863Z",
     "iopub.status.idle": "2024-04-25T03:15:38.245451Z",
     "shell.execute_reply": "2024-04-25T03:15:38.244479Z"
    },
    "papermill": {
     "duration": 0.051458,
     "end_time": "2024-04-25T03:15:38.247396",
     "exception": false,
     "start_time": "2024-04-25T03:15:38.195938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.955704; 0.956338; 0.956827; 0.957199; 0.957481; 0.957693; 0.957853; 0.957973; 0.958063; 0.958131; 0.958181; 0.958219; 0.958248; 0.958269; 0.958285; 0.958297; 0.958306; 0.958313; 0.958318; 0.958322; 0.958325; 0.958327; 0.958328; 0.958328; 0.958316; 0.958254; 0.958050; 0.957526; 0.956304; 0.953451; "
     ]
    }
   ],
   "source": [
    "coeffs = train_model(lr=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "1e8a26aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:15:38.303955Z",
     "iopub.status.busy": "2024-04-25T03:15:38.303631Z",
     "iopub.status.idle": "2024-04-25T03:15:38.310031Z",
     "shell.execute_reply": "2024-04-25T03:15:38.309138Z"
    },
    "papermill": {
     "duration": 0.036827,
     "end_time": "2024-04-25T03:15:38.311940",
     "exception": false,
     "start_time": "2024-04-25T03:15:38.275113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc(coeffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c16d6bf7",
   "metadata": {
    "papermill": {
     "duration": 0.029348,
     "end_time": "2024-04-25T03:15:38.369618",
     "exception": false,
     "start_time": "2024-04-25T03:15:38.340270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a663c8e",
   "metadata": {
    "papermill": {
     "duration": 0.028749,
     "end_time": "2024-04-25T03:15:38.428455",
     "exception": false,
     "start_time": "2024-04-25T03:15:38.399706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 4638965,
     "sourceId": 7899275,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4778935,
     "sourceId": 8094226,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30683,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.83436,
   "end_time": "2024-04-25T03:15:39.778335",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-25T03:15:17.943975",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
