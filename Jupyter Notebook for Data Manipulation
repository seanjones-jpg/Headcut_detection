{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4c930ccc",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:20.565048Z",
     "iopub.status.busy": "2024-04-23T21:41:20.564257Z",
     "iopub.status.idle": "2024-04-23T21:41:21.325268Z",
     "shell.execute_reply": "2024-04-23T21:41:21.324259Z"
    },
    "papermill": {
     "duration": 0.78408,
     "end_time": "2024-04-23T21:41:21.328047",
     "exception": false,
     "start_time": "2024-04-23T21:41:20.543967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/riehle-1/Riehle_1_Project_Structures.csv\n",
      "/kaggle/input/riehle-1/Riehle_1_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Long_Pro.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ad3f6df5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:21.365822Z",
     "iopub.status.busy": "2024-04-23T21:41:21.365382Z",
     "iopub.status.idle": "2024-04-23T21:41:21.402725Z",
     "shell.execute_reply": "2024-04-23T21:41:21.401700Z"
    },
    "papermill": {
     "duration": 0.059794,
     "end_time": "2024-04-23T21:41:21.405684",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.345890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>495998.0819</td>\n",
       "      <td>4794269.644</td>\n",
       "      <td>4872.834961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.263171269</td>\n",
       "      <td>495998.744</td>\n",
       "      <td>4794268.568</td>\n",
       "      <td>4872.605469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.526342538</td>\n",
       "      <td>495999.406</td>\n",
       "      <td>4794267.492</td>\n",
       "      <td>4872.506836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.789513807</td>\n",
       "      <td>496000.068</td>\n",
       "      <td>4794266.416</td>\n",
       "      <td>4872.375488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.052685076</td>\n",
       "      <td>496000.73</td>\n",
       "      <td>4794265.34</td>\n",
       "      <td>4872.178711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>579</th>\n",
       "      <td>738.2102804</td>\n",
       "      <td>496079.3353</td>\n",
       "      <td>4793625.201</td>\n",
       "      <td>4793.208496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>580</th>\n",
       "      <td>739.468345</td>\n",
       "      <td>496079.651</td>\n",
       "      <td>4793623.984</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>581</th>\n",
       "      <td>740.5064947</td>\n",
       "      <td>496079.8314</td>\n",
       "      <td>4793622.961</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582</th>\n",
       "      <td>741.5446445</td>\n",
       "      <td>496080.0118</td>\n",
       "      <td>4793621.939</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>583</th>\n",
       "      <td>742.5827942</td>\n",
       "      <td>496080.1922</td>\n",
       "      <td>4793620.916</td>\n",
       "      <td>4793.110352</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>583 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft\n",
       "1              0  495998.0819  4794269.644  4872.834961\n",
       "2    1.263171269   495998.744  4794268.568  4872.605469\n",
       "3    2.526342538   495999.406  4794267.492  4872.506836\n",
       "4    3.789513807   496000.068  4794266.416  4872.375488\n",
       "5    5.052685076    496000.73   4794265.34  4872.178711\n",
       "..           ...          ...          ...          ...\n",
       "579  738.2102804  496079.3353  4793625.201  4793.208496\n",
       "580   739.468345   496079.651  4793623.984  4793.175781\n",
       "581  740.5064947  496079.8314  4793622.961  4793.175781\n",
       "582  741.5446445  496080.0118  4793621.939  4793.175781\n",
       "583  742.5827942  496080.1922  4793620.916  4793.110352\n",
       "\n",
       "[583 rows x 4 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df = pd.read_csv('/kaggle/input/riehle-1/Riehle_1_Long_Pro.csv')\n",
    "stream_profile_df = stream_profile_df.rename(stream_profile_df.iloc[0]).iloc[1:]\n",
    "stream_profile_df.columns = ['Dist M', 'X', 'Y', 'Elev ft']\n",
    "stream_profile_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3f4576ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:21.445028Z",
     "iopub.status.busy": "2024-04-23T21:41:21.444294Z",
     "iopub.status.idle": "2024-04-23T21:41:21.475759Z",
     "shell.execute_reply": "2024-04-23T21:41:21.474758Z"
    },
    "papermill": {
     "duration": 0.053372,
     "end_time": "2024-04-23T21:41:21.478156",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.424784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>ident</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Y</th>\n",
       "      <th>X</th>\n",
       "      <th>comment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-07</td>\n",
       "      <td>43.300586</td>\n",
       "      <td>-105.049715</td>\n",
       "      <td>4794195.671</td>\n",
       "      <td>495968.4718</td>\n",
       "      <td>ZB 12-4-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-04</td>\n",
       "      <td>43.299027</td>\n",
       "      <td>-105.050437</td>\n",
       "      <td>4794022.573</td>\n",
       "      <td>495909.8059</td>\n",
       "      <td>RRD 10-10-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-01</td>\n",
       "      <td>43.298433</td>\n",
       "      <td>-105.049843</td>\n",
       "      <td>4793956.578</td>\n",
       "      <td>495957.9471</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-09</td>\n",
       "      <td>43.301886</td>\n",
       "      <td>-105.049627</td>\n",
       "      <td>4794340.038</td>\n",
       "      <td>495975.6952</td>\n",
       "      <td>Mdw small chnl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-08</td>\n",
       "      <td>43.300821</td>\n",
       "      <td>-105.049454</td>\n",
       "      <td>4794221.757</td>\n",
       "      <td>495989.6569</td>\n",
       "      <td>10-15-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-06</td>\n",
       "      <td>43.299888</td>\n",
       "      <td>-105.050330</td>\n",
       "      <td>4794118.185</td>\n",
       "      <td>495918.5425</td>\n",
       "      <td>WF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-05</td>\n",
       "      <td>43.299390</td>\n",
       "      <td>-105.050454</td>\n",
       "      <td>4794062.887</td>\n",
       "      <td>495908.4514</td>\n",
       "      <td>15-8-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-02</td>\n",
       "      <td>43.298728</td>\n",
       "      <td>-105.050197</td>\n",
       "      <td>4793989.382</td>\n",
       "      <td>495929.2187</td>\n",
       "      <td>8-14-2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-03</td>\n",
       "      <td>43.298965</td>\n",
       "      <td>-105.050397</td>\n",
       "      <td>4794015.678</td>\n",
       "      <td>495913.0101</td>\n",
       "      <td>12.5-17-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-101</td>\n",
       "      <td>43.295872</td>\n",
       "      <td>-105.048572</td>\n",
       "      <td>4793672.122</td>\n",
       "      <td>496060.8806</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-102</td>\n",
       "      <td>43.296017</td>\n",
       "      <td>-105.048671</td>\n",
       "      <td>4793688.225</td>\n",
       "      <td>496052.8807</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-103</td>\n",
       "      <td>43.296140</td>\n",
       "      <td>-105.048585</td>\n",
       "      <td>4793701.847</td>\n",
       "      <td>496059.8165</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-104</td>\n",
       "      <td>43.296230</td>\n",
       "      <td>-105.048663</td>\n",
       "      <td>4793711.847</td>\n",
       "      <td>496053.5120</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-109</td>\n",
       "      <td>43.296734</td>\n",
       "      <td>-105.048855</td>\n",
       "      <td>4793767.847</td>\n",
       "      <td>496037.9898</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-108</td>\n",
       "      <td>43.296600</td>\n",
       "      <td>-105.048807</td>\n",
       "      <td>4793753.018</td>\n",
       "      <td>496041.8808</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-107</td>\n",
       "      <td>43.296550</td>\n",
       "      <td>-105.048807</td>\n",
       "      <td>4793747.398</td>\n",
       "      <td>496041.8808</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-106</td>\n",
       "      <td>43.296455</td>\n",
       "      <td>-105.048612</td>\n",
       "      <td>4793736.827</td>\n",
       "      <td>496057.7109</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-100</td>\n",
       "      <td>43.295859</td>\n",
       "      <td>-105.048531</td>\n",
       "      <td>4793670.706</td>\n",
       "      <td>496064.2344</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-105</td>\n",
       "      <td>43.296445</td>\n",
       "      <td>-105.048622</td>\n",
       "      <td>4793735.773</td>\n",
       "      <td>496056.8265</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>Riehle 1-110</td>\n",
       "      <td>43.297916</td>\n",
       "      <td>-105.049595</td>\n",
       "      <td>4793899.195</td>\n",
       "      <td>495978.0270</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-111</td>\n",
       "      <td>43.298726</td>\n",
       "      <td>-105.050188</td>\n",
       "      <td>4793989.098</td>\n",
       "      <td>495929.9958</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-112</td>\n",
       "      <td>43.299875</td>\n",
       "      <td>-105.050298</td>\n",
       "      <td>4794116.776</td>\n",
       "      <td>495921.0939</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        type         ident   Latitude   Longitude            Y            X  \\\n",
       "0   WAYPOINT   RIEHLE 1-07  43.300586 -105.049715  4794195.671  495968.4718   \n",
       "1   WAYPOINT   RIEHLE 1-04  43.299027 -105.050437  4794022.573  495909.8059   \n",
       "2   WAYPOINT   RIEHLE 1-01  43.298433 -105.049843  4793956.578  495957.9471   \n",
       "3   WAYPOINT   RIEHLE 1-09  43.301886 -105.049627  4794340.038  495975.6952   \n",
       "4   WAYPOINT   RIEHLE 1-08  43.300821 -105.049454  4794221.757  495989.6569   \n",
       "5   WAYPOINT   RIEHLE 1-06  43.299888 -105.050330  4794118.185  495918.5425   \n",
       "6   WAYPOINT   RIEHLE 1-05  43.299390 -105.050454  4794062.887  495908.4514   \n",
       "7   WAYPOINT   RIEHLE 1-02  43.298728 -105.050197  4793989.382  495929.2187   \n",
       "8   WAYPOINT   RIEHLE 1-03  43.298965 -105.050397  4794015.678  495913.0101   \n",
       "9   WAYPOINT  RIEHLE 1-101  43.295872 -105.048572  4793672.122  496060.8806   \n",
       "10  WAYPOINT  RIEHLE 1-102  43.296017 -105.048671  4793688.225  496052.8807   \n",
       "11  WAYPOINT  RIEHLE 1-103  43.296140 -105.048585  4793701.847  496059.8165   \n",
       "12  WAYPOINT  RIEHLE 1-104  43.296230 -105.048663  4793711.847  496053.5120   \n",
       "13  WAYPOINT  RIEHLE 1-109  43.296734 -105.048855  4793767.847  496037.9898   \n",
       "14  WAYPOINT  RIEHLE 1-108  43.296600 -105.048807  4793753.018  496041.8808   \n",
       "15  WAYPOINT  RIEHLE 1-107  43.296550 -105.048807  4793747.398  496041.8808   \n",
       "16  WAYPOINT  RIEHLE 1-106  43.296455 -105.048612  4793736.827  496057.7109   \n",
       "17  WAYPOINT  RIEHLE 1-100  43.295859 -105.048531  4793670.706  496064.2344   \n",
       "18  WAYPOINT  RIEHLE 1-105  43.296445 -105.048622  4793735.773  496056.8265   \n",
       "19  WAYPOINT  Riehle 1-110  43.297916 -105.049595  4793899.195  495978.0270   \n",
       "20  WAYPOINT  RIEHLE 1-111  43.298726 -105.050188  4793989.098  495929.9958   \n",
       "21  WAYPOINT  RIEHLE 1-112  43.299875 -105.050298  4794116.776  495921.0939   \n",
       "\n",
       "           comment  \n",
       "0        ZB 12-4-2  \n",
       "1      RRD 10-10-1  \n",
       "2              NaN  \n",
       "3   Mdw small chnl  \n",
       "4          10-15-1  \n",
       "5               WF  \n",
       "6           15-8-1  \n",
       "7         8-14-2.5  \n",
       "8        12.5-17-2  \n",
       "9              NaN  \n",
       "10             NaN  \n",
       "11             NaN  \n",
       "12             NaN  \n",
       "13             NaN  \n",
       "14             NaN  \n",
       "15             NaN  \n",
       "16             NaN  \n",
       "17             NaN  \n",
       "18             NaN  \n",
       "19             NaN  \n",
       "20             NaN  \n",
       "21             NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "structures_df = pd.read_csv('/kaggle/input/riehle-1/Riehle_1_Project_Structures.csv')\n",
    "structures_df = structures_df.rename(columns={'y_proj': 'Y', 'x_proj': 'X'})\n",
    "structures_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d4271fd",
   "metadata": {
    "papermill": {
     "duration": 0.019073,
     "end_time": "2024-04-23T21:41:21.516579",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.497506",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The structure data is not very useful in it's current form as the positions of the strutcure do not fall on the stream path. We will need to develop an algorythm to calculate the closest points along the stream path which would correspond to the strutcure locations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "359d6f0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:21.555513Z",
     "iopub.status.busy": "2024-04-23T21:41:21.555105Z",
     "iopub.status.idle": "2024-04-23T21:41:21.562263Z",
     "shell.execute_reply": "2024-04-23T21:41:21.561326Z"
    },
    "papermill": {
     "duration": 0.029405,
     "end_time": "2024-04-23T21:41:21.564380",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.534975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_closest_points (stream_path, structure_points):\n",
    "    closest_points = []\n",
    "    for x, y in structure_points:\n",
    "        min_distance = float('inf')\n",
    "        for x1, y1 in stream_path:\n",
    "            distance = ((x1 - x)**2 + (y1 - y)**2)**0.5\n",
    "            if distance < min_distance:\n",
    "                min_distance = distance\n",
    "                close_point_pair = [x1, y1]\n",
    "        closest_points.append(close_point_pair)\n",
    "    return closest_points"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7022f26c",
   "metadata": {
    "papermill": {
     "duration": 0.018506,
     "end_time": "2024-04-23T21:41:21.601305",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.582799",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This function takes the stream path and the structure points then performs the pythagorean theorem on to calculate the euclidian distance between the current structure and all points along the stream path. It finds the shortest distance and adds that point along the stream path to the closest points array. This array ends with a collection of the closest points to each structure."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3460b82c",
   "metadata": {
    "papermill": {
     "duration": 0.018354,
     "end_time": "2024-04-23T21:41:21.638438",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.620084",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Next I need to create a function that will create an array from each dataframe so we can feed the appropriate data structure into the `get_closest_points` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cf18462b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:21.673332Z",
     "iopub.status.busy": "2024-04-23T21:41:21.672974Z",
     "iopub.status.idle": "2024-04-23T21:41:21.680712Z",
     "shell.execute_reply": "2024-04-23T21:41:21.679783Z"
    },
    "papermill": {
     "duration": 0.027696,
     "end_time": "2024-04-23T21:41:21.682683",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.654987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " def zip_df_cols(dataframe):\n",
    "    array = []\n",
    "    for x,y in zip(dataframe['X'], dataframe['Y']):\n",
    "        array.append([float(x), float(y)])\n",
    "    return array\n",
    "\n",
    "structures_array = zip_df_cols(structures_df)\n",
    "stream_profile_array = zip_df_cols(stream_profile_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76e97822",
   "metadata": {
    "papermill": {
     "duration": 0.017491,
     "end_time": "2024-04-23T21:41:21.716870",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.699379",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we can find the closest points along the stream profile that correspond to the structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b556296e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:21.752103Z",
     "iopub.status.busy": "2024-04-23T21:41:21.751787Z",
     "iopub.status.idle": "2024-04-23T21:41:21.766834Z",
     "shell.execute_reply": "2024-04-23T21:41:21.765556Z"
    },
    "papermill": {
     "duration": 0.035675,
     "end_time": "2024-04-23T21:41:21.769367",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.733692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[495968.4379, 4794196.563], [495909.7792, 4794022.362], [495954.9406, 4793957.022], [495998.0819, 4794269.644], [495990.7051, 4794221.647], [495920.4458, 4794117.176], [495906.7227, 4794063.485], [495928.4509, 4793989.593], [495913.6466, 4794015.625], [496065.5786, 4793674.139], [496059.2641, 4793690.376], [496059.4445, 4793702.284], [496056.1369, 4793712.928], [496037.4699, 4793768.28], [496040.0949, 4793752.89], [496042.6659, 4793747.388], [496057.2795, 4793736.202], [496067.0219, 4793671.072], [496057.2795, 4793736.202], [495977.3133, 4793899.187], [495929.3658, 4793988.304], [495920.4458, 4794117.176]]\n"
     ]
    }
   ],
   "source": [
    "closest_profile_points = get_closest_points(stream_profile_array, structures_array)\n",
    "print(closest_profile_points)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c009bf17",
   "metadata": {
    "papermill": {
     "duration": 0.018872,
     "end_time": "2024-04-23T21:41:21.807481",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.788609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have an array of the closest points along the stream profile that correspond to our structures. We can note that the first structure falls out of the range of our stream profile so we can neglect this point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad926556",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:21.848382Z",
     "iopub.status.busy": "2024-04-23T21:41:21.847996Z",
     "iopub.status.idle": "2024-04-23T21:41:21.854587Z",
     "shell.execute_reply": "2024-04-23T21:41:21.853615Z"
    },
    "papermill": {
     "duration": 0.028798,
     "end_time": "2024-04-23T21:41:21.856783",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.827985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "closest_profile_points = closest_profile_points[1:]\n",
    "len(closest_profile_points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06315f43",
   "metadata": {
    "papermill": {
     "duration": 0.019588,
     "end_time": "2024-04-23T21:41:21.895385",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.875797",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's package this whole process as a function to allow us to repeat it for every section of stream."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6883fa6",
   "metadata": {
    "papermill": {
     "duration": 0.018115,
     "end_time": "2024-04-23T21:41:21.931657",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.913542",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Building a Data Processing Object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5f8a1355",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:21.970910Z",
     "iopub.status.busy": "2024-04-23T21:41:21.970604Z",
     "iopub.status.idle": "2024-04-23T21:41:22.015532Z",
     "shell.execute_reply": "2024-04-23T21:41:22.014675Z"
    },
    "papermill": {
     "duration": 0.067042,
     "end_time": "2024-04-23T21:41:22.017481",
     "exception": false,
     "start_time": "2024-04-23T21:41:21.950439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from typing import List, Tuple\n",
    "\n",
    "class New_Dataframe:\n",
    "    \n",
    "    class FinalDataFrame:\n",
    "        def __init__(self, final_df, stream_profiles):\n",
    "            self.final_df = final_df\n",
    "            self.stream_profiles = stream_profiles\n",
    "    \n",
    "    def split_profile_and_structures(self, data_list_array: List[str]) -> Tuple[List[str], List[str]]:\n",
    "        \"\"\"\n",
    "        Splits a list of strings into two lists: profile_list and structure_list.\n",
    "\n",
    "        Args:\n",
    "            data_list_array (List[str]): A list of strings to be split.\n",
    "\n",
    "        Returns:\n",
    "            Tuple[List[str], List[str]]: A tuple containing the profile_list and structure_list.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_list = []\n",
    "        structure_list = []\n",
    "        \n",
    "        for item in data_list_array:\n",
    "            if 'Long' in item:\n",
    "                profile_list.append(item)\n",
    "            else:\n",
    "                structure_list.append(item)\n",
    "        return profile_list, structure_list\n",
    "    \n",
    "    def pair_profile_and_structure(self,datalist: List[str]) -> List[List[List[str]]]:\n",
    "        \n",
    "        \"\"\"\n",
    "        Pairs profile and structure items from a list of strings.\n",
    "\n",
    "        Args:\n",
    "            datalist (List[str]): A list of strings containing profile and structure items.\n",
    "\n",
    "        Returns:\n",
    "            List[List[List[str]]]: A list of pairs of profile and structure items.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_list, structure_list = self.split_profile_and_structures(datalist)\n",
    "        profile_structure_pair_arr = []\n",
    "        \n",
    "        for stream_profile in profile_list:\n",
    "            profile_structure_pair = [stream_profile]\n",
    "            search_pattern = r'([\\w]+)_(\\d+)([A-Z]?)(?=_)'\n",
    "            match = re.search(search_pattern, stream_profile)\n",
    "            \n",
    "            if match:\n",
    "                stream_name = match.group(1)\n",
    "                stream_section = match.group(2)\n",
    "                stream_section_letter = match.group(3)\n",
    "            \n",
    "            for structure in structure_list:\n",
    "                structure_match = re.search(search_pattern, structure)\n",
    "                if structure_match and structure_match.group(1) == stream_name and structure_match.group(2) == stream_section and structure_match.group(3) == stream_section_letter:\n",
    "                    profile_structure_pair.append(structure)\n",
    "                    profile_structure_pair_arr.append(profile_structure_pair)\n",
    "                    break\n",
    "            \n",
    "        return profile_structure_pair_arr\n",
    "  \n",
    "    def get_closest_points(self, stream_path_df: pd.DataFrame, structure_df: pd.DataFrame) -> List[List[float]]:\n",
    "        \"\"\"\n",
    "        Finds the closest points between the stream_path_df and structure_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            structure_df (pd.DataFrame): The DataFrame containing the structure data.\n",
    "\n",
    "        Returns:\n",
    "            List[List[float]]: A list of closest points, where each point is a list of [x, y] coordinates.\n",
    "        \"\"\"\n",
    "        closest_points = []\n",
    "        for i in range(len(structure_df['x_proj'])):\n",
    "            structure_x = structure_df['x_proj'].iloc[i]\n",
    "            structure_y = structure_df['y_proj'].iloc[i]\n",
    "\n",
    "            min_dist = float('inf')\n",
    "\n",
    "            for j in range(len(stream_path_df['X'])):\n",
    "                stream_path_x = stream_path_df['X'].iloc[j]\n",
    "                stream_path_y = stream_path_df['Y'].iloc[j]\n",
    "                dist = ((structure_x - stream_path_x)**2 + (structure_y - stream_path_y)**2)**0.5\n",
    "                \n",
    "                if dist < min_dist:\n",
    "                    min_dist = dist\n",
    "                    closest_point = [stream_path_x, stream_path_y]\n",
    "                    \n",
    "            closest_points.append(closest_point)\n",
    "        return closest_points\n",
    "    \n",
    "    def create_headcut_bools(self, stream_path_df: pd.DataFrame, closest_points: List[List[float]]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Adds a 'has headcut' column to the stream_path_df based on the closest points.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            closest_points (List[List[float]]): A list of closest points, where each point is a list of [x, y] coordinates.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the 'has headcut' column added.\n",
    "        \"\"\"\n",
    "        for i in range(len(stream_path_df)):\n",
    "            x_val, y_val = stream_path_df['X'].iloc[i], stream_path_df['Y'].iloc[i]\n",
    "            has_headcut_bool = False\n",
    "            for j in range(len(closest_points)):\n",
    "                if closest_points[j][0] == x_val and closest_points[j][1] == y_val:\n",
    "                    has_headcut_bool = True\n",
    "                    break\n",
    "            stream_path_df.at[i, 'has headcut'] = 1 if has_headcut_bool else 0\n",
    "        return stream_path_df\n",
    "\n",
    "    \n",
    "    def get_avg_slopes(self, stream_path_df: pd.DataFrame, slope_arr: List[int] = [1, 5, 10, 15]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the average slope for the given slope_arr and adds the slope columns to the stream_path_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            slope_arr (List[int]): A list of slope gap values to calculate the slopes for.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the average slope columns added.\n",
    "        \"\"\"\n",
    "        for slope_gap in slope_arr:\n",
    "            stream_path_df = self.calc_slope(stream_path_df, slope_gap)\n",
    "        return stream_path_df\n",
    "    def calc_slope(self, stream_path_df: pd.DataFrame, slope_gap: int) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the slope at each point in the stream_path_df using the given slope_gap.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            slope_gap (int): The number of points to consider for the slope calculation.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the slope columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            index_1 = max(0, i-slope_gap)\n",
    "            index_2 = min(stream_length - 1, i+slope_gap)\n",
    "            dist_delta = stream_path_df['Dist M'].iloc[index_2] - stream_path_df['Dist M'].iloc[index_1]\n",
    "            elev_delta = stream_path_df['Elev Ft'].iloc[index_2] - stream_path_df['Elev Ft'].iloc[index_1]\n",
    "            \n",
    "            if dist_delta == 0:\n",
    "                slope = 0\n",
    "                print(f\"dist_delta = 0  at {i}\")\n",
    "            else:\n",
    "                slope = elev_delta/dist_delta\n",
    "            column_title = f\"Slope Gap: {slope_gap}\"\n",
    "            stream_path_df.at[i, column_title] = slope\n",
    "        \n",
    "        return stream_path_df\n",
    "    \n",
    "    def get_sinuosity(self, stream_path_df: pd.DataFrame, sinuosity_arr: List[int] = [50, 100, 150]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the sinuosity for the given sinuosity_arr and adds the sinuosity columns to the stream_path_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            sinuosity_arr (List[int]): A list of sinuosity gap values to calculate the sinouositys for.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        \n",
    "        for sinuosity_gap in sinuosity_arr:\n",
    "            stream_path_df = self.calc_sinuosity(stream_path_df, sinuosity_gap)\n",
    "        return stream_path_df\n",
    "    \n",
    "    def calc_sinuosity(self, stream_path_df: pd.DataFrame, sinuosity_gap: int) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the sinuosity at each point in the stream_path_df using the given sinuosity_gap.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            sinuosity_gap (int): The number of points to consider for the sinuosity calculation.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            index_1 = max(0, i-sinuosity_gap)\n",
    "            index_2 = min(stream_length - 1, i+sinuosity_gap)\n",
    "            stream_dist = stream_path_df['Dist M'].iloc[index_2] - stream_path_df['Dist M'].iloc[index_1]\n",
    "            \n",
    "            x_min, y_min =  stream_path_df['X'].iloc[index_1], stream_path_df['Y'].iloc[index_1]\n",
    "            x_max, y_max = stream_path_df['X'].iloc[index_2], stream_path_df['Y'].iloc[index_2]\n",
    "            linear_dist = ((x_max - x_min)**2 + (y_max - y_min)**2)**0.5\n",
    "            \n",
    "            \n",
    "            if linear_dist == 0:\n",
    "                sinuosity = 0\n",
    "            else:\n",
    "                sinuosity = stream_dist/linear_dist\n",
    "            \n",
    "            column_title = f\"Sinuosity Gap: {sinuosity_gap}\"\n",
    "            stream_path_df.at[i, column_title] = sinuosity\n",
    "        \n",
    "        return stream_path_df\n",
    "    \n",
    "    def create_final_dataframe(self, datalist: List[str]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Creates the final DataFrame by processing the input datalist.\n",
    "\n",
    "        Args:\n",
    "            datalist (List[str]): A list of file paths or other data.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The final consolidated DataFrame.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_structure_list = self.pair_profile_and_structure(datalist)\n",
    "        stream_profiles = {}\n",
    "        final_df = pd.DataFrame()\n",
    "        first_pass = True\n",
    "\n",
    "        for pair in profile_structure_list:\n",
    "            stream_path = pair[0]\n",
    "            structure = pair[1]\n",
    "\n",
    "            try:\n",
    "                stream_path_df = pd.read_csv(stream_path)\n",
    "                print(f\"Successfully read {stream_path}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error reading {stream_path}: {e}\")\n",
    "                continue\n",
    "\n",
    "            try:\n",
    "                structure_df = pd.read_csv(structure)\n",
    "                print(f\"Successfully read {structure}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error reading {structure}: {e}\")\n",
    "                continue\n",
    "            \n",
    "            closest_structure_points = self.get_closest_points(stream_path_df, structure_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            stream_path_df = self.create_headcut_bools(stream_path_df, closest_structure_points)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for headcut_bools {stream_path_df}\")\n",
    "                continue\n",
    "                \n",
    "            stream_path_df = self.get_avg_slopes(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for avg_slope {stream_path_df}\")\n",
    "                continue\n",
    "                \n",
    "            stream_path_df = self.get_sinuosity(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for get_sinuosity {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            \n",
    "            search_pattern = r'([\\w]+)_(\\d+)([A-Z]?)(?=_)'\n",
    "            match = re.search(search_pattern, stream_path)\n",
    "            if match:\n",
    "                stream_name = match.group(1)\n",
    "                stream_section = match.group(2)\n",
    "                stream_section_letter = match.group(3)\n",
    "                stream_profile_name = f\"{stream_name}_{stream_section}{stream_section_letter}\"\n",
    "                stream_profiles[stream_profile_name] = stream_path_df\n",
    "            else:\n",
    "                print(f\"Unable to extract stream name and section from {stream_path}\")\n",
    "            # Check if the dataframes have numerical columns\n",
    "            if first_pass:\n",
    "                # Use the column titles from the first stream_path_df\n",
    "                final_df = pd.DataFrame(columns=stream_path_df.columns)\n",
    "                first_pass = False\n",
    "                \n",
    "            if not first_pass:\n",
    "                stream_path_df.drop(index=0)\n",
    "            \n",
    "            if all(stream_path_df.dtypes == float) and all(structure_df.dtypes == float):\n",
    "                stream_path_df = stream_path_df.astype(float)\n",
    "                structure_df = structure_df.astype(float)\n",
    "            else:\n",
    "                # If the dataframes have non-numerical columns, drop them\n",
    "                stream_path_df = stream_path_df.select_dtypes(include='number').astype(float)\n",
    "                structure_df = structure_df.select_dtypes(include='number').astype(float)         \n",
    "\n",
    "            final_df = pd.concat([final_df, stream_path_df], ignore_index=True)\n",
    "\n",
    "        return self.FinalDataFrame(final_df, stream_profiles)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d0c22e22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:22.053952Z",
     "iopub.status.busy": "2024-04-23T21:41:22.053639Z",
     "iopub.status.idle": "2024-04-23T21:41:26.880016Z",
     "shell.execute_reply": "2024-04-23T21:41:26.879116Z"
    },
    "papermill": {
     "duration": 4.847428,
     "end_time": "2024-04-23T21:41:26.882621",
     "exception": false,
     "start_time": "2024-04-23T21:41:22.035193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Project_Structures.csv\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2214585112.py:296: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n",
      "  final_df = pd.concat([final_df, stream_path_df], ignore_index=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Project_Structures.csv\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "total_df = New_Dataframe()\n",
    "stream_structure_dataset = []\n",
    "\n",
    "for dirname, _, filenames in os.walk('/kaggle/input/headcut-collection'):\n",
    "    for filename in filenames:\n",
    "        file = os.path.join(dirname, filename)\n",
    "        stream_structure_dataset.append(file)\n",
    "\n",
    "stream_df_new = total_df.create_final_dataframe(stream_structure_dataset)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "61ea34cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:26.923248Z",
     "iopub.status.busy": "2024-04-23T21:41:26.922828Z",
     "iopub.status.idle": "2024-04-23T21:41:26.937917Z",
     "shell.execute_reply": "2024-04-23T21:41:26.936784Z"
    },
    "papermill": {
     "duration": 0.038185,
     "end_time": "2024-04-23T21:41:26.940297",
     "exception": false,
     "start_time": "2024-04-23T21:41:26.902112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Dist M            X            Y      Elev Ft  has headcut  \\\n",
      "0       0.000000  495684.6380  4794395.746  4886.384766          1.0   \n",
      "1       1.043499  495684.6380  4794394.702  4886.253418          0.0   \n",
      "2       2.086998  495684.6380  4794393.659  4886.187988          0.0   \n",
      "3       3.130497  495684.6380  4794392.615  4885.958008          0.0   \n",
      "4       4.586810  495684.8439  4794391.174  4885.433105          0.0   \n",
      "...          ...          ...          ...          ...          ...   \n",
      "2615  422.960557  496011.6344  4793816.487  4807.415039          0.0   \n",
      "2616  424.102494  496011.4540  4793815.359  4807.382324          0.0   \n",
      "2617  425.244431  496011.2736  4793814.231  4807.349121          0.0   \n",
      "2618  426.386369  496011.0932  4793813.104  4807.283691          0.0   \n",
      "2619  427.528305  496010.9128  4793811.976  4806.955566          0.0   \n",
      "\n",
      "      Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
      "0        -0.125873     -0.222603      -0.305488      -0.244375   \n",
      "1        -0.094288     -0.312158      -0.286685      -0.241834   \n",
      "2        -0.141548     -0.298615      -0.266490      -0.228256   \n",
      "3        -0.301976     -0.318961      -0.255804      -0.222257   \n",
      "4        -0.315336     -0.325182      -0.240867      -0.216865   \n",
      "...            ...           ...            ...            ...   \n",
      "2615     -0.099036     -0.116222      -0.100167      -0.102911   \n",
      "2616     -0.028862     -0.088500      -0.103653      -0.103710   \n",
      "2617     -0.043187     -0.101351      -0.098387      -0.102230   \n",
      "2618     -0.172319     -0.104313      -0.094699      -0.105570   \n",
      "2619     -0.287341     -0.114268      -0.107175      -0.102172   \n",
      "\n",
      "      Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  \n",
      "0              1.044071            1.046196            1.052876  \n",
      "1              1.043309            1.046982            1.052531  \n",
      "2              1.042574            1.048752            1.052511  \n",
      "3              1.042646            1.050445            1.052203  \n",
      "4              1.042685            1.050541            1.051904  \n",
      "...                 ...                 ...                 ...  \n",
      "2615           1.068726            1.065266            1.052214  \n",
      "2616           1.063939            1.064631            1.052105  \n",
      "2617           1.059986            1.063940            1.051990  \n",
      "2618           1.055751            1.064551            1.051863  \n",
      "2619           1.051249            1.065183            1.052209  \n",
      "\n",
      "[2620 rows x 12 columns]\n",
      "dict_keys(['Riehle_3', 'Riehle_4', 'Riehle_2B', 'Riehle_2A', 'Riehle_1B', 'Riehle_1A'])\n",
      "(791, 12)\n"
     ]
    }
   ],
   "source": [
    "print(stream_df_new.final_df)\n",
    "print(stream_df_new.stream_profiles.keys())\n",
    "print(stream_df_new.stream_profiles['Riehle_3'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b5f850be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:26.978713Z",
     "iopub.status.busy": "2024-04-23T21:41:26.978375Z",
     "iopub.status.idle": "2024-04-23T21:41:27.002939Z",
     "shell.execute_reply": "2024-04-23T21:41:27.001789Z"
    },
    "papermill": {
     "duration": 0.046181,
     "end_time": "2024-04-23T21:41:27.005082",
     "exception": false,
     "start_time": "2024-04-23T21:41:26.958901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev Ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Slope Gap: 1</th>\n",
       "      <th>Slope Gap: 5</th>\n",
       "      <th>Slope Gap: 10</th>\n",
       "      <th>Slope Gap: 15</th>\n",
       "      <th>Sinuosity Gap: 50</th>\n",
       "      <th>Sinuosity Gap: 100</th>\n",
       "      <th>Sinuosity Gap: 150</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>495123.2248</td>\n",
       "      <td>4794416.751</td>\n",
       "      <td>4916.305664</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.131306</td>\n",
       "      <td>-0.157567</td>\n",
       "      <td>-0.159633</td>\n",
       "      <td>-0.155605</td>\n",
       "      <td>1.030686</td>\n",
       "      <td>1.020772</td>\n",
       "      <td>1.024532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.249465</td>\n",
       "      <td>495123.9413</td>\n",
       "      <td>4794415.727</td>\n",
       "      <td>4916.141602</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.157489</td>\n",
       "      <td>-0.170646</td>\n",
       "      <td>-0.151541</td>\n",
       "      <td>-0.159864</td>\n",
       "      <td>1.029995</td>\n",
       "      <td>1.020712</td>\n",
       "      <td>1.024413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.498931</td>\n",
       "      <td>495124.6579</td>\n",
       "      <td>4794414.704</td>\n",
       "      <td>4915.912109</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.183673</td>\n",
       "      <td>-0.161230</td>\n",
       "      <td>-0.159747</td>\n",
       "      <td>-0.157632</td>\n",
       "      <td>1.029335</td>\n",
       "      <td>1.021364</td>\n",
       "      <td>1.024294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.748396</td>\n",
       "      <td>495125.3744</td>\n",
       "      <td>4794413.680</td>\n",
       "      <td>4915.682617</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.196959</td>\n",
       "      <td>-0.159507</td>\n",
       "      <td>-0.150949</td>\n",
       "      <td>-0.152877</td>\n",
       "      <td>1.028705</td>\n",
       "      <td>1.021991</td>\n",
       "      <td>1.024176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.997861</td>\n",
       "      <td>495126.0909</td>\n",
       "      <td>4794412.656</td>\n",
       "      <td>4915.419922</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.144593</td>\n",
       "      <td>-0.152408</td>\n",
       "      <td>-0.154368</td>\n",
       "      <td>-0.153948</td>\n",
       "      <td>1.028100</td>\n",
       "      <td>1.022590</td>\n",
       "      <td>1.024059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>689</th>\n",
       "      <td>871.795709</td>\n",
       "      <td>495666.5359</td>\n",
       "      <td>4793916.880</td>\n",
       "      <td>4841.338867</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.015041</td>\n",
       "      <td>0.016713</td>\n",
       "      <td>-0.022934</td>\n",
       "      <td>-0.034074</td>\n",
       "      <td>1.733881</td>\n",
       "      <td>1.372893</td>\n",
       "      <td>1.303379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690</th>\n",
       "      <td>872.883205</td>\n",
       "      <td>495666.6518</td>\n",
       "      <td>4793915.799</td>\n",
       "      <td>4841.371582</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.045349</td>\n",
       "      <td>0.026378</td>\n",
       "      <td>-0.016747</td>\n",
       "      <td>-0.035575</td>\n",
       "      <td>1.720489</td>\n",
       "      <td>1.375653</td>\n",
       "      <td>1.305858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>691</th>\n",
       "      <td>873.970701</td>\n",
       "      <td>495666.7676</td>\n",
       "      <td>4793914.718</td>\n",
       "      <td>4841.437500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.060165</td>\n",
       "      <td>0.030147</td>\n",
       "      <td>-0.004638</td>\n",
       "      <td>-0.031943</td>\n",
       "      <td>1.694053</td>\n",
       "      <td>1.378429</td>\n",
       "      <td>1.308377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>692</th>\n",
       "      <td>875.058197</td>\n",
       "      <td>495666.8835</td>\n",
       "      <td>4793913.637</td>\n",
       "      <td>4841.502441</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.075207</td>\n",
       "      <td>0.040185</td>\n",
       "      <td>0.002569</td>\n",
       "      <td>-0.026102</td>\n",
       "      <td>1.665666</td>\n",
       "      <td>1.381218</td>\n",
       "      <td>1.310081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>693</th>\n",
       "      <td>876.145693</td>\n",
       "      <td>495666.9994</td>\n",
       "      <td>4793912.555</td>\n",
       "      <td>4841.601074</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.090697</td>\n",
       "      <td>0.048222</td>\n",
       "      <td>0.011619</td>\n",
       "      <td>-0.024656</td>\n",
       "      <td>1.635380</td>\n",
       "      <td>1.384020</td>\n",
       "      <td>1.311796</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>694 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Dist M            X            Y      Elev Ft  has headcut  \\\n",
       "0      0.000000  495123.2248  4794416.751  4916.305664          0.0   \n",
       "1      1.249465  495123.9413  4794415.727  4916.141602          0.0   \n",
       "2      2.498931  495124.6579  4794414.704  4915.912109          0.0   \n",
       "3      3.748396  495125.3744  4794413.680  4915.682617          0.0   \n",
       "4      4.997861  495126.0909  4794412.656  4915.419922          0.0   \n",
       "..          ...          ...          ...          ...          ...   \n",
       "689  871.795709  495666.5359  4793916.880  4841.338867          0.0   \n",
       "690  872.883205  495666.6518  4793915.799  4841.371582          0.0   \n",
       "691  873.970701  495666.7676  4793914.718  4841.437500          0.0   \n",
       "692  875.058197  495666.8835  4793913.637  4841.502441          0.0   \n",
       "693  876.145693  495666.9994  4793912.555  4841.601074          0.0   \n",
       "\n",
       "     Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
       "0       -0.131306     -0.157567      -0.159633      -0.155605   \n",
       "1       -0.157489     -0.170646      -0.151541      -0.159864   \n",
       "2       -0.183673     -0.161230      -0.159747      -0.157632   \n",
       "3       -0.196959     -0.159507      -0.150949      -0.152877   \n",
       "4       -0.144593     -0.152408      -0.154368      -0.153948   \n",
       "..            ...           ...            ...            ...   \n",
       "689      0.015041      0.016713      -0.022934      -0.034074   \n",
       "690      0.045349      0.026378      -0.016747      -0.035575   \n",
       "691      0.060165      0.030147      -0.004638      -0.031943   \n",
       "692      0.075207      0.040185       0.002569      -0.026102   \n",
       "693      0.090697      0.048222       0.011619      -0.024656   \n",
       "\n",
       "     Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  \n",
       "0             1.030686            1.020772            1.024532  \n",
       "1             1.029995            1.020712            1.024413  \n",
       "2             1.029335            1.021364            1.024294  \n",
       "3             1.028705            1.021991            1.024176  \n",
       "4             1.028100            1.022590            1.024059  \n",
       "..                 ...                 ...                 ...  \n",
       "689           1.733881            1.372893            1.303379  \n",
       "690           1.720489            1.375653            1.305858  \n",
       "691           1.694053            1.378429            1.308377  \n",
       "692           1.665666            1.381218            1.310081  \n",
       "693           1.635380            1.384020            1.311796  \n",
       "\n",
       "[694 rows x 12 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_df_new.stream_profiles['Riehle_2B']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8620933d",
   "metadata": {
    "papermill": {
     "duration": 0.019395,
     "end_time": "2024-04-23T21:41:27.045178",
     "exception": false,
     "start_time": "2024-04-23T21:41:27.025783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Building a Data Visualization Object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60d911fe",
   "metadata": {
    "papermill": {
     "duration": 0.018983,
     "end_time": "2024-04-23T21:41:27.082981",
     "exception": false,
     "start_time": "2024-04-23T21:41:27.063998",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have a class to create our various stream profile dataframes, let's design another object that can take these dataframes and output some useful plots so we can better visualize the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "330e1f61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:27.170693Z",
     "iopub.status.busy": "2024-04-23T21:41:27.170287Z",
     "iopub.status.idle": "2024-04-23T21:41:27.177138Z",
     "shell.execute_reply": "2024-04-23T21:41:27.176177Z"
    },
    "papermill": {
     "duration": 0.029498,
     "end_time": "2024-04-23T21:41:27.179236",
     "exception": false,
     "start_time": "2024-04-23T21:41:27.149738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "class Visualize_Profile:\n",
    "    \n",
    "    def plot_stream_profile(self, stream_path_df, title):\n",
    "        \n",
    "        title = title\n",
    "        x_data = stream_path_df['X']\n",
    "        y_data = stream_path_df['Y']\n",
    "        \n",
    "        fig, ax = plt.subplots(figsize=(8,6))\n",
    "        ax.scatter(x_data, y_data, s=10, c='r', alpha=0.5)\n",
    "        \n",
    "        ax.set_xlabel(\"X\")\n",
    "        ax.set_ylabel(\"Y\")\n",
    "        ax.set_title(f\"{title}\")\n",
    "        \n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f2219fb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:27.216818Z",
     "iopub.status.busy": "2024-04-23T21:41:27.216494Z",
     "iopub.status.idle": "2024-04-23T21:41:27.568678Z",
     "shell.execute_reply": "2024-04-23T21:41:27.567701Z"
    },
    "papermill": {
     "duration": 0.37374,
     "end_time": "2024-04-23T21:41:27.571308",
     "exception": false,
     "start_time": "2024-04-23T21:41:27.197568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viz = Visualize_Profile()\n",
    "stream_df = stream_df_new.stream_profiles['Riehle_2B']\n",
    "viz.plot_stream_profile(stream_df, 'Riehle_2B')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "915daf94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:27.615305Z",
     "iopub.status.busy": "2024-04-23T21:41:27.614935Z",
     "iopub.status.idle": "2024-04-23T21:41:29.466454Z",
     "shell.execute_reply": "2024-04-23T21:41:29.465400Z"
    },
    "papermill": {
     "duration": 1.87584,
     "end_time": "2024-04-23T21:41:29.468796",
     "exception": false,
     "start_time": "2024-04-23T21:41:27.592956",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "profiles = stream_df_new.stream_profiles.keys()\n",
    "\n",
    "for profile in profiles:\n",
    "    viz = Visualize_Profile()\n",
    "    stream_df = stream_df_new.stream_profiles[profile]\n",
    "    viz.plot_stream_profile(stream_df, profile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85766d24",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.022714,
     "end_time": "2024-04-23T21:41:29.516168",
     "exception": false,
     "start_time": "2024-04-23T21:41:29.493454",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's add a column to our stream profile called `has_headcut`. This will be our dependent variable for our machine learning model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fb3c3df",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.022462,
     "end_time": "2024-04-23T21:41:29.561434",
     "exception": false,
     "start_time": "2024-04-23T21:41:29.538972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "21d5d260",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:29.608763Z",
     "iopub.status.busy": "2024-04-23T21:41:29.608338Z",
     "iopub.status.idle": "2024-04-23T21:41:29.712420Z",
     "shell.execute_reply": "2024-04-23T21:41:29.711255Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.130415,
     "end_time": "2024-04-23T21:41:29.714735",
     "exception": false,
     "start_time": "2024-04-23T21:41:29.584320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "      <th>has headcut</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>52.12513114</td>\n",
       "      <td>495991.84</td>\n",
       "      <td>4794222.64</td>\n",
       "      <td>4865.419922</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>180.2097651</td>\n",
       "      <td>495921.3815</td>\n",
       "      <td>4794118.299</td>\n",
       "      <td>4845.866211</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>236.9627192</td>\n",
       "      <td>495907.0346</td>\n",
       "      <td>4794064.529</td>\n",
       "      <td>4838.484375</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>279.0916947</td>\n",
       "      <td>495909.4258</td>\n",
       "      <td>4794023.443</td>\n",
       "      <td>4834.973633</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>285.3730026</td>\n",
       "      <td>495911.7753</td>\n",
       "      <td>4794017.621</td>\n",
       "      <td>4834.15332</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>316.9558364</td>\n",
       "      <td>495927.536</td>\n",
       "      <td>4793990.882</td>\n",
       "      <td>4830.610352</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>318.5366146</td>\n",
       "      <td>495928.4509</td>\n",
       "      <td>4793989.593</td>\n",
       "      <td>4830.511719</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>361.7876491</td>\n",
       "      <td>495955.1901</td>\n",
       "      <td>4793958.113</td>\n",
       "      <td>4827.001465</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>426.9348608</td>\n",
       "      <td>495976.5232</td>\n",
       "      <td>4793900.352</td>\n",
       "      <td>4816.568359</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>579.0827996</td>\n",
       "      <td>496037.3256</td>\n",
       "      <td>4793769.326</td>\n",
       "      <td>4803.510742</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>594.6758997</td>\n",
       "      <td>496039.8694</td>\n",
       "      <td>4793754.063</td>\n",
       "      <td>4802.362305</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>599.6474252</td>\n",
       "      <td>496040.8617</td>\n",
       "      <td>4793749.192</td>\n",
       "      <td>4802.165527</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>618.4948471</td>\n",
       "      <td>496056.0166</td>\n",
       "      <td>4793738.186</td>\n",
       "      <td>4799.57373</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>644.3992303</td>\n",
       "      <td>496055.6558</td>\n",
       "      <td>4793714.011</td>\n",
       "      <td>4798.523438</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>510</th>\n",
       "      <td>655.644581</td>\n",
       "      <td>496059.0235</td>\n",
       "      <td>4793703.366</td>\n",
       "      <td>4798.392578</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>519</th>\n",
       "      <td>667.6914888</td>\n",
       "      <td>496058.7228</td>\n",
       "      <td>4793691.639</td>\n",
       "      <td>4797.572266</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>685.5618637</td>\n",
       "      <td>496065.0373</td>\n",
       "      <td>4793675.402</td>\n",
       "      <td>4796.227051</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>688.3098662</td>\n",
       "      <td>496066.1198</td>\n",
       "      <td>4793672.876</td>\n",
       "      <td>4795.866211</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft  has headcut\n",
       "45   52.12513114    495991.84   4794222.64  4865.419922          1.0\n",
       "146  180.2097651  495921.3815  4794118.299  4845.866211          1.0\n",
       "192  236.9627192  495907.0346  4794064.529  4838.484375          1.0\n",
       "231  279.0916947  495909.4258  4794023.443  4834.973633          1.0\n",
       "236  285.3730026  495911.7753  4794017.621   4834.15332          1.0\n",
       "257  316.9558364   495927.536  4793990.882  4830.610352          1.0\n",
       "258  318.5366146  495928.4509  4793989.593  4830.511719          1.0\n",
       "288  361.7876491  495955.1901  4793958.113  4827.001465          1.0\n",
       "337  426.9348608  495976.5232  4793900.352  4816.568359          1.0\n",
       "451  579.0827996  496037.3256  4793769.326  4803.510742          1.0\n",
       "464  594.6758997  496039.8694  4793754.063  4802.362305          1.0\n",
       "468  599.6474252  496040.8617  4793749.192  4802.165527          1.0\n",
       "480  618.4948471  496056.0166  4793738.186   4799.57373          1.0\n",
       "501  644.3992303  496055.6558  4793714.011  4798.523438          1.0\n",
       "510   655.644581  496059.0235  4793703.366  4798.392578          1.0\n",
       "519  667.6914888  496058.7228  4793691.639  4797.572266          1.0\n",
       "532  685.5618637  496065.0373  4793675.402  4796.227051          1.0\n",
       "534  688.3098662  496066.1198  4793672.876  4795.866211          1.0\n",
       "0            NaN          NaN          NaN          NaN          1.0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(len(stream_profile_df['X'])):\n",
    "    x_val, y_val = float(stream_profile_df['X'].iloc[i]), float(stream_profile_df['Y'].iloc[i])\n",
    "    has_headcut_bool = False\n",
    "    for j in range(len(closest_profile_points)):\n",
    "        if closest_profile_points[j][0] == x_val and closest_profile_points[j][1] == y_val:\n",
    "            has_headcut_bool = True\n",
    "            break\n",
    "    stream_profile_df.at[i, 'has headcut'] = 1 if has_headcut_bool else 0\n",
    "\n",
    "    \n",
    "headcut_rows = stream_profile_df[stream_profile_df['has headcut'] == 1]\n",
    "headcut_rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e77bb24d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:29.766935Z",
     "iopub.status.busy": "2024-04-23T21:41:29.766587Z",
     "iopub.status.idle": "2024-04-23T21:41:29.773223Z",
     "shell.execute_reply": "2024-04-23T21:41:29.772269Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.035094,
     "end_time": "2024-04-23T21:41:29.775573",
     "exception": false,
     "start_time": "2024-04-23T21:41:29.740479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(stream_profile_df['has headcut'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36cf36b7",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.024878,
     "end_time": "2024-04-23T21:41:29.825828",
     "exception": false,
     "start_time": "2024-04-23T21:41:29.800950",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have a column with our dependent variable `has headcut` this is the variable we will try to predict with our machine learning models. The next steps are to do some data analysis, calculating slopes at each point, and average slopes at each point with varying distance widths (5, 10, 15, 20). This will give us more columns that our machine learning model can use to sort potential headcuts and non-headcut areas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1becb376",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:29.879244Z",
     "iopub.status.busy": "2024-04-23T21:41:29.878872Z",
     "iopub.status.idle": "2024-04-23T21:41:29.887619Z",
     "shell.execute_reply": "2024-04-23T21:41:29.886552Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.037143,
     "end_time": "2024-04-23T21:41:29.889837",
     "exception": false,
     "start_time": "2024-04-23T21:41:29.852694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def avg_slope(title, gap):\n",
    "    for i in range(len(stream_profile_df['Elev ft'])):\n",
    "        min_i = max(0, i-gap)\n",
    "        max_i = min(len(stream_profile_df['Elev ft'])-1, i+gap)\n",
    "        \n",
    "        dist_min = float(stream_profile_df['Dist M'].iloc[min_i])\n",
    "        dist_max = float(stream_profile_df['Dist M'].iloc[max_i])\n",
    "        elev_min = float(stream_profile_df['Elev ft'].iloc[min_i])\n",
    "        elev_max = float(stream_profile_df['Elev ft'].iloc[max_i])\n",
    "        \n",
    "        \n",
    "        numerator = elev_max - elev_min\n",
    "        denominator = dist_max - dist_min\n",
    "        if abs(denominator) > 1e-6:\n",
    "            slope = numerator/denominator\n",
    "        else: \n",
    "            slope = 0.0\n",
    "        stream_profile_df.at[i, title] = slope\n",
    "#         print(f\"Row {i}: numerator={numerator}, denominator={denominator}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "efb151ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:29.940502Z",
     "iopub.status.busy": "2024-04-23T21:41:29.940110Z",
     "iopub.status.idle": "2024-04-23T21:41:30.337898Z",
     "shell.execute_reply": "2024-04-23T21:41:30.336690Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.425492,
     "end_time": "2024-04-23T21:41:30.340742",
     "exception": false,
     "start_time": "2024-04-23T21:41:29.915250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Slope at Point</th>\n",
       "      <th>Avg Slope 10m</th>\n",
       "      <th>Avg Slope 20m</th>\n",
       "      <th>Avg Slope 30m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>52.12513114</td>\n",
       "      <td>495991.84</td>\n",
       "      <td>4794222.64</td>\n",
       "      <td>4865.419922</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.402471</td>\n",
       "      <td>-0.222721</td>\n",
       "      <td>-0.214954</td>\n",
       "      <td>-0.209200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>180.2097651</td>\n",
       "      <td>495921.3815</td>\n",
       "      <td>4794118.299</td>\n",
       "      <td>4845.866211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.549902</td>\n",
       "      <td>-0.204838</td>\n",
       "      <td>-0.179259</td>\n",
       "      <td>-0.154808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>236.9627192</td>\n",
       "      <td>495907.0346</td>\n",
       "      <td>4794064.529</td>\n",
       "      <td>4838.484375</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.120460</td>\n",
       "      <td>-0.070009</td>\n",
       "      <td>-0.085264</td>\n",
       "      <td>-0.083507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>279.0916947</td>\n",
       "      <td>495909.4258</td>\n",
       "      <td>4794023.443</td>\n",
       "      <td>4834.973633</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.026797</td>\n",
       "      <td>-0.258761</td>\n",
       "      <td>-0.196194</td>\n",
       "      <td>-0.152797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>285.3730026</td>\n",
       "      <td>495911.7753</td>\n",
       "      <td>4794017.621</td>\n",
       "      <td>4834.15332</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.453272</td>\n",
       "      <td>-0.216612</td>\n",
       "      <td>-0.187378</td>\n",
       "      <td>-0.132694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>316.9558364</td>\n",
       "      <td>495927.536</td>\n",
       "      <td>4793990.882</td>\n",
       "      <td>4830.610352</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.747197</td>\n",
       "      <td>-0.109701</td>\n",
       "      <td>-0.087511</td>\n",
       "      <td>-0.081186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>318.5366146</td>\n",
       "      <td>495928.4509</td>\n",
       "      <td>4793989.593</td>\n",
       "      <td>4830.511719</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.770239</td>\n",
       "      <td>-0.145904</td>\n",
       "      <td>-0.078841</td>\n",
       "      <td>-0.080090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>361.7876491</td>\n",
       "      <td>495955.1901</td>\n",
       "      <td>4793958.113</td>\n",
       "      <td>4827.001465</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.875272</td>\n",
       "      <td>-0.387115</td>\n",
       "      <td>-0.206682</td>\n",
       "      <td>-0.163252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>426.9348608</td>\n",
       "      <td>495976.5232</td>\n",
       "      <td>4793900.352</td>\n",
       "      <td>4816.568359</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.163264</td>\n",
       "      <td>-0.094457</td>\n",
       "      <td>-0.107954</td>\n",
       "      <td>-0.110142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>579.0827996</td>\n",
       "      <td>496037.3256</td>\n",
       "      <td>4793769.326</td>\n",
       "      <td>4803.510742</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.046687</td>\n",
       "      <td>-0.075034</td>\n",
       "      <td>-0.088531</td>\n",
       "      <td>-0.070030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>594.6758997</td>\n",
       "      <td>496039.8694</td>\n",
       "      <td>4793754.063</td>\n",
       "      <td>4802.362305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.036627</td>\n",
       "      <td>-0.080249</td>\n",
       "      <td>-0.100532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>599.6474252</td>\n",
       "      <td>496040.8617</td>\n",
       "      <td>4793749.192</td>\n",
       "      <td>4802.165527</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.075820</td>\n",
       "      <td>-0.065932</td>\n",
       "      <td>-0.108041</td>\n",
       "      <td>-0.088465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>618.4948471</td>\n",
       "      <td>496056.0166</td>\n",
       "      <td>4793738.186</td>\n",
       "      <td>4799.57373</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.024747</td>\n",
       "      <td>-0.042012</td>\n",
       "      <td>-0.076879</td>\n",
       "      <td>-0.085144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>644.3992303</td>\n",
       "      <td>496055.6558</td>\n",
       "      <td>4793714.011</td>\n",
       "      <td>4798.523438</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.082852</td>\n",
       "      <td>-0.010772</td>\n",
       "      <td>-0.062950</td>\n",
       "      <td>-0.060294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>510</th>\n",
       "      <td>655.644581</td>\n",
       "      <td>496059.0235</td>\n",
       "      <td>4793703.366</td>\n",
       "      <td>4798.392578</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.122278</td>\n",
       "      <td>-0.056951</td>\n",
       "      <td>-0.042827</td>\n",
       "      <td>-0.048614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>519</th>\n",
       "      <td>667.6914888</td>\n",
       "      <td>496058.7228</td>\n",
       "      <td>4793691.639</td>\n",
       "      <td>4797.572266</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.059703</td>\n",
       "      <td>-0.052868</td>\n",
       "      <td>-0.072940</td>\n",
       "      <td>-0.066691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>685.5618637</td>\n",
       "      <td>496065.0373</td>\n",
       "      <td>4793675.402</td>\n",
       "      <td>4796.227051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.131310</td>\n",
       "      <td>-0.096208</td>\n",
       "      <td>-0.094837</td>\n",
       "      <td>-0.085444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>688.3098662</td>\n",
       "      <td>496066.1198</td>\n",
       "      <td>4793672.876</td>\n",
       "      <td>4795.866211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.052253</td>\n",
       "      <td>-0.093697</td>\n",
       "      <td>-0.091806</td>\n",
       "      <td>-0.085557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.181679</td>\n",
       "      <td>-0.116970</td>\n",
       "      <td>-0.039087</td>\n",
       "      <td>-0.088570</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft  has headcut  \\\n",
       "45   52.12513114    495991.84   4794222.64  4865.419922          1.0   \n",
       "146  180.2097651  495921.3815  4794118.299  4845.866211          1.0   \n",
       "192  236.9627192  495907.0346  4794064.529  4838.484375          1.0   \n",
       "231  279.0916947  495909.4258  4794023.443  4834.973633          1.0   \n",
       "236  285.3730026  495911.7753  4794017.621   4834.15332          1.0   \n",
       "257  316.9558364   495927.536  4793990.882  4830.610352          1.0   \n",
       "258  318.5366146  495928.4509  4793989.593  4830.511719          1.0   \n",
       "288  361.7876491  495955.1901  4793958.113  4827.001465          1.0   \n",
       "337  426.9348608  495976.5232  4793900.352  4816.568359          1.0   \n",
       "451  579.0827996  496037.3256  4793769.326  4803.510742          1.0   \n",
       "464  594.6758997  496039.8694  4793754.063  4802.362305          1.0   \n",
       "468  599.6474252  496040.8617  4793749.192  4802.165527          1.0   \n",
       "480  618.4948471  496056.0166  4793738.186   4799.57373          1.0   \n",
       "501  644.3992303  496055.6558  4793714.011  4798.523438          1.0   \n",
       "510   655.644581  496059.0235  4793703.366  4798.392578          1.0   \n",
       "519  667.6914888  496058.7228  4793691.639  4797.572266          1.0   \n",
       "532  685.5618637  496065.0373  4793675.402  4796.227051          1.0   \n",
       "534  688.3098662  496066.1198  4793672.876  4795.866211          1.0   \n",
       "0            NaN          NaN          NaN          NaN          1.0   \n",
       "\n",
       "     Slope at Point  Avg Slope 10m  Avg Slope 20m  Avg Slope 30m  \n",
       "45        -0.402471      -0.222721      -0.214954      -0.209200  \n",
       "146       -0.549902      -0.204838      -0.179259      -0.154808  \n",
       "192       -0.120460      -0.070009      -0.085264      -0.083507  \n",
       "231       -0.026797      -0.258761      -0.196194      -0.152797  \n",
       "236       -0.453272      -0.216612      -0.187378      -0.132694  \n",
       "257       -0.747197      -0.109701      -0.087511      -0.081186  \n",
       "258       -0.770239      -0.145904      -0.078841      -0.080090  \n",
       "288       -1.875272      -0.387115      -0.206682      -0.163252  \n",
       "337       -0.163264      -0.094457      -0.107954      -0.110142  \n",
       "451       -0.046687      -0.075034      -0.088531      -0.070030  \n",
       "464        0.000000      -0.036627      -0.080249      -0.100532  \n",
       "468       -0.075820      -0.065932      -0.108041      -0.088465  \n",
       "480        0.024747      -0.042012      -0.076879      -0.085144  \n",
       "501       -0.082852      -0.010772      -0.062950      -0.060294  \n",
       "510       -0.122278      -0.056951      -0.042827      -0.048614  \n",
       "519       -0.059703      -0.052868      -0.072940      -0.066691  \n",
       "532       -0.131310      -0.096208      -0.094837      -0.085444  \n",
       "534       -0.052253      -0.093697      -0.091806      -0.085557  \n",
       "0         -0.181679      -0.116970      -0.039087      -0.088570  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_slope('Slope at Point', 1) # Slope at point\n",
    "avg_slope('Avg Slope 10m', 5) # Slope at point\n",
    "avg_slope('Avg Slope 20m', 10) # Slope at point\n",
    "avg_slope('Avg Slope 30m', 15) # Slope at point\n",
    "\n",
    "    \n",
    "headcut_rows = stream_profile_df[stream_profile_df['has headcut'] == 1]\n",
    "headcut_rows\n",
    "\n",
    "headcut_rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a1dff39",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.026293,
     "end_time": "2024-04-23T21:41:30.395187",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.368894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Before we can convert this dataframe into a tensor, we need to make sure that all columns contain floats to allow the tensor to perform operations on them. We can use the `.dtypes` function to check what our datatypes are for various columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "815a0cce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:30.448508Z",
     "iopub.status.busy": "2024-04-23T21:41:30.448097Z",
     "iopub.status.idle": "2024-04-23T21:41:30.465306Z",
     "shell.execute_reply": "2024-04-23T21:41:30.464108Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.046712,
     "end_time": "2024-04-23T21:41:30.467537",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.420825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "stream_profile_df = stream_profile_df.fillna(stream_profile_df.mode().iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "68f54b69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:30.519633Z",
     "iopub.status.busy": "2024-04-23T21:41:30.519265Z",
     "iopub.status.idle": "2024-04-23T21:41:30.526695Z",
     "shell.execute_reply": "2024-04-23T21:41:30.525772Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.035952,
     "end_time": "2024-04-23T21:41:30.528859",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.492907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dist M             object\n",
       "X                  object\n",
       "Y                  object\n",
       "Elev ft            object\n",
       "has headcut       float64\n",
       "Slope at Point    float64\n",
       "Avg Slope 10m     float64\n",
       "Avg Slope 20m     float64\n",
       "Avg Slope 30m     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14990207",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.026001,
     "end_time": "2024-04-23T21:41:30.581202",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.555201",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see the columns `Dist M, X, Y, Elev ft` are all objects. We can use `.astype(float)` to convert these to floats instead\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5c0bd57d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:30.635392Z",
     "iopub.status.busy": "2024-04-23T21:41:30.634855Z",
     "iopub.status.idle": "2024-04-23T21:41:30.646819Z",
     "shell.execute_reply": "2024-04-23T21:41:30.645754Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.04208,
     "end_time": "2024-04-23T21:41:30.649380",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.607300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dist M            float64\n",
       "X                 float64\n",
       "Y                 float64\n",
       "Elev ft           float64\n",
       "has headcut       float64\n",
       "Slope at Point    float64\n",
       "Avg Slope 10m     float64\n",
       "Avg Slope 20m     float64\n",
       "Avg Slope 30m     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df['Dist M'] = stream_profile_df['Dist M'].astype(float)\n",
    "stream_profile_df['X'] = stream_profile_df['X'].astype(float)\n",
    "stream_profile_df['Y'] = stream_profile_df['Y'].astype(float)\n",
    "stream_profile_df['Elev ft'] = stream_profile_df['Elev ft'].astype(float)\n",
    "stream_profile_df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de3e30a3",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.025971,
     "end_time": "2024-04-23T21:41:30.703252",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.677281",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Buidling a Linear Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a41c3509",
   "metadata": {
    "papermill": {
     "duration": 0.026444,
     "end_time": "2024-04-23T21:41:30.756367",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.729923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we have our cleaned up data and several average slope columns. Let's try making a linear model and see what kind of predictive accuracy we can achieve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fe0628b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:30.810929Z",
     "iopub.status.busy": "2024-04-23T21:41:30.810593Z",
     "iopub.status.idle": "2024-04-23T21:41:34.567812Z",
     "shell.execute_reply": "2024-04-23T21:41:34.566921Z"
    },
    "papermill": {
     "duration": 3.787031,
     "end_time": "2024-04-23T21:41:34.570394",
     "exception": false,
     "start_time": "2024-04-23T21:41:30.783363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import tensor\n",
    "t_dep = tensor(stream_profile_df['has headcut'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "774c2bb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:34.621797Z",
     "iopub.status.busy": "2024-04-23T21:41:34.621284Z",
     "iopub.status.idle": "2024-04-23T21:41:34.702062Z",
     "shell.execute_reply": "2024-04-23T21:41:34.701158Z"
    },
    "papermill": {
     "duration": 0.109162,
     "end_time": "2024-04-23T21:41:34.704594",
     "exception": false,
     "start_time": "2024-04-23T21:41:34.595432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0000e+00,  4.9600e+05,  4.7943e+06,  ..., -9.9039e-02,\n",
       "         -6.1472e-02, -1.0333e-01],\n",
       "        [ 1.2632e+00,  4.9600e+05,  4.7943e+06,  ..., -1.0935e-01,\n",
       "         -6.8616e-02, -1.0964e-01],\n",
       "        [ 2.5263e+00,  4.9600e+05,  4.7943e+06,  ..., -8.9594e-02,\n",
       "         -7.6940e-02, -1.2014e-01],\n",
       "        ...,\n",
       "        [ 7.4154e+02,  4.9608e+05,  4.7936e+06,  ...,  0.0000e+00,\n",
       "          0.0000e+00,  0.0000e+00],\n",
       "        [ 7.4258e+02,  4.9608e+05,  4.7936e+06,  ...,  0.0000e+00,\n",
       "          0.0000e+00,  0.0000e+00],\n",
       "        [ 6.9706e+02,  4.9590e+05,  4.7937e+06,  ..., -1.1697e-01,\n",
       "         -3.9087e-02, -8.8570e-02]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indep_columns = ['Dist M', 'X', 'Y', 'Elev ft',\t'Slope at Point','Avg Slope 10m','Avg Slope 20m','Avg Slope 30m']\n",
    "t_indep = tensor(stream_profile_df[indep_columns].values, dtype=torch.float)\n",
    "t_indep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e255f90d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:34.755582Z",
     "iopub.status.busy": "2024-04-23T21:41:34.755211Z",
     "iopub.status.idle": "2024-04-23T21:41:34.761199Z",
     "shell.execute_reply": "2024-04-23T21:41:34.760247Z"
    },
    "papermill": {
     "duration": 0.034138,
     "end_time": "2024-04-23T21:41:34.763481",
     "exception": false,
     "start_time": "2024-04-23T21:41:34.729343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([584, 8])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74fa7344",
   "metadata": {
    "papermill": {
     "duration": 0.023857,
     "end_time": "2024-04-23T21:41:34.816494",
     "exception": false,
     "start_time": "2024-04-23T21:41:34.792637",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Creating a Linear Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "af7ed38d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:34.868184Z",
     "iopub.status.busy": "2024-04-23T21:41:34.867771Z",
     "iopub.status.idle": "2024-04-23T21:41:34.882490Z",
     "shell.execute_reply": "2024-04-23T21:41:34.881555Z"
    },
    "papermill": {
     "duration": 0.044371,
     "end_time": "2024-04-23T21:41:34.885198",
     "exception": false,
     "start_time": "2024-04-23T21:41:34.840827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0.4847, -0.4148,  0.0334, -0.2804, -0.2383,  0.2972, -0.2912, -0.0455])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.manual_seed(27)\n",
    "n_coeff = t_indep.shape[1]\n",
    "coeffs = torch.rand(n_coeff)-0.5\n",
    "coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0f7621c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:34.939686Z",
     "iopub.status.busy": "2024-04-23T21:41:34.938799Z",
     "iopub.status.idle": "2024-04-23T21:41:34.948372Z",
     "shell.execute_reply": "2024-04-23T21:41:34.947313Z"
    },
    "papermill": {
     "duration": 0.040267,
     "end_time": "2024-04-23T21:41:34.950697",
     "exception": false,
     "start_time": "2024-04-23T21:41:34.910430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0000e+00, -2.0575e+05,  1.6030e+05,  ..., -2.9431e-02,\n",
       "          1.7900e-02,  4.6986e-03],\n",
       "        [ 6.1224e-01, -2.0575e+05,  1.6030e+05,  ..., -3.2494e-02,\n",
       "          1.9980e-02,  4.9852e-03],\n",
       "        [ 1.2245e+00, -2.0575e+05,  1.6030e+05,  ..., -2.6624e-02,\n",
       "          2.2403e-02,  5.4627e-03],\n",
       "        ...,\n",
       "        [ 3.5941e+02, -2.0578e+05,  1.6028e+05,  ...,  0.0000e+00,\n",
       "         -0.0000e+00, -0.0000e+00],\n",
       "        [ 3.5992e+02, -2.0578e+05,  1.6028e+05,  ...,  0.0000e+00,\n",
       "         -0.0000e+00, -0.0000e+00],\n",
       "        [ 3.3785e+02, -2.0571e+05,  1.6028e+05,  ..., -3.4759e-02,\n",
       "          1.1381e-02,  4.0272e-03]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep*coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3914322a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.019507Z",
     "iopub.status.busy": "2024-04-23T21:41:35.018850Z",
     "iopub.status.idle": "2024-04-23T21:41:35.033835Z",
     "shell.execute_reply": "2024-04-23T21:41:35.032817Z"
    },
    "papermill": {
     "duration": 0.054635,
     "end_time": "2024-04-23T21:41:35.036195",
     "exception": false,
     "start_time": "2024-04-23T21:41:34.981560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "t_indep[t_indep == 0] = 1e-6\n",
    "\n",
    "vals,indices = t_indep.max(dim=0)\n",
    "t_indep = t_indep / vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "112b491f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.089989Z",
     "iopub.status.busy": "2024-04-23T21:41:35.089652Z",
     "iopub.status.idle": "2024-04-23T21:41:35.097711Z",
     "shell.execute_reply": "2024-04-23T21:41:35.096763Z"
    },
    "papermill": {
     "duration": 0.036614,
     "end_time": "2024-04-23T21:41:35.099816",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.063202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 6.5270e-10, -4.1475e-01,  3.3436e-02,  ..., -5.2885e-01,\n",
       "          1.7900e+04,  4.6986e+03],\n",
       "        [ 8.2447e-04, -4.1475e-01,  3.3436e-02,  ..., -5.8390e-01,\n",
       "          1.9980e+04,  4.9852e+03],\n",
       "        [ 1.6489e-03, -4.1475e-01,  3.3436e-02,  ..., -4.7842e-01,\n",
       "          2.2403e+04,  5.4627e+03],\n",
       "        ...,\n",
       "        [ 4.8400e-01, -4.1481e-01,  3.3432e-02,  ...,  5.3398e-06,\n",
       "         -2.9118e-01, -4.5470e-02],\n",
       "        [ 4.8468e-01, -4.1481e-01,  3.3432e-02,  ...,  5.3398e-06,\n",
       "         -2.9118e-01, -4.5470e-02],\n",
       "        [ 4.5497e-01, -4.1467e-01,  3.3432e-02,  ..., -6.2460e-01,\n",
       "          1.1381e+04,  4.0272e+03]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep*coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "24f008fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.155690Z",
     "iopub.status.busy": "2024-04-23T21:41:35.155317Z",
     "iopub.status.idle": "2024-04-23T21:41:35.161397Z",
     "shell.execute_reply": "2024-04-23T21:41:35.160399Z"
    },
    "papermill": {
     "duration": 0.037691,
     "end_time": "2024-04-23T21:41:35.163735",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.126044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preds = (t_indep*coeffs).sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "da2eed5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.222113Z",
     "iopub.status.busy": "2024-04-23T21:41:35.221682Z",
     "iopub.status.idle": "2024-04-23T21:41:35.229636Z",
     "shell.execute_reply": "2024-04-23T21:41:35.228608Z"
    },
    "papermill": {
     "duration": 0.040288,
     "end_time": "2024-04-23T21:41:35.231874",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.191586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([22597.0605, 24963.7715, 27865.0898, 28329.3262, 31669.1035, 35702.6016,\n",
       "        37892.0352, 40865.1914, 41798.7656, 43442.7734])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5dbbe984",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.291887Z",
     "iopub.status.busy": "2024-04-23T21:41:35.291484Z",
     "iopub.status.idle": "2024-04-23T21:41:35.298205Z",
     "shell.execute_reply": "2024-04-23T21:41:35.297166Z"
    },
    "papermill": {
     "duration": 0.039439,
     "end_time": "2024-04-23T21:41:35.300416",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.260977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([584]), torch.Size([584]))"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_dep.shape, preds.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ba56a831",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.360639Z",
     "iopub.status.busy": "2024-04-23T21:41:35.359720Z",
     "iopub.status.idle": "2024-04-23T21:41:35.370512Z",
     "shell.execute_reply": "2024-04-23T21:41:35.369491Z"
    },
    "papermill": {
     "duration": 0.043534,
     "end_time": "2024-04-23T21:41:35.372848",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.329314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(35455.6116, dtype=torch.float64)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = torch.abs(preds-t_dep).mean()\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1c3c95d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.432016Z",
     "iopub.status.busy": "2024-04-23T21:41:35.431624Z",
     "iopub.status.idle": "2024-04-23T21:41:35.437415Z",
     "shell.execute_reply": "2024-04-23T21:41:35.436425Z"
    },
    "papermill": {
     "duration": 0.038202,
     "end_time": "2024-04-23T21:41:35.439766",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.401564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_preds(coeffs, indeps): return (indeps*coeffs).sum(axis=1)\n",
    "def calc_loss(coeffs, indeps, deps): return torch.abs(calc_preds(coeffs, indeps)-deps).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3e7da3d",
   "metadata": {
    "papermill": {
     "duration": 0.028211,
     "end_time": "2024-04-23T21:41:35.496502",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.468291",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Doing a gradient descent step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9502f3aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.552781Z",
     "iopub.status.busy": "2024-04-23T21:41:35.552332Z",
     "iopub.status.idle": "2024-04-23T21:41:35.559627Z",
     "shell.execute_reply": "2024-04-23T21:41:35.558642Z"
    },
    "papermill": {
     "duration": 0.037825,
     "end_time": "2024-04-23T21:41:35.561848",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.524023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0.4847, -0.4148,  0.0334, -0.2804, -0.2383,  0.2972, -0.2912, -0.0455],\n",
       "       requires_grad=True)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coeffs.requires_grad_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bbea0f4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.619718Z",
     "iopub.status.busy": "2024-04-23T21:41:35.619282Z",
     "iopub.status.idle": "2024-04-23T21:41:35.628026Z",
     "shell.execute_reply": "2024-04-23T21:41:35.627062Z"
    },
    "papermill": {
     "duration": 0.040097,
     "end_time": "2024-04-23T21:41:35.630225",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.590128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(35455.6116, dtype=torch.float64, grad_fn=<MeanBackward0>)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "335f0172",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.688239Z",
     "iopub.status.busy": "2024-04-23T21:41:35.687821Z",
     "iopub.status.idle": "2024-04-23T21:41:35.692757Z",
     "shell.execute_reply": "2024-04-23T21:41:35.691635Z"
    },
    "papermill": {
     "duration": 0.03718,
     "end_time": "2024-04-23T21:41:35.694871",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.657691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "coeffs.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c1a0b03c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.753826Z",
     "iopub.status.busy": "2024-04-23T21:41:35.753450Z",
     "iopub.status.idle": "2024-04-23T21:41:35.824276Z",
     "shell.execute_reply": "2024-04-23T21:41:35.823197Z"
    },
    "papermill": {
     "duration": 0.102785,
     "end_time": "2024-04-23T21:41:35.826400",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.723615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 4.6219e-01,  9.6213e-01,  9.6227e-01,  9.5337e-01, -3.0024e-01,\n",
       "        -1.8880e+00, -1.0529e+05, -1.0555e+05])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss.backward()\n",
    "coeffs.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4db86f76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:35.883268Z",
     "iopub.status.busy": "2024-04-23T21:41:35.882673Z",
     "iopub.status.idle": "2024-04-23T21:41:35.896472Z",
     "shell.execute_reply": "2024-04-23T21:41:35.895364Z"
    },
    "papermill": {
     "duration": 0.045466,
     "end_time": "2024-04-23T21:41:35.898492",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.853026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(4.4452e+09, dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss.backward()\n",
    "with torch.no_grad():\n",
    "    coeffs.sub_(coeffs.grad * 0.1)\n",
    "    coeffs.grad.zero_()\n",
    "    print(calc_loss(coeffs, t_indep, t_dep))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec7dbede",
   "metadata": {
    "papermill": {
     "duration": 0.027008,
     "end_time": "2024-04-23T21:41:35.951375",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.924367",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Training a Linear Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "406e1a78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:36.005176Z",
     "iopub.status.busy": "2024-04-23T21:41:36.004129Z",
     "iopub.status.idle": "2024-04-23T21:41:38.846198Z",
     "shell.execute_reply": "2024-04-23T21:41:38.845339Z"
    },
    "papermill": {
     "duration": 2.871422,
     "end_time": "2024-04-23T21:41:38.848723",
     "exception": false,
     "start_time": "2024-04-23T21:41:35.977301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "from fastai.data.transforms import RandomSplitter\n",
    "trn_split, val_split = RandomSplitter(seed=27)(stream_profile_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "de472e36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:38.906738Z",
     "iopub.status.busy": "2024-04-23T21:41:38.906021Z",
     "iopub.status.idle": "2024-04-23T21:41:38.916991Z",
     "shell.execute_reply": "2024-04-23T21:41:38.916051Z"
    },
    "papermill": {
     "duration": 0.042528,
     "end_time": "2024-04-23T21:41:38.919123",
     "exception": false,
     "start_time": "2024-04-23T21:41:38.876595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(468, 116)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trn_indep, val_indep = t_indep[trn_split], t_indep[val_split]\n",
    "trn_dep, val_dep = t_dep[trn_split], t_dep[val_split]\n",
    "len(trn_indep), len(val_indep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "433ae967",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:38.977240Z",
     "iopub.status.busy": "2024-04-23T21:41:38.976894Z",
     "iopub.status.idle": "2024-04-23T21:41:38.981880Z",
     "shell.execute_reply": "2024-04-23T21:41:38.981051Z"
    },
    "papermill": {
     "duration": 0.035759,
     "end_time": "2024-04-23T21:41:38.983917",
     "exception": false,
     "start_time": "2024-04-23T21:41:38.948158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def update_coeffs(coeffs, lr):\n",
    "    coeffs.sub_(coeffs * lr)\n",
    "    coeffs.grad.zero_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a0c7bc24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.042292Z",
     "iopub.status.busy": "2024-04-23T21:41:39.041891Z",
     "iopub.status.idle": "2024-04-23T21:41:39.047511Z",
     "shell.execute_reply": "2024-04-23T21:41:39.046515Z"
    },
    "papermill": {
     "duration": 0.036873,
     "end_time": "2024-04-23T21:41:39.049626",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.012753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def one_epoch(coeffs, lr):\n",
    "    loss = calc_loss(coeffs, trn_indep, trn_dep)\n",
    "    loss.backward()\n",
    "    with torch.no_grad(): update_coeffs(coeffs, lr)\n",
    "    print(f\"{loss:3f}\", end=\"; \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3592600c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.105282Z",
     "iopub.status.busy": "2024-04-23T21:41:39.104948Z",
     "iopub.status.idle": "2024-04-23T21:41:39.109608Z",
     "shell.execute_reply": "2024-04-23T21:41:39.108648Z"
    },
    "papermill": {
     "duration": 0.03463,
     "end_time": "2024-04-23T21:41:39.111848",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.077218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def init_coeffs(): return (torch.rand(n_coeff)-0.5).requires_grad_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ad75eb34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.169548Z",
     "iopub.status.busy": "2024-04-23T21:41:39.168607Z",
     "iopub.status.idle": "2024-04-23T21:41:39.174135Z",
     "shell.execute_reply": "2024-04-23T21:41:39.173199Z"
    },
    "papermill": {
     "duration": 0.036564,
     "end_time": "2024-04-23T21:41:39.176150",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.139586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(epochs=30, lr = 0.01):\n",
    "    torch.manual_seed(27)\n",
    "    coeffs = init_coeffs()\n",
    "    for i in range(epochs): one_epoch(coeffs, lr=lr)\n",
    "    return coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d92f03c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.233536Z",
     "iopub.status.busy": "2024-04-23T21:41:39.232651Z",
     "iopub.status.idle": "2024-04-23T21:41:39.245077Z",
     "shell.execute_reply": "2024-04-23T21:41:39.244042Z"
    },
    "papermill": {
     "duration": 0.043659,
     "end_time": "2024-04-23T21:41:39.247089",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.203430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35864.836165; 28691.862243; 22953.483318; 18362.780271; 14690.217573; 11752.167531; 9401.727925; 7521.375960; 6017.094183; 4813.668772; 3850.928606; 3080.736527; 2464.582817; 1971.659922; 1577.321480; 1261.850797; 1009.474271; 807.572983; "
     ]
    }
   ],
   "source": [
    "coeffs = train_model(18, lr=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "099221a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.306563Z",
     "iopub.status.busy": "2024-04-23T21:41:39.305819Z",
     "iopub.status.idle": "2024-04-23T21:41:39.310488Z",
     "shell.execute_reply": "2024-04-23T21:41:39.309533Z"
    },
    "papermill": {
     "duration": 0.036895,
     "end_time": "2024-04-23T21:41:39.312659",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.275764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preds = calc_preds(coeffs, val_indep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "72da955d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.375307Z",
     "iopub.status.busy": "2024-04-23T21:41:39.374647Z",
     "iopub.status.idle": "2024-04-23T21:41:39.382334Z",
     "shell.execute_reply": "2024-04-23T21:41:39.381420Z"
    },
    "papermill": {
     "duration": 0.041478,
     "end_time": "2024-04-23T21:41:39.384576",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.343098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([False,  True, False, False, False, False, False, False, False, False,\n",
       "        False, False, False,  True, False, False])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = val_dep.bool()==(preds>0.5)\n",
    "results[:16]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7abe9b62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.445214Z",
     "iopub.status.busy": "2024-04-23T21:41:39.444841Z",
     "iopub.status.idle": "2024-04-23T21:41:39.453065Z",
     "shell.execute_reply": "2024-04-23T21:41:39.451991Z"
    },
    "papermill": {
     "duration": 0.041418,
     "end_time": "2024-04-23T21:41:39.455635",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.414217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.0517)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "40fdb005",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.519825Z",
     "iopub.status.busy": "2024-04-23T21:41:39.519452Z",
     "iopub.status.idle": "2024-04-23T21:41:39.527713Z",
     "shell.execute_reply": "2024-04-23T21:41:39.526707Z"
    },
    "papermill": {
     "duration": 0.042979,
     "end_time": "2024-04-23T21:41:39.529905",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.486926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def acc(coeffs): return (val_dep.bool()==calc_preds(coeffs, val_indep)).float().mean()\n",
    "acc(coeffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "404f0e2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.593725Z",
     "iopub.status.busy": "2024-04-23T21:41:39.593303Z",
     "iopub.status.idle": "2024-04-23T21:41:39.601402Z",
     "shell.execute_reply": "2024-04-23T21:41:39.600419Z"
    },
    "papermill": {
     "duration": 0.04331,
     "end_time": "2024-04-23T21:41:39.603617",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.560307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 228.4556,  437.2232, 1029.4365,  939.1874,  579.8965,  588.3231,\n",
       "         579.2625, 1032.9220,  661.7859, 1306.5138,  757.3552,  428.8132,\n",
       "         746.0136,  479.1485,  756.1600,  646.9604,  374.7926,  459.0062,\n",
       "         797.0262,  123.1197,  256.8824, 1093.0975, 1286.4025,  776.6594,\n",
       "         303.5705,  411.5506,  329.6645,  449.9842], grad_fn=<SliceBackward0>)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:28]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "27455a88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.666581Z",
     "iopub.status.busy": "2024-04-23T21:41:39.665402Z",
     "iopub.status.idle": "2024-04-23T21:41:39.670890Z",
     "shell.execute_reply": "2024-04-23T21:41:39.669937Z"
    },
    "papermill": {
     "duration": 0.039316,
     "end_time": "2024-04-23T21:41:39.672977",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.633661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_preds(coeffs, indeps): return torch.sigmoid((indeps*coeffs).sum(axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "75d5d8ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.732867Z",
     "iopub.status.busy": "2024-04-23T21:41:39.732549Z",
     "iopub.status.idle": "2024-04-23T21:41:39.751570Z",
     "shell.execute_reply": "2024-04-23T21:41:39.750527Z"
    },
    "papermill": {
     "duration": 0.050852,
     "end_time": "2024-04-23T21:41:39.753628",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.702776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.955704; 0.956338; 0.956827; 0.957199; 0.957481; 0.957693; 0.957853; 0.957973; 0.958063; 0.958131; 0.958181; 0.958219; 0.958248; 0.958269; 0.958285; 0.958297; 0.958306; 0.958313; 0.958318; 0.958322; 0.958325; 0.958327; 0.958328; 0.958328; 0.958316; 0.958254; 0.958050; 0.957526; 0.956304; 0.953451; "
     ]
    }
   ],
   "source": [
    "coeffs = train_model(lr=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "3ebb47dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-23T21:41:39.817079Z",
     "iopub.status.busy": "2024-04-23T21:41:39.816740Z",
     "iopub.status.idle": "2024-04-23T21:41:39.824033Z",
     "shell.execute_reply": "2024-04-23T21:41:39.823131Z"
    },
    "papermill": {
     "duration": 0.041892,
     "end_time": "2024-04-23T21:41:39.826264",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.784372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc(coeffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06ebda1c",
   "metadata": {
    "papermill": {
     "duration": 0.029518,
     "end_time": "2024-04-23T21:41:39.884390",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.854872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d540ab6",
   "metadata": {
    "papermill": {
     "duration": 0.030573,
     "end_time": "2024-04-23T21:41:39.944449",
     "exception": false,
     "start_time": "2024-04-23T21:41:39.913876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 4638965,
     "sourceId": 7899275,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4778935,
     "sourceId": 8094226,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30683,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 23.689116,
   "end_time": "2024-04-23T21:41:41.300126",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-23T21:41:17.611010",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
