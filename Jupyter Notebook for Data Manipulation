{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7dc1bd16",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:12.228082Z",
     "iopub.status.busy": "2024-04-25T03:02:12.227736Z",
     "iopub.status.idle": "2024-04-25T03:02:13.091818Z",
     "shell.execute_reply": "2024-04-25T03:02:13.090669Z"
    },
    "papermill": {
     "duration": 0.886281,
     "end_time": "2024-04-25T03:02:13.094361",
     "exception": false,
     "start_time": "2024-04-25T03:02:12.208080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Long_Pro.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Project_Structures.csv\n",
      "/kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Long_Pro.csv\n",
      "/kaggle/input/riehle-1/Riehle_1_Project_Structures.csv\n",
      "/kaggle/input/riehle-1/Riehle_1_Long_Pro.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3a7e0812",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.135314Z",
     "iopub.status.busy": "2024-04-25T03:02:13.134253Z",
     "iopub.status.idle": "2024-04-25T03:02:13.174246Z",
     "shell.execute_reply": "2024-04-25T03:02:13.173181Z"
    },
    "papermill": {
     "duration": 0.063422,
     "end_time": "2024-04-25T03:02:13.176666",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.113244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>495998.0819</td>\n",
       "      <td>4794269.644</td>\n",
       "      <td>4872.834961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.263171269</td>\n",
       "      <td>495998.744</td>\n",
       "      <td>4794268.568</td>\n",
       "      <td>4872.605469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.526342538</td>\n",
       "      <td>495999.406</td>\n",
       "      <td>4794267.492</td>\n",
       "      <td>4872.506836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.789513807</td>\n",
       "      <td>496000.068</td>\n",
       "      <td>4794266.416</td>\n",
       "      <td>4872.375488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.052685076</td>\n",
       "      <td>496000.73</td>\n",
       "      <td>4794265.34</td>\n",
       "      <td>4872.178711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>579</th>\n",
       "      <td>738.2102804</td>\n",
       "      <td>496079.3353</td>\n",
       "      <td>4793625.201</td>\n",
       "      <td>4793.208496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>580</th>\n",
       "      <td>739.468345</td>\n",
       "      <td>496079.651</td>\n",
       "      <td>4793623.984</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>581</th>\n",
       "      <td>740.5064947</td>\n",
       "      <td>496079.8314</td>\n",
       "      <td>4793622.961</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582</th>\n",
       "      <td>741.5446445</td>\n",
       "      <td>496080.0118</td>\n",
       "      <td>4793621.939</td>\n",
       "      <td>4793.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>583</th>\n",
       "      <td>742.5827942</td>\n",
       "      <td>496080.1922</td>\n",
       "      <td>4793620.916</td>\n",
       "      <td>4793.110352</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>583 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft\n",
       "1              0  495998.0819  4794269.644  4872.834961\n",
       "2    1.263171269   495998.744  4794268.568  4872.605469\n",
       "3    2.526342538   495999.406  4794267.492  4872.506836\n",
       "4    3.789513807   496000.068  4794266.416  4872.375488\n",
       "5    5.052685076    496000.73   4794265.34  4872.178711\n",
       "..           ...          ...          ...          ...\n",
       "579  738.2102804  496079.3353  4793625.201  4793.208496\n",
       "580   739.468345   496079.651  4793623.984  4793.175781\n",
       "581  740.5064947  496079.8314  4793622.961  4793.175781\n",
       "582  741.5446445  496080.0118  4793621.939  4793.175781\n",
       "583  742.5827942  496080.1922  4793620.916  4793.110352\n",
       "\n",
       "[583 rows x 4 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df = pd.read_csv('/kaggle/input/riehle-1/Riehle_1_Long_Pro.csv')\n",
    "stream_profile_df = stream_profile_df.rename(stream_profile_df.iloc[0]).iloc[1:]\n",
    "stream_profile_df.columns = ['Dist M', 'X', 'Y', 'Elev ft']\n",
    "stream_profile_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ec018c41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.217201Z",
     "iopub.status.busy": "2024-04-25T03:02:13.216839Z",
     "iopub.status.idle": "2024-04-25T03:02:13.252717Z",
     "shell.execute_reply": "2024-04-25T03:02:13.251516Z"
    },
    "papermill": {
     "duration": 0.059115,
     "end_time": "2024-04-25T03:02:13.255230",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.196115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>ident</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Y</th>\n",
       "      <th>X</th>\n",
       "      <th>comment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-07</td>\n",
       "      <td>43.300586</td>\n",
       "      <td>-105.049715</td>\n",
       "      <td>4794195.671</td>\n",
       "      <td>495968.4718</td>\n",
       "      <td>ZB 12-4-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-04</td>\n",
       "      <td>43.299027</td>\n",
       "      <td>-105.050437</td>\n",
       "      <td>4794022.573</td>\n",
       "      <td>495909.8059</td>\n",
       "      <td>RRD 10-10-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-01</td>\n",
       "      <td>43.298433</td>\n",
       "      <td>-105.049843</td>\n",
       "      <td>4793956.578</td>\n",
       "      <td>495957.9471</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-09</td>\n",
       "      <td>43.301886</td>\n",
       "      <td>-105.049627</td>\n",
       "      <td>4794340.038</td>\n",
       "      <td>495975.6952</td>\n",
       "      <td>Mdw small chnl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-08</td>\n",
       "      <td>43.300821</td>\n",
       "      <td>-105.049454</td>\n",
       "      <td>4794221.757</td>\n",
       "      <td>495989.6569</td>\n",
       "      <td>10-15-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-06</td>\n",
       "      <td>43.299888</td>\n",
       "      <td>-105.050330</td>\n",
       "      <td>4794118.185</td>\n",
       "      <td>495918.5425</td>\n",
       "      <td>WF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-05</td>\n",
       "      <td>43.299390</td>\n",
       "      <td>-105.050454</td>\n",
       "      <td>4794062.887</td>\n",
       "      <td>495908.4514</td>\n",
       "      <td>15-8-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-02</td>\n",
       "      <td>43.298728</td>\n",
       "      <td>-105.050197</td>\n",
       "      <td>4793989.382</td>\n",
       "      <td>495929.2187</td>\n",
       "      <td>8-14-2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-03</td>\n",
       "      <td>43.298965</td>\n",
       "      <td>-105.050397</td>\n",
       "      <td>4794015.678</td>\n",
       "      <td>495913.0101</td>\n",
       "      <td>12.5-17-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-101</td>\n",
       "      <td>43.295872</td>\n",
       "      <td>-105.048572</td>\n",
       "      <td>4793672.122</td>\n",
       "      <td>496060.8806</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-102</td>\n",
       "      <td>43.296017</td>\n",
       "      <td>-105.048671</td>\n",
       "      <td>4793688.225</td>\n",
       "      <td>496052.8807</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-103</td>\n",
       "      <td>43.296140</td>\n",
       "      <td>-105.048585</td>\n",
       "      <td>4793701.847</td>\n",
       "      <td>496059.8165</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-104</td>\n",
       "      <td>43.296230</td>\n",
       "      <td>-105.048663</td>\n",
       "      <td>4793711.847</td>\n",
       "      <td>496053.5120</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-109</td>\n",
       "      <td>43.296734</td>\n",
       "      <td>-105.048855</td>\n",
       "      <td>4793767.847</td>\n",
       "      <td>496037.9898</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-108</td>\n",
       "      <td>43.296600</td>\n",
       "      <td>-105.048807</td>\n",
       "      <td>4793753.018</td>\n",
       "      <td>496041.8808</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-107</td>\n",
       "      <td>43.296550</td>\n",
       "      <td>-105.048807</td>\n",
       "      <td>4793747.398</td>\n",
       "      <td>496041.8808</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-106</td>\n",
       "      <td>43.296455</td>\n",
       "      <td>-105.048612</td>\n",
       "      <td>4793736.827</td>\n",
       "      <td>496057.7109</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-100</td>\n",
       "      <td>43.295859</td>\n",
       "      <td>-105.048531</td>\n",
       "      <td>4793670.706</td>\n",
       "      <td>496064.2344</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-105</td>\n",
       "      <td>43.296445</td>\n",
       "      <td>-105.048622</td>\n",
       "      <td>4793735.773</td>\n",
       "      <td>496056.8265</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>Riehle 1-110</td>\n",
       "      <td>43.297916</td>\n",
       "      <td>-105.049595</td>\n",
       "      <td>4793899.195</td>\n",
       "      <td>495978.0270</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-111</td>\n",
       "      <td>43.298726</td>\n",
       "      <td>-105.050188</td>\n",
       "      <td>4793989.098</td>\n",
       "      <td>495929.9958</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>WAYPOINT</td>\n",
       "      <td>RIEHLE 1-112</td>\n",
       "      <td>43.299875</td>\n",
       "      <td>-105.050298</td>\n",
       "      <td>4794116.776</td>\n",
       "      <td>495921.0939</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        type         ident   Latitude   Longitude            Y            X  \\\n",
       "0   WAYPOINT   RIEHLE 1-07  43.300586 -105.049715  4794195.671  495968.4718   \n",
       "1   WAYPOINT   RIEHLE 1-04  43.299027 -105.050437  4794022.573  495909.8059   \n",
       "2   WAYPOINT   RIEHLE 1-01  43.298433 -105.049843  4793956.578  495957.9471   \n",
       "3   WAYPOINT   RIEHLE 1-09  43.301886 -105.049627  4794340.038  495975.6952   \n",
       "4   WAYPOINT   RIEHLE 1-08  43.300821 -105.049454  4794221.757  495989.6569   \n",
       "5   WAYPOINT   RIEHLE 1-06  43.299888 -105.050330  4794118.185  495918.5425   \n",
       "6   WAYPOINT   RIEHLE 1-05  43.299390 -105.050454  4794062.887  495908.4514   \n",
       "7   WAYPOINT   RIEHLE 1-02  43.298728 -105.050197  4793989.382  495929.2187   \n",
       "8   WAYPOINT   RIEHLE 1-03  43.298965 -105.050397  4794015.678  495913.0101   \n",
       "9   WAYPOINT  RIEHLE 1-101  43.295872 -105.048572  4793672.122  496060.8806   \n",
       "10  WAYPOINT  RIEHLE 1-102  43.296017 -105.048671  4793688.225  496052.8807   \n",
       "11  WAYPOINT  RIEHLE 1-103  43.296140 -105.048585  4793701.847  496059.8165   \n",
       "12  WAYPOINT  RIEHLE 1-104  43.296230 -105.048663  4793711.847  496053.5120   \n",
       "13  WAYPOINT  RIEHLE 1-109  43.296734 -105.048855  4793767.847  496037.9898   \n",
       "14  WAYPOINT  RIEHLE 1-108  43.296600 -105.048807  4793753.018  496041.8808   \n",
       "15  WAYPOINT  RIEHLE 1-107  43.296550 -105.048807  4793747.398  496041.8808   \n",
       "16  WAYPOINT  RIEHLE 1-106  43.296455 -105.048612  4793736.827  496057.7109   \n",
       "17  WAYPOINT  RIEHLE 1-100  43.295859 -105.048531  4793670.706  496064.2344   \n",
       "18  WAYPOINT  RIEHLE 1-105  43.296445 -105.048622  4793735.773  496056.8265   \n",
       "19  WAYPOINT  Riehle 1-110  43.297916 -105.049595  4793899.195  495978.0270   \n",
       "20  WAYPOINT  RIEHLE 1-111  43.298726 -105.050188  4793989.098  495929.9958   \n",
       "21  WAYPOINT  RIEHLE 1-112  43.299875 -105.050298  4794116.776  495921.0939   \n",
       "\n",
       "           comment  \n",
       "0        ZB 12-4-2  \n",
       "1      RRD 10-10-1  \n",
       "2              NaN  \n",
       "3   Mdw small chnl  \n",
       "4          10-15-1  \n",
       "5               WF  \n",
       "6           15-8-1  \n",
       "7         8-14-2.5  \n",
       "8        12.5-17-2  \n",
       "9              NaN  \n",
       "10             NaN  \n",
       "11             NaN  \n",
       "12             NaN  \n",
       "13             NaN  \n",
       "14             NaN  \n",
       "15             NaN  \n",
       "16             NaN  \n",
       "17             NaN  \n",
       "18             NaN  \n",
       "19             NaN  \n",
       "20             NaN  \n",
       "21             NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "structures_df = pd.read_csv('/kaggle/input/riehle-1/Riehle_1_Project_Structures.csv')\n",
    "structures_df = structures_df.rename(columns={'y_proj': 'Y', 'x_proj': 'X'})\n",
    "structures_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2017d16",
   "metadata": {
    "papermill": {
     "duration": 0.019626,
     "end_time": "2024-04-25T03:02:13.296861",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.277235",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The structure data is not very useful in it's current form as the positions of the strutcure do not fall on the stream path. We will need to develop an algorythm to calculate the closest points along the stream path which would correspond to the strutcure locations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7cfd9db5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.337474Z",
     "iopub.status.busy": "2024-04-25T03:02:13.337083Z",
     "iopub.status.idle": "2024-04-25T03:02:13.344207Z",
     "shell.execute_reply": "2024-04-25T03:02:13.343160Z"
    },
    "papermill": {
     "duration": 0.03027,
     "end_time": "2024-04-25T03:02:13.346399",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.316129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_closest_points (stream_path, structure_points):\n",
    "    closest_points = []\n",
    "    for x, y in structure_points:\n",
    "        min_distance = float('inf')\n",
    "        for x1, y1 in stream_path:\n",
    "            distance = ((x1 - x)**2 + (y1 - y)**2)**0.5\n",
    "            if distance < min_distance:\n",
    "                min_distance = distance\n",
    "                close_point_pair = [x1, y1]\n",
    "        closest_points.append(close_point_pair)\n",
    "    return closest_points"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37235f2b",
   "metadata": {
    "papermill": {
     "duration": 0.019089,
     "end_time": "2024-04-25T03:02:13.384936",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.365847",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This function takes the stream path and the structure points then performs the pythagorean theorem on to calculate the euclidian distance between the current structure and all points along the stream path. It finds the shortest distance and adds that point along the stream path to the closest points array. This array ends with a collection of the closest points to each structure."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aef30384",
   "metadata": {
    "papermill": {
     "duration": 0.019246,
     "end_time": "2024-04-25T03:02:13.423624",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.404378",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Next I need to create a function that will create an array from each dataframe so we can feed the appropriate data structure into the `get_closest_points` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7ab113dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.463963Z",
     "iopub.status.busy": "2024-04-25T03:02:13.463087Z",
     "iopub.status.idle": "2024-04-25T03:02:13.471279Z",
     "shell.execute_reply": "2024-04-25T03:02:13.470238Z"
    },
    "papermill": {
     "duration": 0.030612,
     "end_time": "2024-04-25T03:02:13.473520",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.442908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " def zip_df_cols(dataframe):\n",
    "    array = []\n",
    "    for x,y in zip(dataframe['X'], dataframe['Y']):\n",
    "        array.append([float(x), float(y)])\n",
    "    return array\n",
    "\n",
    "structures_array = zip_df_cols(structures_df)\n",
    "stream_profile_array = zip_df_cols(stream_profile_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "952bdcc8",
   "metadata": {
    "papermill": {
     "duration": 0.019385,
     "end_time": "2024-04-25T03:02:13.512680",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.493295",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we can find the closest points along the stream profile that correspond to the structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6ed1c838",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.554042Z",
     "iopub.status.busy": "2024-04-25T03:02:13.553663Z",
     "iopub.status.idle": "2024-04-25T03:02:13.570486Z",
     "shell.execute_reply": "2024-04-25T03:02:13.569267Z"
    },
    "papermill": {
     "duration": 0.04039,
     "end_time": "2024-04-25T03:02:13.572814",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.532424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[495968.4379, 4794196.563], [495909.7792, 4794022.362], [495954.9406, 4793957.022], [495998.0819, 4794269.644], [495990.7051, 4794221.647], [495920.4458, 4794117.176], [495906.7227, 4794063.485], [495928.4509, 4793989.593], [495913.6466, 4794015.625], [496065.5786, 4793674.139], [496059.2641, 4793690.376], [496059.4445, 4793702.284], [496056.1369, 4793712.928], [496037.4699, 4793768.28], [496040.0949, 4793752.89], [496042.6659, 4793747.388], [496057.2795, 4793736.202], [496067.0219, 4793671.072], [496057.2795, 4793736.202], [495977.3133, 4793899.187], [495929.3658, 4793988.304], [495920.4458, 4794117.176]]\n"
     ]
    }
   ],
   "source": [
    "closest_profile_points = get_closest_points(stream_profile_array, structures_array)\n",
    "print(closest_profile_points)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3852ebcd",
   "metadata": {
    "papermill": {
     "duration": 0.019832,
     "end_time": "2024-04-25T03:02:13.612552",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.592720",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have an array of the closest points along the stream profile that correspond to our structures. We can note that the first structure falls out of the range of our stream profile so we can neglect this point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f1b0e9a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.653931Z",
     "iopub.status.busy": "2024-04-25T03:02:13.653547Z",
     "iopub.status.idle": "2024-04-25T03:02:13.661613Z",
     "shell.execute_reply": "2024-04-25T03:02:13.660586Z"
    },
    "papermill": {
     "duration": 0.031415,
     "end_time": "2024-04-25T03:02:13.663927",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.632512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "closest_profile_points = closest_profile_points[1:]\n",
    "len(closest_profile_points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04cee661",
   "metadata": {
    "papermill": {
     "duration": 0.019676,
     "end_time": "2024-04-25T03:02:13.703061",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.683385",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's package this whole process as a function to allow us to repeat it for every section of stream."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3db9f8a6",
   "metadata": {
    "papermill": {
     "duration": 0.019162,
     "end_time": "2024-04-25T03:02:13.741484",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.722322",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Building a Data Processing Object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "527ce648",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.782439Z",
     "iopub.status.busy": "2024-04-25T03:02:13.782067Z",
     "iopub.status.idle": "2024-04-25T03:02:13.833370Z",
     "shell.execute_reply": "2024-04-25T03:02:13.832336Z"
    },
    "papermill": {
     "duration": 0.074838,
     "end_time": "2024-04-25T03:02:13.835740",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.760902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from typing import List, Tuple\n",
    "\n",
    "class New_Dataframe:\n",
    "    \n",
    "    class FinalDataFrame:\n",
    "        def __init__(self, final_df, stream_profiles):\n",
    "            self.final_df = final_df\n",
    "            self.stream_profiles = stream_profiles\n",
    "    \n",
    "    def split_profile_and_structures(self, data_list_array: List[str]) -> Tuple[List[str], List[str]]:\n",
    "        \"\"\"\n",
    "        Splits a list of strings into two lists: profile_list and structure_list.\n",
    "\n",
    "        Args:\n",
    "            data_list_array (List[str]): A list of strings to be split.\n",
    "\n",
    "        Returns:\n",
    "            Tuple[List[str], List[str]]: A tuple containing the profile_list and structure_list.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_list = []\n",
    "        structure_list = []\n",
    "        \n",
    "        for item in data_list_array:\n",
    "            if 'Long' in item:\n",
    "                profile_list.append(item)\n",
    "            else:\n",
    "                structure_list.append(item)\n",
    "        return profile_list, structure_list\n",
    "    \n",
    "    def pair_profile_and_structure(self,datalist: List[str]) -> List[List[List[str]]]:\n",
    "        \n",
    "        \"\"\"\n",
    "        Pairs profile and structure items from a list of strings.\n",
    "\n",
    "        Args:\n",
    "            datalist (List[str]): A list of strings containing profile and structure items.\n",
    "\n",
    "        Returns:\n",
    "            List[List[List[str]]]: A list of pairs of profile and structure items.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_list, structure_list = self.split_profile_and_structures(datalist)\n",
    "        profile_structure_pair_arr = []\n",
    "        \n",
    "        for stream_profile in profile_list:\n",
    "            profile_structure_pair = [stream_profile]\n",
    "            search_pattern = r'([\\w]+)_(\\d+)([A-Z]?)(?=_)'\n",
    "            match = re.search(search_pattern, stream_profile)\n",
    "            \n",
    "            if match:\n",
    "                stream_name = match.group(1)\n",
    "                stream_section = match.group(2)\n",
    "                stream_section_letter = match.group(3)\n",
    "            \n",
    "            for structure in structure_list:\n",
    "                structure_match = re.search(search_pattern, structure)\n",
    "                if structure_match and structure_match.group(1) == stream_name and structure_match.group(2) == stream_section and structure_match.group(3) == stream_section_letter:\n",
    "                    profile_structure_pair.append(structure)\n",
    "                    profile_structure_pair_arr.append(profile_structure_pair)\n",
    "                    break\n",
    "            \n",
    "        return profile_structure_pair_arr\n",
    "  \n",
    "    def get_closest_points(self, stream_path_df: pd.DataFrame, structure_df: pd.DataFrame) -> List[List[float]]:\n",
    "        \"\"\"\n",
    "        Finds the closest points between the stream_path_df and structure_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            structure_df (pd.DataFrame): The DataFrame containing the structure data.\n",
    "\n",
    "        Returns:\n",
    "            List[List[float]]: A list of closest points, where each point is a list of [x, y] coordinates.\n",
    "        \"\"\"\n",
    "        closest_points = []\n",
    "        for i in range(len(structure_df['x_proj'])):\n",
    "            structure_x = structure_df['x_proj'].iloc[i]\n",
    "            structure_y = structure_df['y_proj'].iloc[i]\n",
    "\n",
    "            min_dist = float('inf')\n",
    "\n",
    "            for j in range(len(stream_path_df['X'])):\n",
    "                stream_path_x = stream_path_df['X'].iloc[j]\n",
    "                stream_path_y = stream_path_df['Y'].iloc[j]\n",
    "                dist = ((structure_x - stream_path_x)**2 + (structure_y - stream_path_y)**2)**0.5\n",
    "                \n",
    "                if dist < min_dist:\n",
    "                    min_dist = dist\n",
    "                    closest_point = [stream_path_x, stream_path_y]\n",
    "                    \n",
    "            closest_points.append(closest_point)\n",
    "        return closest_points\n",
    "    \n",
    "    def create_headcut_bools(self, stream_path_df: pd.DataFrame, closest_points: List[List[float]]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Adds a 'has headcut' column to the stream_path_df based on the closest points.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            closest_points (List[List[float]]): A list of closest points, where each point is a list of [x, y] coordinates.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the 'has headcut' column added.\n",
    "        \"\"\"\n",
    "        for i in range(len(stream_path_df)):\n",
    "            x_val, y_val = stream_path_df['X'].iloc[i], stream_path_df['Y'].iloc[i]\n",
    "            has_headcut_bool = False\n",
    "            for j in range(len(closest_points)):\n",
    "                if closest_points[j][0] == x_val and closest_points[j][1] == y_val:\n",
    "                    has_headcut_bool = True\n",
    "                    break\n",
    "            stream_path_df.at[i, 'has headcut'] = 1 if has_headcut_bool else 0\n",
    "        return stream_path_df\n",
    "\n",
    "    \n",
    "    def get_avg_slopes(self, stream_path_df: pd.DataFrame, slope_arr: List[int] = [1, 5, 10, 15]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the average slope for the given slope_arr and adds the slope columns to the stream_path_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            slope_arr (List[int]): A list of slope gap values to calculate the slopes for.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the average slope columns added.\n",
    "        \"\"\"\n",
    "        for slope_gap in slope_arr:\n",
    "            stream_path_df = self.calc_slope(stream_path_df, slope_gap)\n",
    "        return stream_path_df\n",
    "    def calc_slope(self, stream_path_df: pd.DataFrame, slope_gap: int) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the slope at each point in the stream_path_df using the given slope_gap.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            slope_gap (int): The number of points to consider for the slope calculation.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the slope columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            index_1 = max(0, i-slope_gap)\n",
    "            index_2 = min(stream_length - 1, i+slope_gap)\n",
    "            dist_delta = stream_path_df['Dist M'].iloc[index_2] - stream_path_df['Dist M'].iloc[index_1]\n",
    "            elev_delta = stream_path_df['Elev Ft'].iloc[index_2] - stream_path_df['Elev Ft'].iloc[index_1]\n",
    "            \n",
    "            if dist_delta == 0:\n",
    "                slope = 0\n",
    "                print(f\"dist_delta = 0  at {i}\")\n",
    "            else:\n",
    "                slope = elev_delta/dist_delta\n",
    "            column_title = f\"Slope Gap: {slope_gap}\"\n",
    "            stream_path_df.at[i, column_title] = slope\n",
    "        \n",
    "        return stream_path_df\n",
    "    \n",
    "    def get_sinuosity(self, stream_path_df: pd.DataFrame, sinuosity_arr: List[int] = [50, 100, 150]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the sinuosity for the given sinuosity_arr and adds the sinuosity columns to the stream_path_df.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            sinuosity_arr (List[int]): A list of sinuosity gap values to calculate the sinouositys for.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        \n",
    "        for sinuosity_gap in sinuosity_arr:\n",
    "            stream_path_df = self.calc_sinuosity(stream_path_df, sinuosity_gap)\n",
    "        return stream_path_df\n",
    "    \n",
    "    def calc_sinuosity(self, stream_path_df: pd.DataFrame, sinuosity_gap: int) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Calculates the sinuosity at each point in the stream_path_df using the given sinuosity_gap.\n",
    "\n",
    "        Args:\n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\n",
    "            sinuosity_gap (int): The number of points to consider for the sinuosity calculation.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            index_1 = max(0, i-sinuosity_gap)\n",
    "            index_2 = min(stream_length - 1, i+sinuosity_gap)\n",
    "            stream_dist = stream_path_df['Dist M'].iloc[index_2] - stream_path_df['Dist M'].iloc[index_1]\n",
    "            \n",
    "            x_min, y_min =  stream_path_df['X'].iloc[index_1], stream_path_df['Y'].iloc[index_1]\n",
    "            x_max, y_max = stream_path_df['X'].iloc[index_2], stream_path_df['Y'].iloc[index_2]\n",
    "            linear_dist = ((x_max - x_min)**2 + (y_max - y_min)**2)**0.5\n",
    "            \n",
    "            \n",
    "            if linear_dist == 0:\n",
    "                sinuosity = 0\n",
    "            else:\n",
    "                sinuosity = stream_dist/linear_dist\n",
    "            \n",
    "            column_title = f\"Sinuosity Gap: {sinuosity_gap}\"\n",
    "            stream_path_df.at[i, column_title] = sinuosity\n",
    "        \n",
    "        return stream_path_df\n",
    "    \n",
    "    def get_deviation_from_avg(self, stream_path_df: pd.DataFrame) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Finds the deviation in elevation change from average.\n",
    "        \n",
    "        Args: \n",
    "            stream_path_df (pd.DataFrame): The DataFrame containing the stream path data.\\\n",
    "            \n",
    "        Returns:\n",
    "            pd.DataFrame: The modified stream_path_df with the sinuosity columns added.\n",
    "        \"\"\"\n",
    "        stream_length = len(stream_path_df['X'])\n",
    "        elev_change_arr = []\n",
    "        for i in range(stream_length-1):\n",
    "            elev_change = stream_path_df['Elev Ft'].iloc[i+1] - stream_path_df['Elev Ft'].iloc[i]\n",
    "            elev_change_arr.append(elev_change)\n",
    "        elev_change_arr.append(elev_change)    \n",
    "        avg_elev_change = sum(elev_change_arr)/float(len(elev_change_arr))\n",
    "        \n",
    "        for i in range(stream_length):\n",
    "            dev_from_avg = avg_elev_change - elev_change_arr[i]\n",
    "            column_title = f\"Dev From Avg\"\n",
    "            stream_path_df.at[i, column_title] = dev_from_avg\n",
    "        \n",
    "        return stream_path_df\n",
    "            \n",
    "    \n",
    "    def create_final_dataframe(self, datalist: List[str]) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Creates the final DataFrame by processing the input datalist.\n",
    "\n",
    "        Args:\n",
    "            datalist (List[str]): A list of file paths or other data.\n",
    "\n",
    "        Returns:\n",
    "            pd.DataFrame: The final consolidated DataFrame.\n",
    "        \"\"\"\n",
    "        \n",
    "        profile_structure_list = self.pair_profile_and_structure(datalist)\n",
    "        stream_profiles = {}\n",
    "        final_df = pd.DataFrame()\n",
    "        first_pass = True\n",
    "\n",
    "        for pair in profile_structure_list:\n",
    "            stream_path = pair[0]\n",
    "            structure = pair[1]\n",
    "\n",
    "            try:\n",
    "                stream_path_df = pd.read_csv(stream_path)\n",
    "                print(f\"Successfully read {stream_path}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error reading {stream_path}: {e}\")\n",
    "                continue\n",
    "\n",
    "            try:\n",
    "                structure_df = pd.read_csv(structure)\n",
    "                print(f\"Successfully read {structure}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error reading {structure}: {e}\")\n",
    "                continue\n",
    "            \n",
    "            closest_structure_points = self.get_closest_points(stream_path_df, structure_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            stream_path_df = self.create_headcut_bools(stream_path_df, closest_structure_points)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for headcut_bools {stream_path_df}\")\n",
    "                continue\n",
    "                \n",
    "            stream_path_df = self.get_avg_slopes(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for avg_slope {stream_path_df}\")\n",
    "                continue\n",
    "                \n",
    "            stream_path_df = self.get_sinuosity(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for get_sinuosity {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            stream_path_df = self.get_deviation_from_avg(stream_path_df)\n",
    "            \n",
    "            if stream_path_df is None:\n",
    "                print(f\"stream_path_df is None for get_deviation_from_avg {stream_path_df}\")\n",
    "                continue\n",
    "            \n",
    "            search_pattern = r'([\\w]+)_(\\d+)([A-Z]?)(?=_)'\n",
    "            match = re.search(search_pattern, stream_path)\n",
    "            if match:\n",
    "                stream_name = match.group(1)\n",
    "                stream_section = match.group(2)\n",
    "                stream_section_letter = match.group(3)\n",
    "                stream_profile_name = f\"{stream_name}_{stream_section}{stream_section_letter}\"\n",
    "                stream_profiles[stream_profile_name] = stream_path_df\n",
    "            else:\n",
    "                print(f\"Unable to extract stream name and section from {stream_path}\")\n",
    "            # Check if the dataframes have numerical columns\n",
    "            if first_pass:\n",
    "                # Use the column titles from the first stream_path_df\n",
    "                final_df = pd.DataFrame(columns=stream_path_df.columns)\n",
    "                first_pass = False\n",
    "                \n",
    "            if not first_pass:\n",
    "                stream_path_df.drop(index=0)\n",
    "            \n",
    "            if all(stream_path_df.dtypes == float) and all(structure_df.dtypes == float):\n",
    "                stream_path_df = stream_path_df.astype(float)\n",
    "                structure_df = structure_df.astype(float)\n",
    "            else:\n",
    "                # If the dataframes have non-numerical columns, drop them\n",
    "                stream_path_df = stream_path_df.select_dtypes(include='number').astype(float)\n",
    "                structure_df = structure_df.select_dtypes(include='number').astype(float)         \n",
    "\n",
    "            final_df = pd.concat([final_df, stream_path_df], ignore_index=True)\n",
    "\n",
    "        return self.FinalDataFrame(final_df, stream_profiles)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c208d2dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:13.876439Z",
     "iopub.status.busy": "2024-04-25T03:02:13.876038Z",
     "iopub.status.idle": "2024-04-25T03:02:18.824309Z",
     "shell.execute_reply": "2024-04-25T03:02:18.823314Z"
    },
    "papermill": {
     "duration": 4.97156,
     "end_time": "2024-04-25T03:02:18.826931",
     "exception": false,
     "start_time": "2024-04-25T03:02:13.855371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_3_Project_Structures.csv\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_26/3958421435.py:327: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n",
      "  final_df = pd.concat([final_df, stream_path_df], ignore_index=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_4_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2B_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_2A_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1B_Project_Structures.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Long_Pro.csv\n",
      "Successfully read /kaggle/input/headcut-collection/Headcut CSVs/Riehle_1A_Project_Structures.csv\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "total_df = New_Dataframe()\n",
    "stream_structure_dataset = []\n",
    "\n",
    "for dirname, _, filenames in os.walk('/kaggle/input/headcut-collection'):\n",
    "    for filename in filenames:\n",
    "        file = os.path.join(dirname, filename)\n",
    "        stream_structure_dataset.append(file)\n",
    "\n",
    "stream_df_new = total_df.create_final_dataframe(stream_structure_dataset)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d10ff296",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:18.871329Z",
     "iopub.status.busy": "2024-04-25T03:02:18.870431Z",
     "iopub.status.idle": "2024-04-25T03:02:18.886727Z",
     "shell.execute_reply": "2024-04-25T03:02:18.885624Z"
    },
    "papermill": {
     "duration": 0.041165,
     "end_time": "2024-04-25T03:02:18.889248",
     "exception": false,
     "start_time": "2024-04-25T03:02:18.848083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Dist M            X            Y      Elev Ft  has headcut  \\\n",
      "0       0.000000  495684.6380  4794395.746  4886.384766          1.0   \n",
      "1       1.043499  495684.6380  4794394.702  4886.253418          0.0   \n",
      "2       2.086998  495684.6380  4794393.659  4886.187988          0.0   \n",
      "3       3.130497  495684.6380  4794392.615  4885.958008          0.0   \n",
      "4       4.586810  495684.8439  4794391.174  4885.433105          0.0   \n",
      "...          ...          ...          ...          ...          ...   \n",
      "2615  422.960557  496011.6344  4793816.487  4807.415039          0.0   \n",
      "2616  424.102494  496011.4540  4793815.359  4807.382324          0.0   \n",
      "2617  425.244431  496011.2736  4793814.231  4807.349121          0.0   \n",
      "2618  426.386369  496011.0932  4793813.104  4807.283691          0.0   \n",
      "2619  427.528305  496010.9128  4793811.976  4806.955566          0.0   \n",
      "\n",
      "      Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
      "0        -0.125873     -0.222603      -0.305488      -0.244375   \n",
      "1        -0.094288     -0.312158      -0.286685      -0.241834   \n",
      "2        -0.141548     -0.298615      -0.266490      -0.228256   \n",
      "3        -0.301976     -0.318961      -0.255804      -0.222257   \n",
      "4        -0.315336     -0.325182      -0.240867      -0.216865   \n",
      "...            ...           ...            ...            ...   \n",
      "2615     -0.099036     -0.116222      -0.100167      -0.102911   \n",
      "2616     -0.028862     -0.088500      -0.103653      -0.103710   \n",
      "2617     -0.043187     -0.101351      -0.098387      -0.102230   \n",
      "2618     -0.172319     -0.104313      -0.094699      -0.105570   \n",
      "2619     -0.287341     -0.114268      -0.107175      -0.102172   \n",
      "\n",
      "      Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  Dev From Avg  \n",
      "0              1.044071            1.046196            1.052876      0.013055  \n",
      "1              1.043309            1.046982            1.052531     -0.052863  \n",
      "2              1.042574            1.048752            1.052511      0.111687  \n",
      "3              1.042646            1.050445            1.052203      0.406610  \n",
      "4              1.042685            1.050541            1.051904      0.275261  \n",
      "...                 ...                 ...                 ...           ...  \n",
      "2615           1.068726            1.065266            1.052214     -0.169395  \n",
      "2616           1.063939            1.064631            1.052105     -0.168907  \n",
      "2617           1.059986            1.063940            1.051990     -0.136680  \n",
      "2618           1.055751            1.064551            1.051863      0.126015  \n",
      "2619           1.051249            1.065183            1.052209      0.126015  \n",
      "\n",
      "[2620 rows x 13 columns]\n",
      "dict_keys(['Riehle_3', 'Riehle_4', 'Riehle_2B', 'Riehle_2A', 'Riehle_1B', 'Riehle_1A'])\n",
      "(791, 13)\n"
     ]
    }
   ],
   "source": [
    "print(stream_df_new.final_df)\n",
    "print(stream_df_new.stream_profiles.keys())\n",
    "print(stream_df_new.stream_profiles['Riehle_3'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ca89db2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:18.933555Z",
     "iopub.status.busy": "2024-04-25T03:02:18.933153Z",
     "iopub.status.idle": "2024-04-25T03:02:18.960673Z",
     "shell.execute_reply": "2024-04-25T03:02:18.959512Z"
    },
    "papermill": {
     "duration": 0.052445,
     "end_time": "2024-04-25T03:02:18.963288",
     "exception": false,
     "start_time": "2024-04-25T03:02:18.910843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev Ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Slope Gap: 1</th>\n",
       "      <th>Slope Gap: 5</th>\n",
       "      <th>Slope Gap: 10</th>\n",
       "      <th>Slope Gap: 15</th>\n",
       "      <th>Sinuosity Gap: 50</th>\n",
       "      <th>Sinuosity Gap: 100</th>\n",
       "      <th>Sinuosity Gap: 150</th>\n",
       "      <th>Dev From Avg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794395.746</td>\n",
       "      <td>4886.384766</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.125873</td>\n",
       "      <td>-0.222603</td>\n",
       "      <td>-0.305488</td>\n",
       "      <td>-0.244375</td>\n",
       "      <td>1.044071</td>\n",
       "      <td>1.046196</td>\n",
       "      <td>1.052876</td>\n",
       "      <td>0.013055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.043499</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794394.702</td>\n",
       "      <td>4886.253418</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.094288</td>\n",
       "      <td>-0.312158</td>\n",
       "      <td>-0.286685</td>\n",
       "      <td>-0.241834</td>\n",
       "      <td>1.043309</td>\n",
       "      <td>1.046982</td>\n",
       "      <td>1.052531</td>\n",
       "      <td>-0.052863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.086998</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794393.659</td>\n",
       "      <td>4886.187988</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.141548</td>\n",
       "      <td>-0.298615</td>\n",
       "      <td>-0.266490</td>\n",
       "      <td>-0.228256</td>\n",
       "      <td>1.042574</td>\n",
       "      <td>1.048752</td>\n",
       "      <td>1.052511</td>\n",
       "      <td>0.111687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.130497</td>\n",
       "      <td>495684.6380</td>\n",
       "      <td>4794392.615</td>\n",
       "      <td>4885.958008</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.301976</td>\n",
       "      <td>-0.318961</td>\n",
       "      <td>-0.255804</td>\n",
       "      <td>-0.222257</td>\n",
       "      <td>1.042646</td>\n",
       "      <td>1.050445</td>\n",
       "      <td>1.052203</td>\n",
       "      <td>0.406610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.586810</td>\n",
       "      <td>495684.8439</td>\n",
       "      <td>4794391.174</td>\n",
       "      <td>4885.433105</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.315336</td>\n",
       "      <td>-0.325182</td>\n",
       "      <td>-0.240867</td>\n",
       "      <td>-0.216865</td>\n",
       "      <td>1.042685</td>\n",
       "      <td>1.050541</td>\n",
       "      <td>1.051904</td>\n",
       "      <td>0.275261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2615</th>\n",
       "      <td>422.960557</td>\n",
       "      <td>496011.6344</td>\n",
       "      <td>4793816.487</td>\n",
       "      <td>4807.415039</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.099036</td>\n",
       "      <td>-0.116222</td>\n",
       "      <td>-0.100167</td>\n",
       "      <td>-0.102911</td>\n",
       "      <td>1.068726</td>\n",
       "      <td>1.065266</td>\n",
       "      <td>1.052214</td>\n",
       "      <td>-0.169395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2616</th>\n",
       "      <td>424.102494</td>\n",
       "      <td>496011.4540</td>\n",
       "      <td>4793815.359</td>\n",
       "      <td>4807.382324</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.028862</td>\n",
       "      <td>-0.088500</td>\n",
       "      <td>-0.103653</td>\n",
       "      <td>-0.103710</td>\n",
       "      <td>1.063939</td>\n",
       "      <td>1.064631</td>\n",
       "      <td>1.052105</td>\n",
       "      <td>-0.168907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2617</th>\n",
       "      <td>425.244431</td>\n",
       "      <td>496011.2736</td>\n",
       "      <td>4793814.231</td>\n",
       "      <td>4807.349121</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.043187</td>\n",
       "      <td>-0.101351</td>\n",
       "      <td>-0.098387</td>\n",
       "      <td>-0.102230</td>\n",
       "      <td>1.059986</td>\n",
       "      <td>1.063940</td>\n",
       "      <td>1.051990</td>\n",
       "      <td>-0.136680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2618</th>\n",
       "      <td>426.386369</td>\n",
       "      <td>496011.0932</td>\n",
       "      <td>4793813.104</td>\n",
       "      <td>4807.283691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.172319</td>\n",
       "      <td>-0.104313</td>\n",
       "      <td>-0.094699</td>\n",
       "      <td>-0.105570</td>\n",
       "      <td>1.055751</td>\n",
       "      <td>1.064551</td>\n",
       "      <td>1.051863</td>\n",
       "      <td>0.126015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2619</th>\n",
       "      <td>427.528305</td>\n",
       "      <td>496010.9128</td>\n",
       "      <td>4793811.976</td>\n",
       "      <td>4806.955566</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.287341</td>\n",
       "      <td>-0.114268</td>\n",
       "      <td>-0.107175</td>\n",
       "      <td>-0.102172</td>\n",
       "      <td>1.051249</td>\n",
       "      <td>1.065183</td>\n",
       "      <td>1.052209</td>\n",
       "      <td>0.126015</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2620 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev Ft  has headcut  \\\n",
       "0       0.000000  495684.6380  4794395.746  4886.384766          1.0   \n",
       "1       1.043499  495684.6380  4794394.702  4886.253418          0.0   \n",
       "2       2.086998  495684.6380  4794393.659  4886.187988          0.0   \n",
       "3       3.130497  495684.6380  4794392.615  4885.958008          0.0   \n",
       "4       4.586810  495684.8439  4794391.174  4885.433105          0.0   \n",
       "...          ...          ...          ...          ...          ...   \n",
       "2615  422.960557  496011.6344  4793816.487  4807.415039          0.0   \n",
       "2616  424.102494  496011.4540  4793815.359  4807.382324          0.0   \n",
       "2617  425.244431  496011.2736  4793814.231  4807.349121          0.0   \n",
       "2618  426.386369  496011.0932  4793813.104  4807.283691          0.0   \n",
       "2619  427.528305  496010.9128  4793811.976  4806.955566          0.0   \n",
       "\n",
       "      Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
       "0        -0.125873     -0.222603      -0.305488      -0.244375   \n",
       "1        -0.094288     -0.312158      -0.286685      -0.241834   \n",
       "2        -0.141548     -0.298615      -0.266490      -0.228256   \n",
       "3        -0.301976     -0.318961      -0.255804      -0.222257   \n",
       "4        -0.315336     -0.325182      -0.240867      -0.216865   \n",
       "...            ...           ...            ...            ...   \n",
       "2615     -0.099036     -0.116222      -0.100167      -0.102911   \n",
       "2616     -0.028862     -0.088500      -0.103653      -0.103710   \n",
       "2617     -0.043187     -0.101351      -0.098387      -0.102230   \n",
       "2618     -0.172319     -0.104313      -0.094699      -0.105570   \n",
       "2619     -0.287341     -0.114268      -0.107175      -0.102172   \n",
       "\n",
       "      Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  Dev From Avg  \n",
       "0              1.044071            1.046196            1.052876      0.013055  \n",
       "1              1.043309            1.046982            1.052531     -0.052863  \n",
       "2              1.042574            1.048752            1.052511      0.111687  \n",
       "3              1.042646            1.050445            1.052203      0.406610  \n",
       "4              1.042685            1.050541            1.051904      0.275261  \n",
       "...                 ...                 ...                 ...           ...  \n",
       "2615           1.068726            1.065266            1.052214     -0.169395  \n",
       "2616           1.063939            1.064631            1.052105     -0.168907  \n",
       "2617           1.059986            1.063940            1.051990     -0.136680  \n",
       "2618           1.055751            1.064551            1.051863      0.126015  \n",
       "2619           1.051249            1.065183            1.052209      0.126015  \n",
       "\n",
       "[2620 rows x 13 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_df_new.final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d1584877",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:19.011911Z",
     "iopub.status.busy": "2024-04-25T03:02:19.011076Z",
     "iopub.status.idle": "2024-04-25T03:02:19.016563Z",
     "shell.execute_reply": "2024-04-25T03:02:19.015511Z"
    },
    "papermill": {
     "duration": 0.032871,
     "end_time": "2024-04-25T03:02:19.019787",
     "exception": false,
     "start_time": "2024-04-25T03:02:18.986916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['Riehle_3', 'Riehle_4', 'Riehle_2B', 'Riehle_2A', 'Riehle_1B', 'Riehle_1A'])\n"
     ]
    }
   ],
   "source": [
    "print(stream_df_new.stream_profiles.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a53d46be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:19.065793Z",
     "iopub.status.busy": "2024-04-25T03:02:19.065253Z",
     "iopub.status.idle": "2024-04-25T03:02:19.094443Z",
     "shell.execute_reply": "2024-04-25T03:02:19.093319Z"
    },
    "papermill": {
     "duration": 0.055739,
     "end_time": "2024-04-25T03:02:19.097245",
     "exception": false,
     "start_time": "2024-04-25T03:02:19.041506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev Ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Slope Gap: 1</th>\n",
       "      <th>Slope Gap: 5</th>\n",
       "      <th>Slope Gap: 10</th>\n",
       "      <th>Slope Gap: 15</th>\n",
       "      <th>Sinuosity Gap: 50</th>\n",
       "      <th>Sinuosity Gap: 100</th>\n",
       "      <th>Sinuosity Gap: 150</th>\n",
       "      <th>Dev From Avg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>495735.7033</td>\n",
       "      <td>4793434.890</td>\n",
       "      <td>4796.653809</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.801986</td>\n",
       "      <td>0.638625</td>\n",
       "      <td>0.446510</td>\n",
       "      <td>0.346674</td>\n",
       "      <td>1.065583</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.861613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.390590</td>\n",
       "      <td>495736.2607</td>\n",
       "      <td>4793436.164</td>\n",
       "      <td>4797.769043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.391889</td>\n",
       "      <td>0.578499</td>\n",
       "      <td>0.421067</td>\n",
       "      <td>0.331991</td>\n",
       "      <td>1.069239</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-2.502238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.781180</td>\n",
       "      <td>495736.8181</td>\n",
       "      <td>4793437.438</td>\n",
       "      <td>4800.524902</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.989714</td>\n",
       "      <td>0.515542</td>\n",
       "      <td>0.400043</td>\n",
       "      <td>0.317867</td>\n",
       "      <td>1.072693</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>0.483113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.943212</td>\n",
       "      <td>495737.2731</td>\n",
       "      <td>4793438.507</td>\n",
       "      <td>4800.295410</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.070593</td>\n",
       "      <td>0.477649</td>\n",
       "      <td>0.380341</td>\n",
       "      <td>0.307075</td>\n",
       "      <td>1.075942</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.139934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.105245</td>\n",
       "      <td>495737.7281</td>\n",
       "      <td>4793439.576</td>\n",
       "      <td>4800.688965</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.155262</td>\n",
       "      <td>0.423802</td>\n",
       "      <td>0.363897</td>\n",
       "      <td>0.293832</td>\n",
       "      <td>1.074800</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>0.286336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>108.180500</td>\n",
       "      <td>495767.0755</td>\n",
       "      <td>4793525.867</td>\n",
       "      <td>4817.093262</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.259487</td>\n",
       "      <td>0.297165</td>\n",
       "      <td>0.275827</td>\n",
       "      <td>0.250268</td>\n",
       "      <td>1.113577</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.074504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>109.318000</td>\n",
       "      <td>495767.3940</td>\n",
       "      <td>4793526.959</td>\n",
       "      <td>4817.421387</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.475833</td>\n",
       "      <td>0.288679</td>\n",
       "      <td>0.275236</td>\n",
       "      <td>0.256850</td>\n",
       "      <td>1.104084</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.500773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>110.455499</td>\n",
       "      <td>495767.7125</td>\n",
       "      <td>4793528.051</td>\n",
       "      <td>4818.175781</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.366720</td>\n",
       "      <td>0.313331</td>\n",
       "      <td>0.276753</td>\n",
       "      <td>0.262560</td>\n",
       "      <td>1.093923</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.074993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>112.271227</td>\n",
       "      <td>495768.8273</td>\n",
       "      <td>4793529.484</td>\n",
       "      <td>4818.504395</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.189856</td>\n",
       "      <td>0.312791</td>\n",
       "      <td>0.283324</td>\n",
       "      <td>0.270772</td>\n",
       "      <td>1.083088</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.107218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>114.086956</td>\n",
       "      <td>495769.9420</td>\n",
       "      <td>4793530.917</td>\n",
       "      <td>4818.865234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.198730</td>\n",
       "      <td>0.288784</td>\n",
       "      <td>0.293562</td>\n",
       "      <td>0.278215</td>\n",
       "      <td>1.077550</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>1.119066</td>\n",
       "      <td>-0.107218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>89 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Dist M            X            Y      Elev Ft  has headcut  \\\n",
       "0     0.000000  495735.7033  4793434.890  4796.653809          1.0   \n",
       "1     1.390590  495736.2607  4793436.164  4797.769043          0.0   \n",
       "2     2.781180  495736.8181  4793437.438  4800.524902          0.0   \n",
       "3     3.943212  495737.2731  4793438.507  4800.295410          0.0   \n",
       "4     5.105245  495737.7281  4793439.576  4800.688965          0.0   \n",
       "..         ...          ...          ...          ...          ...   \n",
       "84  108.180500  495767.0755  4793525.867  4817.093262          0.0   \n",
       "85  109.318000  495767.3940  4793526.959  4817.421387          0.0   \n",
       "86  110.455499  495767.7125  4793528.051  4818.175781          1.0   \n",
       "87  112.271227  495768.8273  4793529.484  4818.504395          0.0   \n",
       "88  114.086956  495769.9420  4793530.917  4818.865234          0.0   \n",
       "\n",
       "    Slope Gap: 1  Slope Gap: 5  Slope Gap: 10  Slope Gap: 15  \\\n",
       "0       0.801986      0.638625       0.446510       0.346674   \n",
       "1       1.391889      0.578499       0.421067       0.331991   \n",
       "2       0.989714      0.515542       0.400043       0.317867   \n",
       "3       0.070593      0.477649       0.380341       0.307075   \n",
       "4       0.155262      0.423802       0.363897       0.293832   \n",
       "..           ...           ...            ...            ...   \n",
       "84      0.259487      0.297165       0.275827       0.250268   \n",
       "85      0.475833      0.288679       0.275236       0.256850   \n",
       "86      0.366720      0.313331       0.276753       0.262560   \n",
       "87      0.189856      0.312791       0.283324       0.270772   \n",
       "88      0.198730      0.288784       0.293562       0.278215   \n",
       "\n",
       "    Sinuosity Gap: 50  Sinuosity Gap: 100  Sinuosity Gap: 150  Dev From Avg  \n",
       "0            1.065583            1.119066            1.119066     -0.861613  \n",
       "1            1.069239            1.119066            1.119066     -2.502238  \n",
       "2            1.072693            1.119066            1.119066      0.483113  \n",
       "3            1.075942            1.119066            1.119066     -0.139934  \n",
       "4            1.074800            1.119066            1.119066      0.286336  \n",
       "..                ...                 ...                 ...           ...  \n",
       "84           1.113577            1.119066            1.119066     -0.074504  \n",
       "85           1.104084            1.119066            1.119066     -0.500773  \n",
       "86           1.093923            1.119066            1.119066     -0.074993  \n",
       "87           1.083088            1.119066            1.119066     -0.107218  \n",
       "88           1.077550            1.119066            1.119066     -0.107218  \n",
       "\n",
       "[89 rows x 13 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_df_new.stream_profiles['Riehle_4']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f25bf4d1",
   "metadata": {
    "papermill": {
     "duration": 0.021946,
     "end_time": "2024-04-25T03:02:19.199725",
     "exception": false,
     "start_time": "2024-04-25T03:02:19.177779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Building a Data Visualization Object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86161864",
   "metadata": {
    "papermill": {
     "duration": 0.022089,
     "end_time": "2024-04-25T03:02:19.243770",
     "exception": false,
     "start_time": "2024-04-25T03:02:19.221681",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have a class to create our various stream profile dataframes, let's design another object that can take these dataframes and output some useful plots so we can better visualize the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6784f4e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:19.290565Z",
     "iopub.status.busy": "2024-04-25T03:02:19.290158Z",
     "iopub.status.idle": "2024-04-25T03:02:19.303581Z",
     "shell.execute_reply": "2024-04-25T03:02:19.302625Z"
    },
    "papermill": {
     "duration": 0.039821,
     "end_time": "2024-04-25T03:02:19.306100",
     "exception": false,
     "start_time": "2024-04-25T03:02:19.266279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "class Visualize_Profile:\n",
    "    \n",
    "    def plot_stream_profile(self, stream_path_df, title, show_structures=False):\n",
    "        \n",
    "        title = f\"{title} Stream Profile\"\n",
    "        x_data = stream_path_df['X']\n",
    "        y_data = stream_path_df['Y']\n",
    "        \n",
    "        fig, ax = plt.subplots(figsize=(8,6))\n",
    "        ax.plot(x_data, y_data, s=0, c='b', alpha=0.5)\n",
    "        \n",
    "        if show_structures:\n",
    "            headcut_points = stream_path_df.loc[stream_path_df['has headcut'] == 1]\n",
    "            x_data1 = headcut_points['X']\n",
    "            y_data1 = headcut_points['Y']\n",
    "            ax.scatter(x_data1, y_data1, s=30, c='r', alpha=0.5)\n",
    "            \n",
    "        ax.set_xlabel(\"X\")\n",
    "        ax.set_ylabel(\"Y\")\n",
    "        ax.set_title(f\"{title}\")\n",
    "        \n",
    "        plt.show()\n",
    "    \n",
    "    def plot_elev_profile(self, stream_path_df, title, show_structures=False):\n",
    "        \n",
    "        title = f\"{title} Elevation Profile\"\n",
    "        x_data = stream_path_df['Dist M']\n",
    "        y_data = stream_path_df['Elev Ft']\n",
    "        \n",
    "        fig, ax=plt.subplots(figsize=(8,6))\n",
    "        ax.scatter(x_data, y_data, s=5, c ='b', alpha=0.5)\n",
    "        ax.plot(x_data, y_data, c ='b', alpha=0.5)\n",
    "        \n",
    "        if show_structures:\n",
    "            headcut_points = stream_path_df.loc[stream_path_df['has headcut'] == 1]\n",
    "            x_data1 = headcut_points['Dist M']\n",
    "            y_data1 = headcut_points['Elev Ft']\n",
    "            ax.scatter(x_data1, y_data1, s=30, c='r', alpha=0.5)\n",
    "        ax.set_xlabel(\"X\")\n",
    "        ax.set_ylabel(\"Y\")\n",
    "        ax.set_title(f\"{title}\")\n",
    "        \n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8b366c84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:19.352865Z",
     "iopub.status.busy": "2024-04-25T03:02:19.351946Z",
     "iopub.status.idle": "2024-04-25T03:02:19.674895Z",
     "shell.execute_reply": "2024-04-25T03:02:19.673809Z"
    },
    "papermill": {
     "duration": 0.348739,
     "end_time": "2024-04-25T03:02:19.677268",
     "exception": false,
     "start_time": "2024-04-25T03:02:19.328529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viz = Visualize_Profile()\n",
    "stream_df = stream_df_new.stream_profiles['Riehle_2B']\n",
    "\n",
    "viz.plot_elev_profile(stream_df, 'Riehle_2B', True)\n",
    "# headcut_data = stream_df.loc[stream_df['has headcut'] == 1]\n",
    "# headcut_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fa7c29e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:19.723150Z",
     "iopub.status.busy": "2024-04-25T03:02:19.722289Z",
     "iopub.status.idle": "2024-04-25T03:02:21.280753Z",
     "shell.execute_reply": "2024-04-25T03:02:21.279638Z"
    },
    "papermill": {
     "duration": 1.584034,
     "end_time": "2024-04-25T03:02:21.283147",
     "exception": false,
     "start_time": "2024-04-25T03:02:19.699113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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1Vetn376yZo+fboVGBho/ec//yk9Z+zYsVZ4eLj1+eefWz/++KN10003WU2aNLFyc3NtrLz6uffee6369etb8+fPt3bv3m199tlnVmRkpPWXv/yl9Bw+i8qRlZVlbdiwwdqwYYMlyXr77betDRs2WHv37rUsq3y/9/79+1sdO3a0fvjhB+u7776zLrvsMuvOO++06y3hfwjALui9996zGjZsaPn5+VmdO3e2vv/+e7tLqvYknfE2derU0nNyc3OtRx991KpZs6YVGBho3XLLLdahQ4fsK9pD/DYA8zlUnS+++MJq06aN5e/vb8XFxVkffPBBmcedTqc1ZswYKyoqyvL397f69Olj7dy506Zqq6/MzExr1KhRVsOGDa2AgACradOm1t/+9jcrPz+/9Bw+i8qxZMmSM/7bcO+991qWVb7f+7Fjx6w777zTCg4OtkJDQ63hw4dbWVlZNrwbnMphWadsJQMAAABUc/QAAwAAwKMQgAEAAOBRCMAAAADwKARgAAAAeBQCMAAAADwKARgAAAAehQAMAAAAj0IABgAAgEchAAMAAMCjEIABwEMUFxerW7duGjRoUJnjGRkZiomJ0d/+9jebKgOAqsVWyADgQXbt2qUOHTpoypQpGjp0qCTpnnvu0aZNm7RmzRr5+fnZXCEAVD4CMAB4mHfffVcvvPCCtm7dqtWrV2vw4MFas2aN2rdvb3dpAFAlCMAA4GEsy9I111wjb29vbd68WX/4wx/07LPP2l0WAFQZAjAAeKAdO3aoZcuWatu2rdavXy8fHx+7SwKAKsNFcADggT766CMFBgZq9+7d2r9/v93lAECVYgUYADzMypUr1atXL33zzTd65ZVXJEmLFi2Sw+GwuTIAqBqsAAOAB8nJydF9992nRx55RFdffbU+/PBDrV69WpMmTbK7NACoMqwAA4AHGTVqlL766itt2rRJgYGBkqTJkyfrT3/6kzZv3qzGjRvbWyAAVAECMAB4iGXLlqlPnz5aunSpevToUeaxfv36qaioiFYIAB6BAAwAAACPQg8wAAAAPAoBGAAAAB6FAAwAAACPQgAGAACARyEAAwAAwKMQgAEAAOBRCMAAAADwKARgAAAAeBQCMAAAADwKARgAAAAehQAMAAAAj/L/d7rlF9iIALkAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "profiles = stream_df_new.stream_profiles.keys()\n",
    "\n",
    "for profile in profiles:\n",
    "    viz = Visualize_Profile()\n",
    "    stream_df = stream_df_new.stream_profiles[profile]\n",
    "    viz.plot_elev_profile(stream_df, profile, True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07c344ff",
   "metadata": {
    "papermill": {
     "duration": 0.026677,
     "end_time": "2024-04-25T03:02:21.336568",
     "exception": false,
     "start_time": "2024-04-25T03:02:21.309891",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's add a column to our stream profile called `has_headcut`. This will be our dependent variable for our machine learning model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a5d7a6e",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.026541,
     "end_time": "2024-04-25T03:02:21.390117",
     "exception": false,
     "start_time": "2024-04-25T03:02:21.363576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "eafed6ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:21.445974Z",
     "iopub.status.busy": "2024-04-25T03:02:21.444990Z",
     "iopub.status.idle": "2024-04-25T03:02:21.553378Z",
     "shell.execute_reply": "2024-04-25T03:02:21.552209Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.13902,
     "end_time": "2024-04-25T03:02:21.555923",
     "exception": false,
     "start_time": "2024-04-25T03:02:21.416903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "      <th>has headcut</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>52.12513114</td>\n",
       "      <td>495991.84</td>\n",
       "      <td>4794222.64</td>\n",
       "      <td>4865.419922</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>180.2097651</td>\n",
       "      <td>495921.3815</td>\n",
       "      <td>4794118.299</td>\n",
       "      <td>4845.866211</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>236.9627192</td>\n",
       "      <td>495907.0346</td>\n",
       "      <td>4794064.529</td>\n",
       "      <td>4838.484375</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>279.0916947</td>\n",
       "      <td>495909.4258</td>\n",
       "      <td>4794023.443</td>\n",
       "      <td>4834.973633</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>285.3730026</td>\n",
       "      <td>495911.7753</td>\n",
       "      <td>4794017.621</td>\n",
       "      <td>4834.15332</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>316.9558364</td>\n",
       "      <td>495927.536</td>\n",
       "      <td>4793990.882</td>\n",
       "      <td>4830.610352</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>318.5366146</td>\n",
       "      <td>495928.4509</td>\n",
       "      <td>4793989.593</td>\n",
       "      <td>4830.511719</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>361.7876491</td>\n",
       "      <td>495955.1901</td>\n",
       "      <td>4793958.113</td>\n",
       "      <td>4827.001465</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>426.9348608</td>\n",
       "      <td>495976.5232</td>\n",
       "      <td>4793900.352</td>\n",
       "      <td>4816.568359</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>579.0827996</td>\n",
       "      <td>496037.3256</td>\n",
       "      <td>4793769.326</td>\n",
       "      <td>4803.510742</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>594.6758997</td>\n",
       "      <td>496039.8694</td>\n",
       "      <td>4793754.063</td>\n",
       "      <td>4802.362305</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>599.6474252</td>\n",
       "      <td>496040.8617</td>\n",
       "      <td>4793749.192</td>\n",
       "      <td>4802.165527</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>618.4948471</td>\n",
       "      <td>496056.0166</td>\n",
       "      <td>4793738.186</td>\n",
       "      <td>4799.57373</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>644.3992303</td>\n",
       "      <td>496055.6558</td>\n",
       "      <td>4793714.011</td>\n",
       "      <td>4798.523438</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>510</th>\n",
       "      <td>655.644581</td>\n",
       "      <td>496059.0235</td>\n",
       "      <td>4793703.366</td>\n",
       "      <td>4798.392578</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>519</th>\n",
       "      <td>667.6914888</td>\n",
       "      <td>496058.7228</td>\n",
       "      <td>4793691.639</td>\n",
       "      <td>4797.572266</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>685.5618637</td>\n",
       "      <td>496065.0373</td>\n",
       "      <td>4793675.402</td>\n",
       "      <td>4796.227051</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>688.3098662</td>\n",
       "      <td>496066.1198</td>\n",
       "      <td>4793672.876</td>\n",
       "      <td>4795.866211</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft  has headcut\n",
       "45   52.12513114    495991.84   4794222.64  4865.419922          1.0\n",
       "146  180.2097651  495921.3815  4794118.299  4845.866211          1.0\n",
       "192  236.9627192  495907.0346  4794064.529  4838.484375          1.0\n",
       "231  279.0916947  495909.4258  4794023.443  4834.973633          1.0\n",
       "236  285.3730026  495911.7753  4794017.621   4834.15332          1.0\n",
       "257  316.9558364   495927.536  4793990.882  4830.610352          1.0\n",
       "258  318.5366146  495928.4509  4793989.593  4830.511719          1.0\n",
       "288  361.7876491  495955.1901  4793958.113  4827.001465          1.0\n",
       "337  426.9348608  495976.5232  4793900.352  4816.568359          1.0\n",
       "451  579.0827996  496037.3256  4793769.326  4803.510742          1.0\n",
       "464  594.6758997  496039.8694  4793754.063  4802.362305          1.0\n",
       "468  599.6474252  496040.8617  4793749.192  4802.165527          1.0\n",
       "480  618.4948471  496056.0166  4793738.186   4799.57373          1.0\n",
       "501  644.3992303  496055.6558  4793714.011  4798.523438          1.0\n",
       "510   655.644581  496059.0235  4793703.366  4798.392578          1.0\n",
       "519  667.6914888  496058.7228  4793691.639  4797.572266          1.0\n",
       "532  685.5618637  496065.0373  4793675.402  4796.227051          1.0\n",
       "534  688.3098662  496066.1198  4793672.876  4795.866211          1.0\n",
       "0            NaN          NaN          NaN          NaN          1.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(len(stream_profile_df['X'])):\n",
    "    x_val, y_val = float(stream_profile_df['X'].iloc[i]), float(stream_profile_df['Y'].iloc[i])\n",
    "    has_headcut_bool = False\n",
    "    for j in range(len(closest_profile_points)):\n",
    "        if closest_profile_points[j][0] == x_val and closest_profile_points[j][1] == y_val:\n",
    "            has_headcut_bool = True\n",
    "            break\n",
    "    stream_profile_df.at[i, 'has headcut'] = 1 if has_headcut_bool else 0\n",
    "\n",
    "    \n",
    "headcut_rows = stream_profile_df[stream_profile_df['has headcut'] == 1]\n",
    "headcut_rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f2017785",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:21.612917Z",
     "iopub.status.busy": "2024-04-25T03:02:21.612242Z",
     "iopub.status.idle": "2024-04-25T03:02:21.618957Z",
     "shell.execute_reply": "2024-04-25T03:02:21.618070Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.038017,
     "end_time": "2024-04-25T03:02:21.621298",
     "exception": false,
     "start_time": "2024-04-25T03:02:21.583281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(stream_profile_df['has headcut'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "652789a3",
   "metadata": {
    "papermill": {
     "duration": 0.027362,
     "end_time": "2024-04-25T03:02:21.676099",
     "exception": false,
     "start_time": "2024-04-25T03:02:21.648737",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have a column with our dependent variable `has headcut` this is the variable we will try to predict with our machine learning models. The next steps are to do some data analysis, calculating slopes at each point, and average slopes at each point with varying distance widths (5, 10, 15, 20). This will give us more columns that our machine learning model can use to sort potential headcuts and non-headcut areas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bd2afc64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:21.733098Z",
     "iopub.status.busy": "2024-04-25T03:02:21.732721Z",
     "iopub.status.idle": "2024-04-25T03:02:21.741205Z",
     "shell.execute_reply": "2024-04-25T03:02:21.740199Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.039466,
     "end_time": "2024-04-25T03:02:21.743334",
     "exception": false,
     "start_time": "2024-04-25T03:02:21.703868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def avg_slope(title, gap):\n",
    "    for i in range(len(stream_profile_df['Elev ft'])):\n",
    "        min_i = max(0, i-gap)\n",
    "        max_i = min(len(stream_profile_df['Elev ft'])-1, i+gap)\n",
    "        \n",
    "        dist_min = float(stream_profile_df['Dist M'].iloc[min_i])\n",
    "        dist_max = float(stream_profile_df['Dist M'].iloc[max_i])\n",
    "        elev_min = float(stream_profile_df['Elev ft'].iloc[min_i])\n",
    "        elev_max = float(stream_profile_df['Elev ft'].iloc[max_i])\n",
    "        \n",
    "        \n",
    "        numerator = elev_max - elev_min\n",
    "        denominator = dist_max - dist_min\n",
    "        if abs(denominator) > 1e-6:\n",
    "            slope = numerator/denominator\n",
    "        else: \n",
    "            slope = 0.0\n",
    "        stream_profile_df.at[i, title] = slope\n",
    "#         print(f\"Row {i}: numerator={numerator}, denominator={denominator}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6d4fc863",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:21.799254Z",
     "iopub.status.busy": "2024-04-25T03:02:21.798885Z",
     "iopub.status.idle": "2024-04-25T03:02:22.222246Z",
     "shell.execute_reply": "2024-04-25T03:02:22.221257Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.45401,
     "end_time": "2024-04-25T03:02:22.224625",
     "exception": false,
     "start_time": "2024-04-25T03:02:21.770615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dist M</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Elev ft</th>\n",
       "      <th>has headcut</th>\n",
       "      <th>Slope at Point</th>\n",
       "      <th>Avg Slope 10m</th>\n",
       "      <th>Avg Slope 20m</th>\n",
       "      <th>Avg Slope 30m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>52.12513114</td>\n",
       "      <td>495991.84</td>\n",
       "      <td>4794222.64</td>\n",
       "      <td>4865.419922</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.402471</td>\n",
       "      <td>-0.222721</td>\n",
       "      <td>-0.214954</td>\n",
       "      <td>-0.209200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>180.2097651</td>\n",
       "      <td>495921.3815</td>\n",
       "      <td>4794118.299</td>\n",
       "      <td>4845.866211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.549902</td>\n",
       "      <td>-0.204838</td>\n",
       "      <td>-0.179259</td>\n",
       "      <td>-0.154808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>236.9627192</td>\n",
       "      <td>495907.0346</td>\n",
       "      <td>4794064.529</td>\n",
       "      <td>4838.484375</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.120460</td>\n",
       "      <td>-0.070009</td>\n",
       "      <td>-0.085264</td>\n",
       "      <td>-0.083507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>279.0916947</td>\n",
       "      <td>495909.4258</td>\n",
       "      <td>4794023.443</td>\n",
       "      <td>4834.973633</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.026797</td>\n",
       "      <td>-0.258761</td>\n",
       "      <td>-0.196194</td>\n",
       "      <td>-0.152797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>285.3730026</td>\n",
       "      <td>495911.7753</td>\n",
       "      <td>4794017.621</td>\n",
       "      <td>4834.15332</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.453272</td>\n",
       "      <td>-0.216612</td>\n",
       "      <td>-0.187378</td>\n",
       "      <td>-0.132694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>316.9558364</td>\n",
       "      <td>495927.536</td>\n",
       "      <td>4793990.882</td>\n",
       "      <td>4830.610352</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.747197</td>\n",
       "      <td>-0.109701</td>\n",
       "      <td>-0.087511</td>\n",
       "      <td>-0.081186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>318.5366146</td>\n",
       "      <td>495928.4509</td>\n",
       "      <td>4793989.593</td>\n",
       "      <td>4830.511719</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.770239</td>\n",
       "      <td>-0.145904</td>\n",
       "      <td>-0.078841</td>\n",
       "      <td>-0.080090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>361.7876491</td>\n",
       "      <td>495955.1901</td>\n",
       "      <td>4793958.113</td>\n",
       "      <td>4827.001465</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.875272</td>\n",
       "      <td>-0.387115</td>\n",
       "      <td>-0.206682</td>\n",
       "      <td>-0.163252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>426.9348608</td>\n",
       "      <td>495976.5232</td>\n",
       "      <td>4793900.352</td>\n",
       "      <td>4816.568359</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.163264</td>\n",
       "      <td>-0.094457</td>\n",
       "      <td>-0.107954</td>\n",
       "      <td>-0.110142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>579.0827996</td>\n",
       "      <td>496037.3256</td>\n",
       "      <td>4793769.326</td>\n",
       "      <td>4803.510742</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.046687</td>\n",
       "      <td>-0.075034</td>\n",
       "      <td>-0.088531</td>\n",
       "      <td>-0.070030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>594.6758997</td>\n",
       "      <td>496039.8694</td>\n",
       "      <td>4793754.063</td>\n",
       "      <td>4802.362305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.036627</td>\n",
       "      <td>-0.080249</td>\n",
       "      <td>-0.100532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>599.6474252</td>\n",
       "      <td>496040.8617</td>\n",
       "      <td>4793749.192</td>\n",
       "      <td>4802.165527</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.075820</td>\n",
       "      <td>-0.065932</td>\n",
       "      <td>-0.108041</td>\n",
       "      <td>-0.088465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>618.4948471</td>\n",
       "      <td>496056.0166</td>\n",
       "      <td>4793738.186</td>\n",
       "      <td>4799.57373</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.024747</td>\n",
       "      <td>-0.042012</td>\n",
       "      <td>-0.076879</td>\n",
       "      <td>-0.085144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>644.3992303</td>\n",
       "      <td>496055.6558</td>\n",
       "      <td>4793714.011</td>\n",
       "      <td>4798.523438</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.082852</td>\n",
       "      <td>-0.010772</td>\n",
       "      <td>-0.062950</td>\n",
       "      <td>-0.060294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>510</th>\n",
       "      <td>655.644581</td>\n",
       "      <td>496059.0235</td>\n",
       "      <td>4793703.366</td>\n",
       "      <td>4798.392578</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.122278</td>\n",
       "      <td>-0.056951</td>\n",
       "      <td>-0.042827</td>\n",
       "      <td>-0.048614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>519</th>\n",
       "      <td>667.6914888</td>\n",
       "      <td>496058.7228</td>\n",
       "      <td>4793691.639</td>\n",
       "      <td>4797.572266</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.059703</td>\n",
       "      <td>-0.052868</td>\n",
       "      <td>-0.072940</td>\n",
       "      <td>-0.066691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>685.5618637</td>\n",
       "      <td>496065.0373</td>\n",
       "      <td>4793675.402</td>\n",
       "      <td>4796.227051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.131310</td>\n",
       "      <td>-0.096208</td>\n",
       "      <td>-0.094837</td>\n",
       "      <td>-0.085444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>688.3098662</td>\n",
       "      <td>496066.1198</td>\n",
       "      <td>4793672.876</td>\n",
       "      <td>4795.866211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.052253</td>\n",
       "      <td>-0.093697</td>\n",
       "      <td>-0.091806</td>\n",
       "      <td>-0.085557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.181679</td>\n",
       "      <td>-0.116970</td>\n",
       "      <td>-0.039087</td>\n",
       "      <td>-0.088570</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Dist M            X            Y      Elev ft  has headcut  \\\n",
       "45   52.12513114    495991.84   4794222.64  4865.419922          1.0   \n",
       "146  180.2097651  495921.3815  4794118.299  4845.866211          1.0   \n",
       "192  236.9627192  495907.0346  4794064.529  4838.484375          1.0   \n",
       "231  279.0916947  495909.4258  4794023.443  4834.973633          1.0   \n",
       "236  285.3730026  495911.7753  4794017.621   4834.15332          1.0   \n",
       "257  316.9558364   495927.536  4793990.882  4830.610352          1.0   \n",
       "258  318.5366146  495928.4509  4793989.593  4830.511719          1.0   \n",
       "288  361.7876491  495955.1901  4793958.113  4827.001465          1.0   \n",
       "337  426.9348608  495976.5232  4793900.352  4816.568359          1.0   \n",
       "451  579.0827996  496037.3256  4793769.326  4803.510742          1.0   \n",
       "464  594.6758997  496039.8694  4793754.063  4802.362305          1.0   \n",
       "468  599.6474252  496040.8617  4793749.192  4802.165527          1.0   \n",
       "480  618.4948471  496056.0166  4793738.186   4799.57373          1.0   \n",
       "501  644.3992303  496055.6558  4793714.011  4798.523438          1.0   \n",
       "510   655.644581  496059.0235  4793703.366  4798.392578          1.0   \n",
       "519  667.6914888  496058.7228  4793691.639  4797.572266          1.0   \n",
       "532  685.5618637  496065.0373  4793675.402  4796.227051          1.0   \n",
       "534  688.3098662  496066.1198  4793672.876  4795.866211          1.0   \n",
       "0            NaN          NaN          NaN          NaN          1.0   \n",
       "\n",
       "     Slope at Point  Avg Slope 10m  Avg Slope 20m  Avg Slope 30m  \n",
       "45        -0.402471      -0.222721      -0.214954      -0.209200  \n",
       "146       -0.549902      -0.204838      -0.179259      -0.154808  \n",
       "192       -0.120460      -0.070009      -0.085264      -0.083507  \n",
       "231       -0.026797      -0.258761      -0.196194      -0.152797  \n",
       "236       -0.453272      -0.216612      -0.187378      -0.132694  \n",
       "257       -0.747197      -0.109701      -0.087511      -0.081186  \n",
       "258       -0.770239      -0.145904      -0.078841      -0.080090  \n",
       "288       -1.875272      -0.387115      -0.206682      -0.163252  \n",
       "337       -0.163264      -0.094457      -0.107954      -0.110142  \n",
       "451       -0.046687      -0.075034      -0.088531      -0.070030  \n",
       "464        0.000000      -0.036627      -0.080249      -0.100532  \n",
       "468       -0.075820      -0.065932      -0.108041      -0.088465  \n",
       "480        0.024747      -0.042012      -0.076879      -0.085144  \n",
       "501       -0.082852      -0.010772      -0.062950      -0.060294  \n",
       "510       -0.122278      -0.056951      -0.042827      -0.048614  \n",
       "519       -0.059703      -0.052868      -0.072940      -0.066691  \n",
       "532       -0.131310      -0.096208      -0.094837      -0.085444  \n",
       "534       -0.052253      -0.093697      -0.091806      -0.085557  \n",
       "0         -0.181679      -0.116970      -0.039087      -0.088570  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_slope('Slope at Point', 1) # Slope at point\n",
    "avg_slope('Avg Slope 10m', 5) # Slope at point\n",
    "avg_slope('Avg Slope 20m', 10) # Slope at point\n",
    "avg_slope('Avg Slope 30m', 15) # Slope at point\n",
    "\n",
    "    \n",
    "headcut_rows = stream_profile_df[stream_profile_df['has headcut'] == 1]\n",
    "headcut_rows\n",
    "\n",
    "headcut_rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "738490e1",
   "metadata": {
    "papermill": {
     "duration": 0.027595,
     "end_time": "2024-04-25T03:02:22.279573",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.251978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Before we can convert this dataframe into a tensor, we need to make sure that all columns contain floats to allow the tensor to perform operations on them. We can use the `.dtypes` function to check what our datatypes are for various columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "23c79f83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:22.336955Z",
     "iopub.status.busy": "2024-04-25T03:02:22.336012Z",
     "iopub.status.idle": "2024-04-25T03:02:22.353426Z",
     "shell.execute_reply": "2024-04-25T03:02:22.352201Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.049083,
     "end_time": "2024-04-25T03:02:22.355978",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.306895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "stream_profile_df = stream_profile_df.fillna(stream_profile_df.mode().iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6b625436",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:22.411875Z",
     "iopub.status.busy": "2024-04-25T03:02:22.411490Z",
     "iopub.status.idle": "2024-04-25T03:02:22.419879Z",
     "shell.execute_reply": "2024-04-25T03:02:22.418833Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.039509,
     "end_time": "2024-04-25T03:02:22.422225",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.382716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dist M             object\n",
       "X                  object\n",
       "Y                  object\n",
       "Elev ft            object\n",
       "has headcut       float64\n",
       "Slope at Point    float64\n",
       "Avg Slope 10m     float64\n",
       "Avg Slope 20m     float64\n",
       "Avg Slope 30m     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dcd3201",
   "metadata": {
    "papermill": {
     "duration": 0.028286,
     "end_time": "2024-04-25T03:02:22.478779",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.450493",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see the columns `Dist M, X, Y, Elev ft` are all objects. We can use `.astype(float)` to convert these to floats instead\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4affd89b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:22.536038Z",
     "iopub.status.busy": "2024-04-25T03:02:22.535267Z",
     "iopub.status.idle": "2024-04-25T03:02:22.547321Z",
     "shell.execute_reply": "2024-04-25T03:02:22.546145Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.043256,
     "end_time": "2024-04-25T03:02:22.549773",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.506517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dist M            float64\n",
       "X                 float64\n",
       "Y                 float64\n",
       "Elev ft           float64\n",
       "has headcut       float64\n",
       "Slope at Point    float64\n",
       "Avg Slope 10m     float64\n",
       "Avg Slope 20m     float64\n",
       "Avg Slope 30m     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stream_profile_df['Dist M'] = stream_profile_df['Dist M'].astype(float)\n",
    "stream_profile_df['X'] = stream_profile_df['X'].astype(float)\n",
    "stream_profile_df['Y'] = stream_profile_df['Y'].astype(float)\n",
    "stream_profile_df['Elev ft'] = stream_profile_df['Elev ft'].astype(float)\n",
    "stream_profile_df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aefdd105",
   "metadata": {
    "papermill": {
     "duration": 0.028318,
     "end_time": "2024-04-25T03:02:22.606472",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.578154",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Buidling a Linear Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a11b7aa",
   "metadata": {
    "papermill": {
     "duration": 0.028011,
     "end_time": "2024-04-25T03:02:22.662846",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.634835",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we have our cleaned up data and several average slope columns. Let's try making a linear model and see what kind of predictive accuracy we can achieve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0ada2b1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:22.720689Z",
     "iopub.status.busy": "2024-04-25T03:02:22.720277Z",
     "iopub.status.idle": "2024-04-25T03:02:26.855709Z",
     "shell.execute_reply": "2024-04-25T03:02:26.854707Z"
    },
    "papermill": {
     "duration": 4.167785,
     "end_time": "2024-04-25T03:02:26.858422",
     "exception": false,
     "start_time": "2024-04-25T03:02:22.690637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import tensor\n",
    "t_dep = tensor(stream_profile_df['has headcut'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fb568c29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:26.916501Z",
     "iopub.status.busy": "2024-04-25T03:02:26.915881Z",
     "iopub.status.idle": "2024-04-25T03:02:26.999684Z",
     "shell.execute_reply": "2024-04-25T03:02:26.998536Z"
    },
    "papermill": {
     "duration": 0.115651,
     "end_time": "2024-04-25T03:02:27.002160",
     "exception": false,
     "start_time": "2024-04-25T03:02:26.886509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0000e+00,  4.9600e+05,  4.7943e+06,  ..., -9.9039e-02,\n",
       "         -6.1472e-02, -1.0333e-01],\n",
       "        [ 1.2632e+00,  4.9600e+05,  4.7943e+06,  ..., -1.0935e-01,\n",
       "         -6.8616e-02, -1.0964e-01],\n",
       "        [ 2.5263e+00,  4.9600e+05,  4.7943e+06,  ..., -8.9594e-02,\n",
       "         -7.6940e-02, -1.2014e-01],\n",
       "        ...,\n",
       "        [ 7.4154e+02,  4.9608e+05,  4.7936e+06,  ...,  0.0000e+00,\n",
       "          0.0000e+00,  0.0000e+00],\n",
       "        [ 7.4258e+02,  4.9608e+05,  4.7936e+06,  ...,  0.0000e+00,\n",
       "          0.0000e+00,  0.0000e+00],\n",
       "        [ 6.9706e+02,  4.9590e+05,  4.7937e+06,  ..., -1.1697e-01,\n",
       "         -3.9087e-02, -8.8570e-02]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indep_columns = ['Dist M', 'X', 'Y', 'Elev ft',\t'Slope at Point','Avg Slope 10m','Avg Slope 20m','Avg Slope 30m']\n",
    "t_indep = tensor(stream_profile_df[indep_columns].values, dtype=torch.float)\n",
    "t_indep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "412ebf4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.062285Z",
     "iopub.status.busy": "2024-04-25T03:02:27.061892Z",
     "iopub.status.idle": "2024-04-25T03:02:27.068856Z",
     "shell.execute_reply": "2024-04-25T03:02:27.067771Z"
    },
    "papermill": {
     "duration": 0.039168,
     "end_time": "2024-04-25T03:02:27.071235",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.032067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([584, 8])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22ccf1ff",
   "metadata": {
    "papermill": {
     "duration": 0.029244,
     "end_time": "2024-04-25T03:02:27.129993",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.100749",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Creating a Linear Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a4ff3bdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.189813Z",
     "iopub.status.busy": "2024-04-25T03:02:27.189414Z",
     "iopub.status.idle": "2024-04-25T03:02:27.204421Z",
     "shell.execute_reply": "2024-04-25T03:02:27.203386Z"
    },
    "papermill": {
     "duration": 0.047147,
     "end_time": "2024-04-25T03:02:27.206762",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.159615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0.4847, -0.4148,  0.0334, -0.2804, -0.2383,  0.2972, -0.2912, -0.0455])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.manual_seed(27)\n",
    "n_coeff = t_indep.shape[1]\n",
    "coeffs = torch.rand(n_coeff)-0.5\n",
    "coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "107e8a4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.265608Z",
     "iopub.status.busy": "2024-04-25T03:02:27.265197Z",
     "iopub.status.idle": "2024-04-25T03:02:27.274738Z",
     "shell.execute_reply": "2024-04-25T03:02:27.273737Z"
    },
    "papermill": {
     "duration": 0.04225,
     "end_time": "2024-04-25T03:02:27.277000",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.234750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0000e+00, -2.0575e+05,  1.6030e+05,  ..., -2.9431e-02,\n",
       "          1.7900e-02,  4.6986e-03],\n",
       "        [ 6.1224e-01, -2.0575e+05,  1.6030e+05,  ..., -3.2494e-02,\n",
       "          1.9980e-02,  4.9852e-03],\n",
       "        [ 1.2245e+00, -2.0575e+05,  1.6030e+05,  ..., -2.6624e-02,\n",
       "          2.2403e-02,  5.4627e-03],\n",
       "        ...,\n",
       "        [ 3.5941e+02, -2.0578e+05,  1.6028e+05,  ...,  0.0000e+00,\n",
       "         -0.0000e+00, -0.0000e+00],\n",
       "        [ 3.5992e+02, -2.0578e+05,  1.6028e+05,  ...,  0.0000e+00,\n",
       "         -0.0000e+00, -0.0000e+00],\n",
       "        [ 3.3785e+02, -2.0571e+05,  1.6028e+05,  ..., -3.4759e-02,\n",
       "          1.1381e-02,  4.0272e-03]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep*coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ca220ad9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.335694Z",
     "iopub.status.busy": "2024-04-25T03:02:27.335283Z",
     "iopub.status.idle": "2024-04-25T03:02:27.348534Z",
     "shell.execute_reply": "2024-04-25T03:02:27.347503Z"
    },
    "papermill": {
     "duration": 0.046092,
     "end_time": "2024-04-25T03:02:27.351309",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.305217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "t_indep[t_indep == 0] = 1e-6\n",
    "\n",
    "vals,indices = t_indep.max(dim=0)\n",
    "t_indep = t_indep / vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9728be75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.413201Z",
     "iopub.status.busy": "2024-04-25T03:02:27.412501Z",
     "iopub.status.idle": "2024-04-25T03:02:27.421094Z",
     "shell.execute_reply": "2024-04-25T03:02:27.420024Z"
    },
    "papermill": {
     "duration": 0.04175,
     "end_time": "2024-04-25T03:02:27.423502",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.381752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 6.5270e-10, -4.1475e-01,  3.3436e-02,  ..., -5.2885e-01,\n",
       "          1.7900e+04,  4.6986e+03],\n",
       "        [ 8.2447e-04, -4.1475e-01,  3.3436e-02,  ..., -5.8390e-01,\n",
       "          1.9980e+04,  4.9852e+03],\n",
       "        [ 1.6489e-03, -4.1475e-01,  3.3436e-02,  ..., -4.7842e-01,\n",
       "          2.2403e+04,  5.4627e+03],\n",
       "        ...,\n",
       "        [ 4.8400e-01, -4.1481e-01,  3.3432e-02,  ...,  5.3398e-06,\n",
       "         -2.9118e-01, -4.5470e-02],\n",
       "        [ 4.8468e-01, -4.1481e-01,  3.3432e-02,  ...,  5.3398e-06,\n",
       "         -2.9118e-01, -4.5470e-02],\n",
       "        [ 4.5497e-01, -4.1467e-01,  3.3432e-02,  ..., -6.2460e-01,\n",
       "          1.1381e+04,  4.0272e+03]])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_indep*coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1a1e5516",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.484782Z",
     "iopub.status.busy": "2024-04-25T03:02:27.484367Z",
     "iopub.status.idle": "2024-04-25T03:02:27.490712Z",
     "shell.execute_reply": "2024-04-25T03:02:27.489691Z"
    },
    "papermill": {
     "duration": 0.039571,
     "end_time": "2024-04-25T03:02:27.492911",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.453340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preds = (t_indep*coeffs).sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "55b256c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.553240Z",
     "iopub.status.busy": "2024-04-25T03:02:27.552877Z",
     "iopub.status.idle": "2024-04-25T03:02:27.560947Z",
     "shell.execute_reply": "2024-04-25T03:02:27.559939Z"
    },
    "papermill": {
     "duration": 0.0411,
     "end_time": "2024-04-25T03:02:27.563177",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.522077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([22597.0605, 24963.7715, 27865.0898, 28329.3262, 31669.1035, 35702.6016,\n",
       "        37892.0352, 40865.1914, 41798.7656, 43442.7734])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9c1ca77f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.625609Z",
     "iopub.status.busy": "2024-04-25T03:02:27.625197Z",
     "iopub.status.idle": "2024-04-25T03:02:27.632272Z",
     "shell.execute_reply": "2024-04-25T03:02:27.630908Z"
    },
    "papermill": {
     "duration": 0.041898,
     "end_time": "2024-04-25T03:02:27.634590",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.592692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([584]), torch.Size([584]))"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_dep.shape, preds.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b72c03d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.697256Z",
     "iopub.status.busy": "2024-04-25T03:02:27.696323Z",
     "iopub.status.idle": "2024-04-25T03:02:27.705890Z",
     "shell.execute_reply": "2024-04-25T03:02:27.704818Z"
    },
    "papermill": {
     "duration": 0.043384,
     "end_time": "2024-04-25T03:02:27.708261",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.664877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(35455.6116, dtype=torch.float64)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = torch.abs(preds-t_dep).mean()\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1a391bad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.771782Z",
     "iopub.status.busy": "2024-04-25T03:02:27.770954Z",
     "iopub.status.idle": "2024-04-25T03:02:27.776872Z",
     "shell.execute_reply": "2024-04-25T03:02:27.775828Z"
    },
    "papermill": {
     "duration": 0.040482,
     "end_time": "2024-04-25T03:02:27.779114",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.738632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_preds(coeffs, indeps): return (indeps*coeffs).sum(axis=1)\n",
    "def calc_loss(coeffs, indeps, deps): return torch.abs(calc_preds(coeffs, indeps)-deps).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "293d1e53",
   "metadata": {
    "papermill": {
     "duration": 0.030173,
     "end_time": "2024-04-25T03:02:27.840015",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.809842",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Doing a gradient descent step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "66e894ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.902087Z",
     "iopub.status.busy": "2024-04-25T03:02:27.901269Z",
     "iopub.status.idle": "2024-04-25T03:02:27.908665Z",
     "shell.execute_reply": "2024-04-25T03:02:27.907673Z"
    },
    "papermill": {
     "duration": 0.040931,
     "end_time": "2024-04-25T03:02:27.910894",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.869963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 0.4847, -0.4148,  0.0334, -0.2804, -0.2383,  0.2972, -0.2912, -0.0455],\n",
       "       requires_grad=True)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coeffs.requires_grad_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f13132be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:27.973062Z",
     "iopub.status.busy": "2024-04-25T03:02:27.972673Z",
     "iopub.status.idle": "2024-04-25T03:02:27.982309Z",
     "shell.execute_reply": "2024-04-25T03:02:27.981221Z"
    },
    "papermill": {
     "duration": 0.043952,
     "end_time": "2024-04-25T03:02:27.984658",
     "exception": false,
     "start_time": "2024-04-25T03:02:27.940706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(35455.6116, dtype=torch.float64, grad_fn=<MeanBackward0>)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "98f73575",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:28.050394Z",
     "iopub.status.busy": "2024-04-25T03:02:28.049994Z",
     "iopub.status.idle": "2024-04-25T03:02:28.054956Z",
     "shell.execute_reply": "2024-04-25T03:02:28.053858Z"
    },
    "papermill": {
     "duration": 0.041333,
     "end_time": "2024-04-25T03:02:28.057303",
     "exception": false,
     "start_time": "2024-04-25T03:02:28.015970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "coeffs.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "06065f8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:28.121444Z",
     "iopub.status.busy": "2024-04-25T03:02:28.121048Z",
     "iopub.status.idle": "2024-04-25T03:02:28.186548Z",
     "shell.execute_reply": "2024-04-25T03:02:28.185494Z"
    },
    "papermill": {
     "duration": 0.100682,
     "end_time": "2024-04-25T03:02:28.189073",
     "exception": false,
     "start_time": "2024-04-25T03:02:28.088391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 4.6219e-01,  9.6213e-01,  9.6227e-01,  9.5337e-01, -3.0024e-01,\n",
       "        -1.8880e+00, -1.0529e+05, -1.0555e+05])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss.backward()\n",
    "coeffs.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "43deb79b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:28.252689Z",
     "iopub.status.busy": "2024-04-25T03:02:28.252256Z",
     "iopub.status.idle": "2024-04-25T03:02:28.268625Z",
     "shell.execute_reply": "2024-04-25T03:02:28.267236Z"
    },
    "papermill": {
     "duration": 0.050948,
     "end_time": "2024-04-25T03:02:28.271026",
     "exception": false,
     "start_time": "2024-04-25T03:02:28.220078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(4.4452e+09, dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "loss = calc_loss(coeffs, t_indep, t_dep)\n",
    "loss.backward()\n",
    "with torch.no_grad():\n",
    "    coeffs.sub_(coeffs.grad * 0.1)\n",
    "    coeffs.grad.zero_()\n",
    "    print(calc_loss(coeffs, t_indep, t_dep))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba0cc46a",
   "metadata": {
    "papermill": {
     "duration": 0.031199,
     "end_time": "2024-04-25T03:02:28.334008",
     "exception": false,
     "start_time": "2024-04-25T03:02:28.302809",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Training a Linear Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "89990c0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:28.399222Z",
     "iopub.status.busy": "2024-04-25T03:02:28.398374Z",
     "iopub.status.idle": "2024-04-25T03:02:31.530767Z",
     "shell.execute_reply": "2024-04-25T03:02:31.529524Z"
    },
    "papermill": {
     "duration": 3.167992,
     "end_time": "2024-04-25T03:02:31.533562",
     "exception": false,
     "start_time": "2024-04-25T03:02:28.365570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "from fastai.data.transforms import RandomSplitter\n",
    "trn_split, val_split = RandomSplitter(seed=27)(stream_profile_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0ca8c064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:31.598368Z",
     "iopub.status.busy": "2024-04-25T03:02:31.597826Z",
     "iopub.status.idle": "2024-04-25T03:02:31.609897Z",
     "shell.execute_reply": "2024-04-25T03:02:31.608805Z"
    },
    "papermill": {
     "duration": 0.047558,
     "end_time": "2024-04-25T03:02:31.612326",
     "exception": false,
     "start_time": "2024-04-25T03:02:31.564768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(468, 116)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trn_indep, val_indep = t_indep[trn_split], t_indep[val_split]\n",
    "trn_dep, val_dep = t_dep[trn_split], t_dep[val_split]\n",
    "len(trn_indep), len(val_indep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a3141763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:31.678436Z",
     "iopub.status.busy": "2024-04-25T03:02:31.678025Z",
     "iopub.status.idle": "2024-04-25T03:02:31.683646Z",
     "shell.execute_reply": "2024-04-25T03:02:31.682510Z"
    },
    "papermill": {
     "duration": 0.042106,
     "end_time": "2024-04-25T03:02:31.686012",
     "exception": false,
     "start_time": "2024-04-25T03:02:31.643906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def update_coeffs(coeffs, lr):\n",
    "    coeffs.sub_(coeffs * lr)\n",
    "    coeffs.grad.zero_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "da24c94e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:31.752778Z",
     "iopub.status.busy": "2024-04-25T03:02:31.751661Z",
     "iopub.status.idle": "2024-04-25T03:02:31.757716Z",
     "shell.execute_reply": "2024-04-25T03:02:31.756697Z"
    },
    "papermill": {
     "duration": 0.041106,
     "end_time": "2024-04-25T03:02:31.759954",
     "exception": false,
     "start_time": "2024-04-25T03:02:31.718848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def one_epoch(coeffs, lr):\n",
    "    loss = calc_loss(coeffs, trn_indep, trn_dep)\n",
    "    loss.backward()\n",
    "    with torch.no_grad(): update_coeffs(coeffs, lr)\n",
    "    print(f\"{loss:3f}\", end=\"; \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "0609f088",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:31.824994Z",
     "iopub.status.busy": "2024-04-25T03:02:31.824570Z",
     "iopub.status.idle": "2024-04-25T03:02:31.830149Z",
     "shell.execute_reply": "2024-04-25T03:02:31.829040Z"
    },
    "papermill": {
     "duration": 0.040977,
     "end_time": "2024-04-25T03:02:31.832373",
     "exception": false,
     "start_time": "2024-04-25T03:02:31.791396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def init_coeffs(): return (torch.rand(n_coeff)-0.5).requires_grad_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7614641f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:31.898374Z",
     "iopub.status.busy": "2024-04-25T03:02:31.897944Z",
     "iopub.status.idle": "2024-04-25T03:02:31.904177Z",
     "shell.execute_reply": "2024-04-25T03:02:31.902942Z"
    },
    "papermill": {
     "duration": 0.042666,
     "end_time": "2024-04-25T03:02:31.907020",
     "exception": false,
     "start_time": "2024-04-25T03:02:31.864354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(epochs=30, lr = 0.01):\n",
    "    torch.manual_seed(27)\n",
    "    coeffs = init_coeffs()\n",
    "    for i in range(epochs): one_epoch(coeffs, lr=lr)\n",
    "    return coeffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "9c506a56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:31.977831Z",
     "iopub.status.busy": "2024-04-25T03:02:31.976544Z",
     "iopub.status.idle": "2024-04-25T03:02:31.990472Z",
     "shell.execute_reply": "2024-04-25T03:02:31.989257Z"
    },
    "papermill": {
     "duration": 0.04989,
     "end_time": "2024-04-25T03:02:31.992921",
     "exception": false,
     "start_time": "2024-04-25T03:02:31.943031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35864.836165; 28691.862243; 22953.483318; 18362.780271; 14690.217573; 11752.167531; 9401.727925; 7521.375960; 6017.094183; 4813.668772; 3850.928606; 3080.736527; 2464.582817; 1971.659922; 1577.321480; 1261.850797; 1009.474271; 807.572983; "
     ]
    }
   ],
   "source": [
    "coeffs = train_model(18, lr=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4c9fd9a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.062144Z",
     "iopub.status.busy": "2024-04-25T03:02:32.061136Z",
     "iopub.status.idle": "2024-04-25T03:02:32.066555Z",
     "shell.execute_reply": "2024-04-25T03:02:32.065469Z"
    },
    "papermill": {
     "duration": 0.043689,
     "end_time": "2024-04-25T03:02:32.068988",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.025299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preds = calc_preds(coeffs, val_indep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e68dde6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.135366Z",
     "iopub.status.busy": "2024-04-25T03:02:32.134991Z",
     "iopub.status.idle": "2024-04-25T03:02:32.143117Z",
     "shell.execute_reply": "2024-04-25T03:02:32.142122Z"
    },
    "papermill": {
     "duration": 0.04381,
     "end_time": "2024-04-25T03:02:32.145346",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.101536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([False,  True, False, False, False, False, False, False, False, False,\n",
       "        False, False, False,  True, False, False])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = val_dep.bool()==(preds>0.5)\n",
    "results[:16]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b500cd92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.211527Z",
     "iopub.status.busy": "2024-04-25T03:02:32.211119Z",
     "iopub.status.idle": "2024-04-25T03:02:32.218765Z",
     "shell.execute_reply": "2024-04-25T03:02:32.217721Z"
    },
    "papermill": {
     "duration": 0.043295,
     "end_time": "2024-04-25T03:02:32.221012",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.177717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.0517)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "aeac8c49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.286820Z",
     "iopub.status.busy": "2024-04-25T03:02:32.286439Z",
     "iopub.status.idle": "2024-04-25T03:02:32.294488Z",
     "shell.execute_reply": "2024-04-25T03:02:32.293487Z"
    },
    "papermill": {
     "duration": 0.042745,
     "end_time": "2024-04-25T03:02:32.296616",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.253871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def acc(coeffs): return (val_dep.bool()==calc_preds(coeffs, val_indep)).float().mean()\n",
    "acc(coeffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5dc89a11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.364144Z",
     "iopub.status.busy": "2024-04-25T03:02:32.363737Z",
     "iopub.status.idle": "2024-04-25T03:02:32.372030Z",
     "shell.execute_reply": "2024-04-25T03:02:32.370994Z"
    },
    "papermill": {
     "duration": 0.044814,
     "end_time": "2024-04-25T03:02:32.374500",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.329686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 228.4556,  437.2232, 1029.4365,  939.1874,  579.8965,  588.3231,\n",
       "         579.2625, 1032.9220,  661.7859, 1306.5138,  757.3552,  428.8132,\n",
       "         746.0136,  479.1485,  756.1600,  646.9604,  374.7926,  459.0062,\n",
       "         797.0262,  123.1197,  256.8824, 1093.0975, 1286.4025,  776.6594,\n",
       "         303.5705,  411.5506,  329.6645,  449.9842], grad_fn=<SliceBackward0>)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:28]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a7e9c408",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.443143Z",
     "iopub.status.busy": "2024-04-25T03:02:32.442061Z",
     "iopub.status.idle": "2024-04-25T03:02:32.447996Z",
     "shell.execute_reply": "2024-04-25T03:02:32.446726Z"
    },
    "papermill": {
     "duration": 0.042832,
     "end_time": "2024-04-25T03:02:32.450513",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.407681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_preds(coeffs, indeps): return torch.sigmoid((indeps*coeffs).sum(axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "dec2fe02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.517105Z",
     "iopub.status.busy": "2024-04-25T03:02:32.516285Z",
     "iopub.status.idle": "2024-04-25T03:02:32.538186Z",
     "shell.execute_reply": "2024-04-25T03:02:32.537019Z"
    },
    "papermill": {
     "duration": 0.058404,
     "end_time": "2024-04-25T03:02:32.540582",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.482178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.955704; 0.956338; 0.956827; 0.957199; 0.957481; 0.957693; 0.957853; 0.957973; 0.958063; 0.958131; 0.958181; 0.958219; 0.958248; 0.958269; 0.958285; 0.958297; 0.958306; 0.958313; 0.958318; 0.958322; 0.958325; 0.958327; 0.958328; 0.958328; 0.958316; 0.958254; 0.958050; 0.957526; 0.956304; 0.953451; "
     ]
    }
   ],
   "source": [
    "coeffs = train_model(lr=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "61f2772a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T03:02:32.607351Z",
     "iopub.status.busy": "2024-04-25T03:02:32.606988Z",
     "iopub.status.idle": "2024-04-25T03:02:32.615153Z",
     "shell.execute_reply": "2024-04-25T03:02:32.613923Z"
    },
    "papermill": {
     "duration": 0.044335,
     "end_time": "2024-04-25T03:02:32.617428",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.573093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc(coeffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e94ac78f",
   "metadata": {
    "papermill": {
     "duration": 0.032394,
     "end_time": "2024-04-25T03:02:32.682751",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.650357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8136c24",
   "metadata": {
    "papermill": {
     "duration": 0.033257,
     "end_time": "2024-04-25T03:02:32.749812",
     "exception": false,
     "start_time": "2024-04-25T03:02:32.716555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 4638965,
     "sourceId": 7899275,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4778935,
     "sourceId": 8094226,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30683,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 25.201252,
   "end_time": "2024-04-25T03:02:34.306676",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-25T03:02:09.105424",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
